<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eirunye Activity</title>
  
  <subtitle>NOTE</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://eirunye.github.io/"/>
  <updated>2018-10-03T06:46:20.083Z</updated>
  <id>http://eirunye.github.io/</id>
  
  <author>
    <name>Eirunye</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Boot 定时器(九)</title>
    <link href="http://eirunye.github.io/2018/10/03/Spring-Boot-%E5%AE%9A%E6%97%B6%E5%99%A8-%E4%B9%9D/"/>
    <id>http://eirunye.github.io/2018/10/03/Spring-Boot-定时器-九/</id>
    <published>2018-10-03T02:35:05.000Z</published>
    <updated>2018-10-03T06:46:20.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在项目中我们有时需要做定时任务，那么我们在Spring Boot项目中如何添加定时任务呢？非常简单，让我们一起学习吧。</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-06639c85d05db900.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/330" alt="Spring Boot.png"></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="主要是添加注解的方式进行"><a href="#主要是添加注解的方式进行" class="headerlink" title="主要是添加注解的方式进行"></a>主要是添加注解的方式进行</h2><p>1、在启动类<code>Application.class</code>中添加注解</p><blockquote><p>@MapperScan(“com.example.myjpa.dao”)//mybatis的注解<br> @EnableScheduling//定时器注解</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableScheduling</span><br><span class="line">public class MyApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(MyjpaApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、创建<code>ScheduledTasks.class</code>做定时任务，添加注解</p><blockquote><p>@Configuration //1.主要用于标记配置类，兼备Component的效果。<br> @EnableScheduling // 2.开启定时任务</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Configuration //1.主要用于标记配置类，兼备Component的效果。</span><br><span class="line">@EnableScheduling // 2.开启定时任务</span><br><span class="line">public class ScheduledTasks &#123;</span><br><span class="line">    private static final SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;HH:mm:ss&quot;);</span><br><span class="line">     //表示定时器时间定义方式</span><br><span class="line">     //@Scheduled(cron = &quot;0/5 * * * * ?&quot;)</span><br><span class="line">     //@Scheduled(fixedRate = 1000 * 60)</span><br><span class="line">    @Scheduled(cron = &quot;0 0/2 * * * ?&quot;)</span><br><span class="line">    public void configureTasks() &#123;</span><br><span class="line">        System.out.println(&quot;The time is now &quot; + dateFormat.format(new Date()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、创建config定时器配置<code>CompleteScheduleConfig.class</code>,添加注解</p><blockquote><p>@Configuration<br>@EnableScheduling</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableScheduling</span><br><span class="line">public class CompleteScheduleConfig implements SchedulingConfigurer &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    StudentRepository studentRepository;</span><br><span class="line">    private static String DEFAULT_CRON = &quot;0 0/2 * * * ?&quot;;//表示间隔2分钟</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configureTasks(ScheduledTaskRegistrar scheduledTaskRegistrar) &#123;</span><br><span class="line">//        scheduledTaskRegistrar.scheduleFixedDelayTask(new FixedDelayTask(() -&gt; &#123;</span><br><span class="line">//</span><br><span class="line">//        &#125;, 10000, 1000 * 60));</span><br><span class="line"></span><br><span class="line">        scheduledTaskRegistrar.addTriggerTask(() -&gt; &#123;</span><br><span class="line">            Student student = new Student();</span><br><span class="line">            student.setName(&quot;ok&quot;);</span><br><span class="line">            student.setAge(12);</span><br><span class="line">            student.setSex(&quot;nan&quot;);</span><br><span class="line">            studentRepository.save(student);</span><br><span class="line">            System.out.println(&quot;===插入成功!===&quot;);</span><br><span class="line">        &#125;, triggerContext -&gt; &#123;</span><br><span class="line">            return new CronTrigger(DEFAULT_CRON).nextExecutionTime(triggerContext);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>注</strong>：这个案例主要是通过定时利用JPA操作数据的方式进行代码编写案例(案例是进行每隔2分钟就插入一条数据)，在开发项目中假如数据刷新我们可以用定时任务完成、股票类数据刷新等等。所以定时任务在后台任务中也是一个重点。</li></ul><h1 id="cron表达式"><a href="#cron表达式" class="headerlink" title="cron表达式"></a>cron表达式</h1><p>大家可以进入这里测试<a href="http://cron.qqe2.com/" target="_blank" rel="noopener">cron在线表达式生成工具</a><br>本篇案例中<code>&quot;0 0/2 * * * ?&quot;</code>是表示每个2分钟运行一次。</p><h2 id="认识cron表达式"><a href="#认识cron表达式" class="headerlink" title="认识cron表达式"></a>认识cron表达式</h2><table><thead><tr><th>名词</th><th>范围</th><th>表达式</th></tr></thead><tbody><tr><td>秒</td><td>0-59</td><td><code>- * /</code></td></tr><tr><td>分</td><td>0-59</td><td><code>- * /</code></td></tr><tr><td>时</td><td>0-23</td><td><code>- * /</code></td></tr><tr><td>日期</td><td>1-31</td><td><code>- * ? / L W C</code></td></tr><tr><td>星期</td><td>1-7或者 SUN-SAT</td><td><code>- * ? / L C #</code></td></tr><tr><td>年（非必填）</td><td>1970-2099</td><td><code>- * /</code></td></tr></tbody></table><h2 id="字符解析"><a href="#字符解析" class="headerlink" title="字符解析"></a>字符解析</h2><table><thead><tr><th>表达式字符</th><th>注释</th></tr></thead><tbody><tr><td><code>?</code></td><td>表示所有值、不确定的值</td></tr><tr><td><code>,</code></td><td>表示附加数个可能的值</td></tr><tr><td><code>-</code></td><td>表示指定值的范围</td></tr><tr><td><code>/</code></td><td>表示指定从哪个值开始，然后按照哪个值进行递增，如<code>i/j</code>表示从<code>i</code>开始，每次按照<code>j</code>值进行递增</td></tr><tr><td><code>L</code>，late简写</td><td>表示在日时是这个最后一天，在周期时是表示这个月最后一个星期几</td></tr><tr><td><code>W</code> weekday简写</td><td>表示离给定日期最近的工作日(周一到周五)</td></tr><tr><td><code>#</code></td><td>表示这个月第几个周几，如：6#3表示这个月第3个周五（6表示周五，3表示的是第3个）</td></tr></tbody></table><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><table><thead><tr><th>表达式</th><th>注解</th></tr></thead><tbody><tr><td><code>&quot;0/1000 * * * * ?&quot;</code></td><td>每1000秒执行一次</td></tr><tr><td><code>*/1000 * * * * ?</code></td><td>每隔1000秒执行一次</td></tr><tr><td><code>&quot;0 0 10 * * ?&quot;</code></td><td>每天10点整执行一次</td></tr><tr><td><code>0 0 5-15 * * ?</code></td><td>每天5-15点整点执行一次</td></tr><tr><td><code>0 0/30 9-18 * * ?</code></td><td>早上9点到下午18点工作时间内每半小时执行一次</td></tr><tr><td><code>0 0 12 ? * WED</code></td><td>每个星期三中午12点执行</td></tr><tr><td><code>0 0 18 ? * TUES,THUR,SAT</code></td><td>每周二、四、六下午6点执行一次</td></tr><tr><td><code>&quot;20,30,40 * * * * ?&quot;</code></td><td>每20秒，30秒，40秒时执行一次</td></tr><tr><td><code>&quot;0 15 10 L * ?&quot;</code></td><td>表示每个月最后一天的10点15分0秒执行一次</td></tr><tr><td><code>&quot;0 15 10 LW * ?&quot;</code></td><td>表示每个月最后一个工作日的10点15分0秒执行一次</td></tr></tbody></table><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><ul><li><a href="https://gitee.com/eirunye/SpringbootTimer" target="_blank" rel="noopener"><strong>本篇案例代码下载-码云</strong></a></li><li><a href="https://github.com/eirunye/SpringbootTimer" target="_blank" rel="noopener"><strong>本篇案例代码下载-GitHub</strong></a></li><li><a href="https://github.com/eirunye/Eirunye_SpringBoot_Notes" target="_blank" rel="noopener"><strong>Spring Boot系列代码-码云</strong></a></li><li><a href="https://github.com/eirunye/Eirunye_SpringBoot_Notes" target="_blank" rel="noopener"><strong>Spring Boot系列代码-GitHub</strong></a></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本篇案例主要讲解的是在Spring Boot运用定时器，这是在我的项目中用到了，所有总结为一个模块进行案例分析，代码很简单。这里就不带大家进行单元测试了。</p><h1 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h1><ul><li><p><a href="https://eirunye.github.io"><strong>我的博客https://eirunye.github.io</strong></a>进行浏览相关技术文章，大家一起相互探讨技术。</p></li><li><p>如果大家想了解更多的Spring Boot相关博文请进入我的<a href="https://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/Spring-Boot/"><strong>Spring Boot系列博客栈</strong></a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;在项目中我们有时需要做定时任务，那么我们在Spring Boot项目中如何添加定时任务呢？非常简单，让我们一起学习吧。&lt;/p&gt;
&lt;p&gt;&lt;im
      
    
    </summary>
    
      <category term="后台" scheme="http://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/"/>
    
      <category term="Spring Boot" scheme="http://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/Spring-Boot/"/>
    
      <category term="定时器" scheme="http://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/Spring-Boot/%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    
    
      <category term="Java" scheme="http://eirunye.github.io/tags/Java/"/>
    
      <category term="Spring Boot" scheme="http://eirunye.github.io/tags/Spring-Boot/"/>
    
      <category term="定时器" scheme="http://eirunye.github.io/tags/%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot MyBatis集成以及操作数据库(七)</title>
    <link href="http://eirunye.github.io/2018/10/02/Spring-Boot-MyBatis%E9%9B%86%E6%88%90%E4%BB%A5%E5%8F%8A%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93-%E4%B8%83/"/>
    <id>http://eirunye.github.io/2018/10/02/Spring-Boot-MyBatis集成以及操作数据库-七/</id>
    <published>2018-10-02T14:41:36.000Z</published>
    <updated>2018-10-11T15:06:54.063Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>我们都知道以前搭建项目的时候都是SSM(Spring+SpringMVC+MyBatis)的方式来进行的。那么我们Spring Boot项目是否也能集成MyBatis呢？进而操作数据库数据呢？答案是肯定的。<br>本篇博文主要讲解的是Spring Boot开发项目中如何集成MyBatis，MyBatis是如何用来操作数据库？带着这样的疑问我们一起来学习吧。</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-06639c85d05db900.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/330" alt="Spring Boot.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-2884606ab5612d51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="mybatis-logo.png"></p><h1 id="认识MyBatis"><a href="#认识MyBatis" class="headerlink" title="认识MyBatis"></a>认识MyBatis</h1><p>MyBatis是什么？在这之前我们可能什么都不知道，我们只知道它能快速帮我们构造操作数据库数据工具。<br>那我们是怎么才能了解呢？非常简单，浏览相关技术文章快速便捷。大家在这里一定要养成好的习惯，在开发中遇到不懂的技术难题的时候，进行搜索，这个谁都会，但是如果有时间一定要进入其官网查看人家的官网，毕竟官网都是有浅入神，原理理解起来简单，但是要求其英语要好点，不然有点吃力。所以还是建议大家多读英语，多看官方文档。<br><a href="http://www.mybatis.org/mybatis-3/" target="_blank" rel="noopener">MyBatis官方文档</a>在这里。</p><p><strong>1.什么是 MyBatis ?</strong></p><blockquote><p>(原)MyBatis is a first class persistence framework with support for custom SQL, stored procedures and advanced mappings.<br>    MyBatis eliminates almost all of theJDBC code and manual setting of parameters and retrieval of results.<br>    MyBatis can use simple XML or Annotations for configuration and map primitives, Mapinterfaces and Java POJOs (Plain Old Java Objects) to database records.</p></blockquote><blockquote><p>(译)MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。</p></blockquote><p>好了，我们大概了解了一下MyBatis，那我们就从最简单的开始吧。</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>我们需要在我们的Spring Boot项目集成MyBatis，所以现在我们就开始进行集成MyBatis到我们项目中吧。</p><h2 id="在Maven创建的项目进行配置"><a href="#在Maven创建的项目进行配置" class="headerlink" title="在Maven创建的项目进行配置"></a>在<code>Maven</code>创建的项目进行配置</h2><p>1.打开<code>pom.xml</code>添加依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><h2 id="在Gradle创建的项目进行配置"><a href="#在Gradle创建的项目进行配置" class="headerlink" title="在Gradle创建的项目进行配置"></a>在<code>Gradle</code>创建的项目进行配置</h2><p>添加依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="或者jar包引入"><a href="#或者jar包引入" class="headerlink" title="或者jar包引入"></a>或者jar包引入</h2><p>在这里<a href="https://github.com/mybatis/mybatis-3/releases" target="_blank" rel="noopener">下载jar包</a>，然后添加在Lib目录下然后添加配置</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>由于我们经常需要到封装Json数据访问输出，所以这里我创建了一个comment-module依赖包，每次每个公共类或者是一些Utils包，封装在其里面，这样每个项目都可以进行引用了。不在module如创建情况这里：<a href="">创建module方式</a></p><h1 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h1><p><strong>1.创建文件</strong></p><pre><code class="JAVA"></code></pre><p><strong>2.创建mapper</strong></p><p><strong>3.添加注解</strong></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p><strong>1.单元测试</strong></p><ul><li><strong>注：</strong>这里不进行Posman请求测试了，大家到时自行测试，等我们讲解该篇完成后会进行单元测试重点分析。</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>1.本篇文章我们学习了Spring Boot项目如何集成MyBatis，并且进行了了数据库的基本操作。</p><p>2.相关的配置文件还有操作的xml文件，创建步骤，大家要记住。</p><p>3.接下来我们将深入分析MyBatis在项目中常用的功能如：分页查询等操作。</p><p>4.后期的文章将会深入解析MyBatis高级使用、利用IDEA重定向自动生成xml配置文件等等。</p><h1 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h1><ul><li><p><a href="https://eirunye.github.io"><strong>我的博客https://eirunye.github.io</strong></a>进行浏览相关技术文章，大家一起相互探讨技术。</p></li><li><p>如果大家想了解更多的Spring Boot相关博文请进入我的<a href="https://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/Spring-Boot/"><strong>Spring Boot系列博客栈</strong></a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;我们都知道以前搭建项目的时候都是SSM(Spring+SpringMVC+MyBatis)的方式来进行的。那么我们Spring Boot项目
      
    
    </summary>
    
      <category term="后台" scheme="http://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/"/>
    
      <category term="Spring Boot" scheme="http://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/Spring-Boot/"/>
    
      <category term="MyBatis" scheme="http://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/Spring-Boot/MyBatis/"/>
    
    
      <category term="Java" scheme="http://eirunye.github.io/tags/Java/"/>
    
      <category term="Spring Boot" scheme="http://eirunye.github.io/tags/Spring-Boot/"/>
    
      <category term="MyBatis" scheme="http://eirunye.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot JPA操作数据(六)</title>
    <link href="http://eirunye.github.io/2018/09/29/Spring-Boot-JPA%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE-%E5%85%AD/"/>
    <id>http://eirunye.github.io/2018/09/29/Spring-Boot-JPA操作数据-六/</id>
    <published>2018-09-29T12:54:35.000Z</published>
    <updated>2018-10-02T14:43:17.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在Spring Boot项目开发中，我们操作数据库的时候一般会用到<code>JPA</code>或者是<code>MyBatis</code>框架，今天所要将的是<code>JPA</code>操作数据库案例。后续会说到<code>MyBatis</code>操作数据。大家在开发的时候，看看自己对哪个比较熟练或者是公司项目的需要来选择，上篇我们已经说了Spring Boot如何连接数据库,我们紧跟着上篇<a href="https://eirunye.github.io/2018/09/19/Spring-Boot-%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93-%E4%BA%94/#more">Spring Boot 连接数据库(五)</a>的内容来进行操作。</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-06639c85d05db900.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/330" alt="Spring Boot.png"></p><h1 id="认识JPA"><a href="#认识JPA" class="headerlink" title="认识JPA"></a>认识JPA</h1><p>首先我们在遇到一个新的知识的时候，官方技术文档将是我们最好的帮手，或者是网上查询相关技术支持博文。进入<a href="http://projects.spring.io/spring-data-jpa/" target="_blank" rel="noopener">JPA官方文档</a>学习吧。</p><p>什么是JPA?</p><blockquote><p>Spring Data JPA, part of the larger <a href="http://projects.spring.io/spring-data" target="_blank" rel="noopener">Spring Data family</a> , makes it easy to easily implement JPA based repositories. This module deals with enhanced support for JPA based data access layers. It makes it easier to build Spring-powered applications that use data access technologies.<br>Spring Data JPA aims to significantly improve the implementation of data access layers by reducing the effort to the amount that’s actually needed.</p></blockquote><p>翻译如下：</p><blockquote><p>Spring Data JPA是更大的<a href="http://projects.spring.io/spring-data" target="_blank" rel="noopener">Spring Data系列</a>的一部分，可以轻松实现基于JPA的存储库。 此模块处理对基于JPA的数据访问层的增强支持。 它使构建使用数据访问技术的Spring驱动应用程序变得更加容易。<br>Spring Data JPA旨在通过减少实际需要的工作量来显着改善数据访问层的实现</p></blockquote><p>JPA有什么特性？</p><ul><li>基于Spring和JPA构建存储库的复杂支持</li><li>支持<code>Querydsl</code>术语，从而支持类型安全的JPA查询</li><li>透明审核域名类</li><li>分页支持，动态查询执行，集成自定义数据访问代码的能力</li><li>在引用时可通过<code>@Query</code>带注释的自定义查询</li><li>支持基于XML的实体映射</li><li>基于JavaConfig的存储库配置，介绍<code>@EnableJpaRepositories</code></li></ul><p>配置JPA要求</p><ul><li>JAVA 8或者更高</li><li><a href="http://www.gradle.org/downloads" target="_blank" rel="noopener">Gradle 4+</a> or <a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">Maven 3.2+</a></li></ul><p>在Spring Boot中通过JPA来进行操作数据库是非常简便的，并且我们也可以自定义SQL语句，而在满足我们项目的条件下不需要进行书写过多的SQL语句，这能很大程度解决我们的开发效率。</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ul><li><strong>注</strong>：本案例选择的开发工具<a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">IntelliJ IDEA</a></li></ul><p>Spring Boot项目是如何进行配置<code>JPA</code>呢？这里我用的是<code>Mevan</code>和<code>Gradle</code>两种方式进行项目的配置来创建Spring Boot项目，但是在本案例开发提供代码是通过<code>Mavan</code>进行的，后期会补充<code>Gradle</code>的案例代码。</p><h2 id="Maven配置"><a href="#Maven配置" class="headerlink" title="Maven配置"></a>Maven配置</h2><p><strong>1.添加JPA maven依赖库</strong></p><p>在<code>pom.xml</code>添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--mysql依赖--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;8.0.11&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--JPA依赖--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>注</strong>：这里因为要操作数据，所以需要添加数据库依赖，如<code>MySQL</code></li></ul><p><strong>2.在<code>application.yml</code>配置文件中进行配置(推荐)</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver  # MySql jdbc Driver</span><br><span class="line">    # 连接数据库</span><br><span class="line">    # eirunye_springboot_notes表示的是你创建的数据库;</span><br><span class="line">    # useSSL:是否使用SSL证书验证;</span><br><span class="line">    # characterEncoding:编码格式;</span><br><span class="line">    # useJDBCCompliantTimezoneShift:是否使用符合JDBC的时区转换;</span><br><span class="line">    # useLegacyDatetimeCode:是否使用旧版日期时间码;</span><br><span class="line">    # serverTimezone:选择服务器时间方式;</span><br><span class="line">    url: jdbc:mysql://127.0.0.1:3306/eirunye_springboot_notes?useSSL=false&amp;requireSSL=false&amp;characterEncoding=UTF-8&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC</span><br><span class="line">    username: root   #本地设置数据库账号</span><br><span class="line">    password: 123456 #密码</span><br><span class="line">  jpa:</span><br><span class="line">    hibernate:</span><br><span class="line">      ddl-auto: update</span><br><span class="line">    show-sql: true</span><br><span class="line">server:</span><br><span class="line">  port: 8090 #访问端口</span><br></pre></td></tr></table></figure></p><ul><li><strong>注</strong> <code>spring.jpa.hibernate.ddl-auto</code>配置的属性解释：<ul><li>create：每次启动该程序，没有表的会新建表，表内有数据都会清空，结束时，并未清空表</li><li>create-drop：每次启动、结束程序的时都会清空表，而且启动时会重新创建表，</li><li>update：每次启动程序时，没有表的会创建表，表不会清空，检查表字段是否相同，不同则更新，</li><li>validate：每次启动程序时，校验数据与表(字段、类型等)是否相同，不同会报错</li><li>none：在所有其他情况下，默认为none，这里选择update</li></ul></li></ul><p>在<code>application.properties</code>配置文件中进行配置</p><ul><li><strong>注</strong>：<code>.yml</code>和<code>.properties</code>选择其一</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server.port=8090</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver  # MySql jdbc Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/eirunye_springboot_notes?useSSL=false&amp;requireSSL=false&amp;characterEncoding=UTF-8&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC</span><br><span class="line">spring.datasource.data-username=root</span><br><span class="line">spring.datasource.data-password=123456</span><br><span class="line">spring.jpa.hibernate.ddl-auto=update</span><br><span class="line">spring.jpa.show-sql=true</span><br></pre></td></tr></table></figure><h2 id="Gradle配置"><a href="#Gradle配置" class="headerlink" title="Gradle配置"></a>Gradle配置</h2><p><strong>1.在<code>build.gradle</code>添加依赖</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    //注：Android 的Gradle依赖已经改为implementation</span><br><span class="line">    compile(&quot;org.springframework.boot:spring-boot-starter-data-jpa&quot;)   //添加jpa依赖</span><br><span class="line">    compile (&quot;mysql:mysql-connector-java:5.1.24&quot;) //添加MySQL依赖</span><br><span class="line">    compile(&quot;com.h2database:h2&quot;)</span><br><span class="line">    testCompile(&quot;junit:junit&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.在<code>.yml</code>或者<code>.properties</code>配置文件中进行配置和上面的<code>Maven</code>一样。</p><h1 id="JPA操作数据"><a href="#JPA操作数据" class="headerlink" title="JPA操作数据"></a>JPA操作数据</h1><ul><li><strong>注</strong>：在这里简单的举例说明JPA的使用，在系列文章会更加深入讲关于JPA的使用，在这里的代码创建到是按照<a href="https://eirunye.github.io/2018/08/22/Spring-Boot-%E9%A1%B9%E7%9B%AE%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA-%E5%9B%9B/#more">Spring Boot 项目如何搭建(四)</a>项目包层级定义来创建的，所以大家不清楚就再去看看，或者下载本例代码查看就明白了。</li></ul><p><strong>1.在<code>.bean</code>包下创建实体<code>User.class</code></strong></p><ul><li><strong>注</strong>：这里添加注解的位置如果选择在属性上面添加的话就全部都选择在属性上面添加，本例的<code>User.class</code>,如果选择在get方法上面添加，那么全部都在get方法上面添加注解，不然有时可能获取不到数据，或者其他错误。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.AUTO)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"username"</span>,columnDefinition = <span class="string">"VARCHAR(50) NOT NULL COMMENT '用户名不为空!'"</span>,unique = <span class="keyword">true</span>)</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"username can't be null"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"password"</span>,columnDefinition = <span class="string">"VARCHAR(50) NOT NULL COMMENT '密码不为空!'"</span>)</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"password can't be null"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Temporal</span>(TemporalType.DATE)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"create_time"</span>, columnDefinition = <span class="string">"datetime DEFAULT NULL COMMENT '创建时间'"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date createTime; <span class="comment">//创建时间</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Temporal</span>(TemporalType.DATE)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"update_time"</span>, columnDefinition = <span class="string">"datetime DEFAULT NULL COMMENT '更新时间'"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;<span class="comment">//更新时间</span></span><br><span class="line"><span class="comment">// get/set方法   注：Lombok插件可以直接构建get、set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>实体注解解释(这里讲解的是常用的)</strong></li></ul><table><thead><tr><th>注解源</th><th>解释说明</th></tr></thead><tbody><tr><td>@Entity</td><td>JPA实体映射到数据库</td></tr><tr><td>@Table</td><td>表示表，<code>@Table(name = &quot;user&quot;)</code>表示该实体生成的表是<code>user</code><br><code>@Table</code>还有几个属性，如<code>catalog</code>：对应数据库的<code>catalog</code>，<code>schema</code>：对应数据库的<code>schema</code>，<code>UniqueConstraint</code>定义在<code>@Table</code>或<code>@SecondaryTable</code>元数据里，用来指定建表时需要建唯一约束的列等</td></tr><tr><td>@Id</td><td>表示主键Id</td></tr><tr><td>@GeneratedValue</td><td><code>@GeneratedValue(strategy = GenerationType.AUTO)</code>表示Id自增</td></tr><tr><td>@Column</td><td><code>name = &quot;username&quot;</code>表示表的字段名为<code>username</code>，<code>columnDefinition</code>表示字段创建的SQL语句说明，第一次创建时生效，<code>unique=true</code>表示该字段的值在表中是唯一的(如：用户名不能相同)</td></tr><tr><td>@NotBlank</td><td><code>@NotBlank(message = &quot;password can&#39;t be null&quot;)</code>解释说明</td></tr><tr><td>@Temporal</td><td><code>@Temporal(TemporalType.DATE)</code>表示时间的定义格式为：<code>yyyy-MM-dd 即：2018-09-01</code>，<code>TemporalType.TIME</code>表示为：<code>hh:mm:ss 即 10:12:11</code>，<code>TemporalType.TIMESTRAMP</code>表示为:<code>yyyy-mm-dd hh:mm:ss 即：2018-09-01 10:12:11</code></td></tr></tbody></table><ul><li><strong>说明</strong>：以上的实体注解解释完成了。当然了，在这里我们使用的JPA的注解只是很少的一部分，接下来的文章会详细说明相关注解的作用和使用。</li></ul><p>运行项目生成的表如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">create table user</span><br><span class="line">(</span><br><span class="line">  id    int   not null primary key,</span><br><span class="line">  create_time datetime    null  comment &apos;创建时间&apos;,</span><br><span class="line">  password    varchar(50) not null   comment &apos;密码不为空!&apos;,</span><br><span class="line">  update_time datetime    null    comment &apos;更新时间&apos;,</span><br><span class="line">  username    varchar(50) not null    comment &apos;用户名不为空!&apos;,</span><br><span class="line">  constraint UK_sb8bbouer5wak8vyiiy4pf2bx</span><br><span class="line">  unique (username)</span><br><span class="line">)</span><br><span class="line">  engine = MyISAM charset = utf8;</span><br></pre></td></tr></table></figure></p><p><strong>2.在<code>.controller</code>包下创建<code>UserController.class</code></strong><br>这里代码的就是测试增删改查，这里的注解之前的文章都解释过了，这里就不解释了，遇到最新的就解释。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过id查找user信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 参数id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回Json user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/info/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result&lt;User&gt; <span class="title">getUserDataById</span><span class="params">(@PathVariable Integer id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == id) <span class="keyword">throw</span> <span class="keyword">new</span> EirunyeException(ResultEnum.UNKNOWN_ERROR);<span class="comment">//这里定义自己的提示错误信息,最好每个都有定义这样比较明确错误!!!</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userService.getUserDataById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"/info/save"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result&lt;User&gt; <span class="title">saveUserData</span><span class="params">(@Valid User user)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == user) <span class="keyword">throw</span> <span class="keyword">new</span> EirunyeException(ResultEnum.UNKNOWN_ERROR);<span class="comment">//这里定义自己的提示错误信息,最好每个都有定义这样比较明确错误!!!</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userService.saveUserData(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新user信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回提示 更新失败或者成功</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"/info/update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result&lt;String&gt; <span class="title">updateUserInfo</span><span class="params">(@Valid User user)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == user) <span class="keyword">throw</span> <span class="keyword">new</span> EirunyeException(ResultEnum.UNKNOWN_ERROR);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userService.updateUserInfo(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过ID参数user信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 参数id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回提示 参数成功或者失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"info/delete/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result&lt;String&gt; <span class="title">deleteUserInfo</span><span class="params">(@PathVariable Integer id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == id) <span class="keyword">throw</span> <span class="keyword">new</span> EirunyeException(ResultEnum.UNKNOWN_ERROR);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userService.deleteUserInfo(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.在<code>.service</code>包下创建<code>UserService.class</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Json user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常抛出</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result&lt;User&gt; <span class="title">saveUserData</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        User user1 = userRepository.save(user);</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.getResult(ResultEnum.SUCCESS, user1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id来获取user信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 参数id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Json user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result&lt;User&gt; <span class="title">getUserDataById</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        User user = userRepository.findAllById(id);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == user) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EirunyeException(ResultEnum.USERNOTEXIST);<span class="comment">//用户不存在</span></span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> ResultUtil.getResult(ResultEnum.SUCCESS, user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新user信息 更新数据说明：</span></span><br><span class="line"><span class="comment">     * 1.如果通过save(S s)方法的话必须带主键Id，这样通过主键id就能更新数据了，</span></span><br><span class="line"><span class="comment">     * 如果不带参数id则，数据将会自增一条数据（变成插入数据了）</span></span><br><span class="line"><span class="comment">     * 2.自定义SQL语句更新数据（后面会讲到）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 参数user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> json String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result&lt;String&gt; <span class="title">updateUserInfo</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == user.getId()) <span class="keyword">return</span> ResultUtil.error(-<span class="number">1</span>, <span class="string">"Id不能为空!"</span>);</span><br><span class="line">        <span class="comment">//更新数据</span></span><br><span class="line">        User userUpdate = userRepository.save(user);</span><br><span class="line">        <span class="keyword">if</span> (userUpdate == <span class="keyword">null</span>) <span class="keyword">return</span> ResultUtil.error(-<span class="number">1</span>, <span class="string">"数据更新失败,请联系后台!"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 一般更新数据步骤：</span></span><br><span class="line">        <span class="comment">// 1.通过ID获取当前用户信息</span></span><br><span class="line">        <span class="comment">// 2.将所需更新的信息进行设置，如用户名、密码等，而创建时间不需要更新</span></span><br><span class="line">        <span class="comment">// 3.如果没有其他特殊字段直接save方法更新(注：这里我就简单直接save了，大家的项目应该是下面这样方式写)</span></span><br><span class="line">        <span class="comment">//User userInfo = userRepository.findAllById(user.getId());</span></span><br><span class="line">        <span class="comment">//userInfo.setId(user.getId());</span></span><br><span class="line">        <span class="comment">//userInfo.setUsername(user.getUsername());</span></span><br><span class="line">        <span class="comment">//userInfo.setPassword(user.getPassword());</span></span><br><span class="line">        <span class="comment">//userInfo.setUpdateTime(new Date());</span></span><br><span class="line">        <span class="comment">//userInfo.setCreateTime(new Date()); //这个不需要设置</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResultUtil.getResult(ResultEnum.SUCCESS, <span class="string">"更新数据成功!!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 参数id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> json String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result&lt;String&gt; <span class="title">deleteUserInfo</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        userRepository.deleteById(id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下面不需要也可以，直接返回return ResultUtil.getResult(ResultEnum.SUCCESS, "删除数据成功!!!");</span></span><br><span class="line">        User user = userRepository.findAllById(id);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == user) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EirunyeException(ResultEnum.SUCCESS);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> ResultUtil.error(-<span class="number">1</span>, <span class="string">"删除数据失败!!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.在<code>.repository</code>创建<code>UserRepository</code>接口去扩展<code>JpaRepository&lt;T,ID&gt;</code></strong></p><ul><li><strong>注：</strong><code>JpaRepository&lt;T,ID&gt;</code>一般<code>T</code>是要操作的实体，如本例的<code>User.class</code>,<code>ID</code>是该实体<code>ID</code>类型，如本例定义<code>id</code>为<code>Integer</code>，如果你自己定义<code>Long</code>这里就表示<code>Long</code>。在<code>UserRepository</code>接口这里需要注意的是命名规则查找find，删除delete等等</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 根据id获取当前user数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">findAllById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过用户名和密码来获取用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 参数用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 参数密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">findAllByUsernameAndPassword</span><span class="params">(String username, String password)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模糊查询 自定义查询语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query</span>(value = <span class="string">"select * from user u where u.username like %:username%"</span>,nativeQuery=<span class="keyword">true</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAllByUsername</span><span class="params">(@Param(<span class="string">"username"</span>)</span> String username)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>注：</strong> JPA的自定义语句都是<code>@Query(value=&quot;SQL语句&quot;)</code>，下面的方法还是要按照<code>JpaRepository</code>命名规则进行，后面的文章将会说明该内容。</li></ul><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="新建单元测试"><a href="#新建单元测试" class="headerlink" title="新建单元测试"></a>新建单元测试</h2><p>在<code>src\test\java\com\eirunye\spring_boot_jpa\</code>创建<code>UserTest.class</code>,这里只是简单的进行单元测试，之后文章会讲解到Spring Boot项目如何进行单元测试。<br>测试代码<a href="">UserTest.class</a>进行查看，这里只贴一些</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(ExceptionHandle.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserInfo</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Result&lt;User&gt; userDataById = userService.getUserDataById(<span class="number">1</span>);</span><br><span class="line">        logger.info(userDataById.getData().toString());</span><br><span class="line">        System.out.println(userDataById.getData().toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>   <span class="comment">//@Before是在这个测试类中点击每个@Test都会执行的注解，在`@Test`之前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUserInfo</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"Eirunye"</span>);</span><br><span class="line">        user.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> Date());<span class="comment">//这里只做测试用，一般都是后台处理时间</span></span><br><span class="line">        user.setUpdateTime(<span class="keyword">new</span> Date());<span class="comment">//这里只做测试用，一般都是后台处理时间</span></span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">        Result&lt;User&gt; userResult = userService.saveUserData(user);</span><br><span class="line">        System.out.println(userResult);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试验证</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3012005-1c3819e79d92f6c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="测试成功.png"></p><ul><li>测试id输入错误时，如：<code>userService.getUserDataById(0);</code></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3012005-93c5fe9857f5105a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="id输入错误异常.png"></p><ul><li>查看数据库</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3012005-52542b233017f778.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="查看数据库.png"></p><h2 id="IDEA请求数据测试"><a href="#IDEA请求数据测试" class="headerlink" title="IDEA请求数据测试"></a>IDEA请求数据测试</h2><p>这里只列举一个，大家进测试就好了。</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-052340583d4a039b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="idea请求数据.png"></p><h2 id="Postman请求数据测试"><a href="#Postman请求数据测试" class="headerlink" title="Postman请求数据测试"></a>Postman请求数据测试</h2><p>这里只列举一个，大家进测试就好了。</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-fa289ee37e9419af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="Postman请求数据.png"></p><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><ul><li><a href="https://github.com/eirunye/SpringBoot_database_connection" target="_blank" rel="noopener"><strong>本篇案例代码下载-码云</strong></a></li><li><a href="https://github.com/eirunye/Spring_Boot_JPA" target="_blank" rel="noopener"><strong>本篇案例代码下载-GitHub</strong></a></li><li><a href="https://github.com/eirunye/Eirunye_SpringBoot_Notes" target="_blank" rel="noopener"><strong>Spring Boot系列代码-码云</strong></a></li><li><a href="https://github.com/eirunye/Eirunye_SpringBoot_Notes" target="_blank" rel="noopener"><strong>Spring Boot系列代码-GitHub</strong></a></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>1.本篇文章主要讲解的是JPA与Spring Boot整合操作数据，只是简单的说明JPA的增删改查功能，接下来的文章会深入研究JPA的更多内容，如：JPA的多表操作如何使用、JPA分页操作等等。</p><p>2.JPA在项目中使用能使我们快速构建项目，不需要书写过多的SQL语句(相信这是大家都非常喜欢的)</p><p>3.前文开始的时候说了JPA一些特性。</p><p>4.Android平台上的GreenDao的使用方式和JPA是非常相似的</p><h1 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h1><p>如果大家想了解更多的Spring Boot相关博文请进入<br>我的<a href="https://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/Spring-Boot/"><strong>Spring Boot系列博客栈</strong></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;在Spring Boot项目开发中，我们操作数据库的时候一般会用到&lt;code&gt;JPA&lt;/code&gt;或者是&lt;code&gt;MyBatis&lt;/cod
      
    
    </summary>
    
      <category term="后台" scheme="http://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/"/>
    
      <category term="Spring Boot" scheme="http://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/Spring-Boot/"/>
    
      <category term="JPA" scheme="http://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/Spring-Boot/JPA/"/>
    
    
      <category term="Java" scheme="http://eirunye.github.io/tags/Java/"/>
    
      <category term="Spring Boot" scheme="http://eirunye.github.io/tags/Spring-Boot/"/>
    
      <category term="JPA" scheme="http://eirunye.github.io/tags/JPA/"/>
    
  </entry>
  
  <entry>
    <title>简单工厂模式</title>
    <link href="http://eirunye.github.io/2018/09/26/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://eirunye.github.io/2018/09/26/简单工厂模式/</id>
    <published>2018-09-26T03:15:11.000Z</published>
    <updated>2018-09-26T07:47:49.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>1.学习本篇文章，了解简单工厂设计模式的使用场景。<br>2.如何使用简单工厂模式。<br>3.简单工厂模式能解决什么问题？回到优缺点。</p><h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>现在有一家外卖小店需要从生产一份外卖开始进行考虑设计，当客户在网上点出不同味道的菜时，外卖小店就将按照不同的订单进行生产出菜品，然后进行打包、等待外卖小哥获取、赠送给客户等不同的几道工序，才算完成一单，但是后期由于生意很好，客户评价很高，有些地方的老板想加盟本店了，那么可能就会出现不同味道的菜单，还有一些本地的特色菜也会加上菜单，这时，客户就能点到更多的菜品了，为了达到某些商家快速而且合理的进行管理，你是怎么设计这个方案的呢？</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>一般情况下客户点餐的时候，都会查看平分高低，还有出货次数，如果人气好的，肯定要大量生产，而没有人点的，则可以考虑去除，所以我们通过以上的考虑，需要封装创建对象的代码，如将生产商品的对象封装起来，这样，我们出掉或者添加的时候，都只修改这部分的代码，那么是哪个生产商品呢？答案肯定是店家了，所以我们称这个生产商品的店家为“工厂”。<br>接下来我们进行分析以上代码该如何展现出来呢？我们将通过两种方式来进行编写。</p><h2 id="静态工厂模式"><a href="#静态工厂模式" class="headerlink" title="静态工厂模式"></a>静态工厂模式</h2><p>如何实现呢？我们先来看看本例的类图</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-407ecb6ca3265939.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="static_factory.png"></p><p>1.创建一个美食店，<code>MealStore.class</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author Eirunye</span></span><br><span class="line"><span class="comment"> * Created by on 2018/9/19.</span></span><br><span class="line"><span class="comment"> * Describe</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MealStore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Meal <span class="title">submitOrderMeal</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Meal meal;</span><br><span class="line">        <span class="comment">//利用静态工厂方法生成产品</span></span><br><span class="line">        <span class="comment">//重点(静态工厂实现代码)</span></span><br><span class="line">        meal = SimpleMealsFactory.createMeal(type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//以下方法是进行一些设计而已不是静态工厂方法的模块，是产品的一些操作而已，无关紧要的</span></span><br><span class="line">        <span class="comment">//店家准备中...</span></span><br><span class="line">        meal.mealPreparation();</span><br><span class="line">        <span class="comment">//打包</span></span><br><span class="line">        meal.bake();</span><br><span class="line">        <span class="comment">//获取</span></span><br><span class="line">        meal.getMeal();</span><br><span class="line">        <span class="comment">//配送</span></span><br><span class="line">        meal.send();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> meal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.创建一个静态工厂<code>SimpleMealsFactory.class</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author Eirunye</span></span><br><span class="line"><span class="comment"> * Created by on 2018/9/18.</span></span><br><span class="line"><span class="comment"> * Describe 建立一个简单静态工厂，该工厂生产不同的菜品（美食）</span></span><br><span class="line"><span class="comment"> * Tip: 提示：这是不是我们经常使用的Util类的编写方式?</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleMealsFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将生产产品（美食放在这里）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Meal <span class="title">createMeal</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Meal meal = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"crayfish"</span>.equals(type)) &#123;</span><br><span class="line">            meal = <span class="keyword">new</span> CrayfishMeal(); <span class="comment">//创建什么类型的产品(美食)让子类来操作</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"roastChicken"</span>.equals(type)) &#123;</span><br><span class="line">            meal = <span class="keyword">new</span> RoastChicken();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"A"</span>.equals(type)) &#123;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"B"</span>.equals(type)) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">return</span> meal; <span class="comment">//返回的是美食商品</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.创建产品美食抽象基类<code>Meal.class</code>,这样的话我们就可以交给子类来完成商品的生产。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author Eirunye</span></span><br><span class="line"><span class="comment"> * Created by on 2018/9/19.</span></span><br><span class="line"><span class="comment"> * Describe  定义一个抽象产品接口、这里也可以是抽象类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Meal</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> List mealInfo = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mealPreparation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"您的商品准备中..."</span>+<span class="keyword">this</span>.name);</span><br><span class="line">        System.out.println(<span class="string">"adding material..."</span>);</span><br><span class="line">        System.out.println(<span class="string">"adding  condiment..."</span>);</span><br><span class="line">        System.out.println(<span class="string">"adding mealInfo..."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, len = mealInfo.size(); i &lt; len; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">" ["</span> + mealInfo.get(i) + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"进行打包,只需1分钟就能打包完成!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMeal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"外卖小哥获取美食,外卖小哥可能需要花费1~20分钟来获取美食!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"配送给客户,配送需要大概5~40分钟送达!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.这里模拟具体产品，必须去实现<code>Meal</code>接口或者去派生该抽象类，如下小龙虾美食:<code>CrayfishMeal.class</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author Eirunye</span></span><br><span class="line"><span class="comment"> * Created by on 2018/9/19.</span></span><br><span class="line"><span class="comment"> * Describe 模拟产品(具体的美食--小龙虾)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrayfishMeal</span> <span class="keyword">extends</span> <span class="title">Meal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CrayfishMeal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setName(<span class="string">"香辣小龙虾....."</span>);</span><br><span class="line">        setMaterial(<span class="string">"添加5份小龙虾..."</span>);</span><br><span class="line">        setCondiment(<span class="string">"添加适量的调味品..."</span>);</span><br><span class="line">        mealInfo.add(<span class="string">"生成可口的小龙虾..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author Eirunye</span></span><br><span class="line"><span class="comment"> * Created by on 2018/9/19.</span></span><br><span class="line"><span class="comment"> * Describe</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个工厂类（即商品总店）</span></span><br><span class="line">        MealStore mealStore = <span class="keyword">new</span> MealStore();</span><br><span class="line">       <span class="comment">//这里我们要传递在静态工厂实例定义的字符串，否则将报空指针。</span></span><br><span class="line">        mealStore.submitOrderMeal(<span class="string">"roastChicken"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&quot;C:\Program Files\Java\jdk1.8.0_161\bin\java&quot;...</span><br><span class="line"></span><br><span class="line">您的商品准备中...烧鸡.....</span><br><span class="line">adding material...</span><br><span class="line">adding  condiment...</span><br><span class="line">adding mealInfo...</span><br><span class="line"> [生成可口的烧鸡...]</span><br><span class="line">进行打包,只需1分钟就能打包完成!</span><br><span class="line">外卖小哥获取美食,外卖小哥可能需要花费1~20分钟来获取美食!</span><br><span class="line">配送给客户,配送需要大概5~40分钟送达!</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><ul><li>注：<br>首先我们将生产商品创建放在了静态工厂中，静态工厂处理对象创建的细节，MealStore 美食店只关心如何得到美食商品就可以了，并进行打包、获取、派送等操作，而这样操作起来方便了产品的创建了。</li></ul><h2 id="简单工厂方法"><a href="#简单工厂方法" class="headerlink" title="简单工厂方法"></a>简单工厂方法</h2><p>我们通过静态工厂方法的方式实现了该功能，但是，是否有更好的封装方式呢？接下来我们来分析一下吧。本例类图关系</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-e55e00c647bcdb6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="funtion_factory.png"></p><p>1.现在我们将<code>MealStore.class</code>,修改为抽象类，并且将生产商品的方法也修改为抽象方法，我们这样做的目的，为什么呢？<br>我们这样做是让各个分店子类来实现商品的生产，扩展性更高，封装性更加完善，而该抽象类并不知道是哪个子类来完成商品的创建，达到了耦合。代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author Eirunye</span></span><br><span class="line"><span class="comment"> * Created by on 2018/9/18.</span></span><br><span class="line"><span class="comment"> * Describe 抽象工厂基类 美食总店</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MealStore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户下单</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 选择什么样的美食</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 美食 Meal</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Meal <span class="title">submitOrderMeal</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Meal meal;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里是我们将生产的美食</span></span><br><span class="line">        meal = createMeal(type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//店家准备中...</span></span><br><span class="line">        meal.mealPreparation();</span><br><span class="line">        <span class="comment">//打包</span></span><br><span class="line">        meal.bake();</span><br><span class="line">        <span class="comment">//获取</span></span><br><span class="line">        meal.getMeal();</span><br><span class="line">        <span class="comment">//配送</span></span><br><span class="line">        meal.send();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> meal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现抽象的工厂方法，让每个分店来完成此生产操作，</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Meal <span class="title">createMeal</span><span class="params">(String type)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.创建分店子类<code>JiangNanMealStore .class</code>派生自<code>MealStore.class</code>,进行生产商品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author Eirunye</span></span><br><span class="line"><span class="comment"> * Created by on 2018/9/18.</span></span><br><span class="line"><span class="comment"> * Describe  JiangNanMealStore分店,这里是需要增加修改的地方，可能有新的菜品的时候就在这里增加或者删除***</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JiangNanMealStore</span> <span class="keyword">extends</span> <span class="title">MealStore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Meal <span class="title">createMeal</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getMeal(type);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">//让子类来创建产品</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Meal <span class="title">getMeal</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"crayfish"</span>.equals(type)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CrayfishMeal();<span class="comment">//小龙虾</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"roastDuck"</span>.equals(type)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> RoastDuckMeal();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.创建商品抽象基类<code>Meal.class</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author Eirunye</span></span><br><span class="line"><span class="comment"> * Created by on 2018/9/18.</span></span><br><span class="line"><span class="comment"> * Describe 抽象产品父类 美食抽象类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Meal</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> List mealInfo = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mealPreparation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"您的商品准备中..."</span>+<span class="keyword">this</span>.name);</span><br><span class="line">        System.out.println(<span class="string">"adding material..."</span>);</span><br><span class="line">        System.out.println(<span class="string">"adding  condiment..."</span>);</span><br><span class="line">        System.out.println(<span class="string">"adding mealInfo..."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, len = mealInfo.size(); i &lt; len; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">" ["</span> + mealInfo.get(i) + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"进行打包,只需1分钟就能打包完成!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMeal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"外卖小哥获取美食,外卖小哥可能需要花费1~20分钟来获取美食!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"配送给客户,配送需要大概5~40分钟送达!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.定义具体子类<code>CrayfishMeal.class</code>产品，扩展自<code>Meal .class</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author Eirunye</span></span><br><span class="line"><span class="comment"> * Created by on 2018/9/18.</span></span><br><span class="line"><span class="comment"> * Describe 具体产品 小龙虾美食</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrayfishMeal</span> <span class="keyword">extends</span> <span class="title">Meal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CrayfishMeal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setName(<span class="string">"可口的小龙虾....."</span>);</span><br><span class="line">        setMaterial(<span class="string">"添加几份小龙虾+一些材料..."</span>);</span><br><span class="line">        setCondiment(<span class="string">"添加适量的调味品..."</span>);</span><br><span class="line">        mealInfo.add(<span class="string">"生成可口的小龙虾..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这里重写了父类的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"小龙虾分成5份打包!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author Eirunye</span></span><br><span class="line"><span class="comment"> * Created by on 2018/9/18.</span></span><br><span class="line"><span class="comment"> * Describe</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MealStore jiangNanMealStore = <span class="keyword">new</span> JiangNanMealStore();</span><br><span class="line">        jiangNanMealStore.submitOrderMeal(<span class="string">"crayfish"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"江南店完成一单"</span>);</span><br><span class="line">        System.out.println(<span class="string">"==============================\n"</span>);</span><br><span class="line"></span><br><span class="line">        MealStore guangDongMealStore = <span class="keyword">new</span> GuangDongMealStore();</span><br><span class="line">        guangDongMealStore.submitOrderMeal(<span class="string">"roastDuck"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"广东店完成一单"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&quot;C:\Program Files\Java\jdk1.8.0_161\bin\java&quot;...</span><br><span class="line">您的商品准备中...可口的小龙虾.....</span><br><span class="line">adding material...</span><br><span class="line">adding  condiment...</span><br><span class="line">adding mealInfo...</span><br><span class="line"> [生成可口的小龙虾...]</span><br><span class="line">小龙虾分成5粉打包!</span><br><span class="line">外卖小哥获取美食,外卖小哥可能需要花费1~20分钟来获取美食!</span><br><span class="line">配送给客户,配送需要大概5~40分钟送达!</span><br><span class="line">江南店完成一单</span><br><span class="line">==============================</span><br><span class="line"></span><br><span class="line">您的商品准备中...江南烤鸭.....</span><br><span class="line">adding material...</span><br><span class="line">adding  condiment...</span><br><span class="line">adding mealInfo...</span><br><span class="line"> [生成可口的烤鸭...]</span><br><span class="line">进行打包,只需1分钟就能打包完成!</span><br><span class="line">外卖小哥获取美食,外卖小哥可能需要花费1~20分钟来获取美食!</span><br><span class="line">配送给客户,配送需要大概5~40分钟送达!</span><br><span class="line">广东店完成一单</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p><a href="https://gitee.com/eirunye/Simple_Factory_Pattern" target="_blank" rel="noopener"><strong>本篇案例代码–码云</strong></a></p><p><a href="https://github.com/eirunye/Simple_Factory_Pattern" target="_blank" rel="noopener"><strong>本篇案例代码–GitHub</strong></a></p><p><a href="https://gitee.com/eirunye/Eirunye_DesignPatterns_Notes" target="_blank" rel="noopener"><strong>设计模式系列–码云</strong></a></p><p><a href="https://github.com/eirunye/Eirunye_DesignPatterns_Notes" target="_blank" rel="noopener"><strong>设计模式系列–GitHub</strong></a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我们通过简单的例子了解了简单工厂模式的开发案例。其实，简单工厂并不是我们常说的23中设计模式，他只是我们常用的一种编程习惯罢了，抽象工厂，才是我们常用的设计模式，接下来我们会讲解到抽象工厂模式。</p><p>静态工厂（简单工厂）和简单工厂方法有什么不同呢？</p><p>静态工厂将生产商品都定义在静态工厂的方法内，而简单工厂方法是交给子类来完成。但是静态工厂(简单工厂)不具备简单工厂方法所具有的扩展性强。<br>简单工厂方法的子类将会出现大量相同的代码，但是同时它也可以重写分类的方法，完成自己定义操作。</p><p>在Android中也常用到静态工厂或者是工厂方法等编程设计思路，如AnimationUtils类获取的各个子类的动画，BitmapFactory等</p><h1 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h1><p>大家可以到<a href="https://eirunye.github.io/"><strong>我的博客https://eirunye.github.io</strong></a>进行浏览相关文章，大家一起相互探讨技术。</p><p><a href="https://eirunye.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"><strong>设计模式系列</strong></a>大家可以了解相关文章。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;1.学习本篇文章，了解简单工厂设计模式的使用场景。&lt;br&gt;2.如何使用简单工厂模式。&lt;br&gt;3.简单工厂模式能解决什么问题？回到优缺点。&lt;/
      
    
    </summary>
    
      <category term="设计模式" scheme="http://eirunye.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="简单工厂方法" scheme="http://eirunye.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95/"/>
    
      <category term="静态工厂" scheme="http://eirunye.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95/%E9%9D%99%E6%80%81%E5%B7%A5%E5%8E%82/"/>
    
    
      <category term="Java" scheme="http://eirunye.github.io/tags/Java/"/>
    
      <category term="设计模式" scheme="http://eirunye.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="简单工厂方法" scheme="http://eirunye.github.io/tags/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95/"/>
    
      <category term="静态工厂" scheme="http://eirunye.github.io/tags/%E9%9D%99%E6%80%81%E5%B7%A5%E5%8E%82/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建GitHub博客—打造炫酷的NexT主题--高级(五)</title>
    <link href="http://eirunye.github.io/2018/09/23/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E6%89%93%E9%80%A0%E7%82%AB%E9%85%B7%E7%9A%84NexT%E4%B8%BB%E9%A2%98%E2%80%94%E9%AB%98%E7%BA%A7%E2%80%94%E4%BA%94/"/>
    <id>http://eirunye.github.io/2018/09/23/Hexo搭建GitHub博客—打造炫酷的NexT主题—高级—五/</id>
    <published>2018-09-23T08:10:26.000Z</published>
    <updated>2018-09-23T08:19:46.449Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>上篇<a href="https://eirunye.github.io/2018/09/15/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E6%89%93%E9%80%A0%E7%82%AB%E9%85%B7%E7%9A%84NexT%E4%B8%BB%E9%A2%98%E2%80%94%E9%AB%98%E7%BA%A7%E2%80%94%E5%9B%9B/#more">Hexo搭建GitHub博客—打造炫酷的NexT主题–高级(四)</a>讲解到Hexo NexT的相关配置如：设置字体、背景动画、添加打赏等等。大家还没设置可以去查看根据自己的需要。<br>接下来继续对NexT主题博客进行配置，本篇主要是还是添加一些第三方配置。请跟着脚步开启新的旅行吧。</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-370bd2ee37673ece.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/330" alt="Hexo.png"></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><blockquote><p>1.友情链接</p></blockquote><p>在<code>next/_config.yml</code>下搜索<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Blog rolls</span><br><span class="line">links_icon: link  #图标</span><br><span class="line">links_title: 友情链接    #表示Title</span><br><span class="line">links_layout: block</span><br><span class="line">#links_layout: inline</span><br><span class="line">links:     #打开</span><br><span class="line">  Eirunye: http://eirunye.github.io/   #所需添加的友情链接 Title是表示友情链接的博客名称或者随意你取，后面是链接，冒号后面记得空格</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-64ac9c3661c0f6cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="友情链接.png"></p><blockquote><p>2.添加阅读统计</p></blockquote><p>我们给每篇文章进行添加阅读统计，我是如何配置的呢？如下图查看</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-8eba59ee0c6258e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="添加阅读次数.png"></p><p>1.进入<a href="https://leancloud.cn" target="_blank" rel="noopener">leancloud</a></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-c57fe2e97bf0039c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="leancloud.png"></p><p>2.创建应用</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-b6d52e9a429b4427.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="创建应用.png"></p><p>3.进入设置页面</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-5c40699d54128869.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="设置1.png"></p><p>4.应用key</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-3d0a0be6971a42b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="应用key.png"></p><p>将App ID、App Key 配置到<code>next/_config.yml</code>中<code>leancloud_visitors</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">leancloud_visitors:</span><br><span class="line">  enable: true 设置为true 默认为false</span><br><span class="line">  app_id:  #你的App ID，注意冒号后面空格</span><br><span class="line">  app_key:  #你的App Key，注意冒号后面空格</span><br><span class="line">  Dependencies:  https://github.com/theme-next/hexo-leancloud-counter-security #设置依赖</span><br><span class="line">  security: true #如果您不关心lc计数器中的安全性并且只想直接使用它（没有hexo-leancloud-counter-security插件），请将`security`设置为`false`。</span><br><span class="line">  betterPerformance: true#更好的性能</span><br></pre></td></tr></table></figure><p>5.在<code>leancloud</code>存储的位置创建<code>Class</code>,必须命名为<code>Counter</code></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-ae81650e35568943.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="创建Counter.png"></p><p>6.查看后台统计数据</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-b93fa7c0b3e3958e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="leancloud后台统计阅读量.png"></p><ul><li>注：这里主要是创建时需要注意的命名<code>Counter</code>,还有在<code>next/config.yml</code>中的<code>leancloud_visitors</code>配置。</li></ul><blockquote><p>3.添加评论</p></blockquote><p>我们来进行一下文章添加评论系统吧。来设置一些常用的评论系统，我的博客选择的是<a href="https://leancloud.cn" target="_blank" rel="noopener">Valine</a></p><ul><li><strong>Valine</strong></li></ul><p>在<code>next/_config.yml</code>搜索<code>Valine</code>,进入<a href="https://leancloud.cn" target="_blank" rel="noopener">Valine</a> 官网，也是<a href="https://leancloud.cn" target="_blank" rel="noopener">leancloud</a>官网，进入<code>leancloud</code> 控制台,没有账号密码就进行设置。</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-0e920d2ff7e62b7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="Valine.png"></p><p>1.创建应用</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-b6d52e9a429b4427.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="创建应用.png"></p><p>2.进入设置页面</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-5c40699d54128869.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="设置1.png"></p><p>3.应用key</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-3d0a0be6971a42b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="应用key.png"></p><p>4.在<code>next/_config.yml</code>进行一下配置，大家也可根据自己来设置该评论设置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">valine:</span><br><span class="line">  enable: true # 设置为true，默认为false</span><br><span class="line">  appid:  # 将应用key的App ID设置在这里</span><br><span class="line">  appkey: # 将应用key的App Key设置在这里</span><br><span class="line">  notify: true# 邮箱通知 , https://github.com/xCss/Valine/wiki，默认为false</span><br><span class="line">  verify: true# 验证码 默认为false</span><br><span class="line">  placeholder: Just go go ^_^ # 初始化评论显示，根据自己修改，这里默认，</span><br><span class="line">  avatar: wavatar # 头像风格，默认为mm，可进入网址：https://valine.js.org/visitor.html查看头像设置，这里有许多头像风格，进行设置</span><br><span class="line">  guest_info: nick,mail,link # 自定义评论标题</span><br><span class="line">  pageSize: 10 # 分页大小，10页就自动分页</span><br><span class="line">  visitor: true # 是否允许游客评论 ，进入官网查看设置：https://valine.js.org/visitor.html</span><br></pre></td></tr></table></figure></p><p>5.显示结果</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-8a6a99fa1d005d36.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="显示结果.png"></p><p>这样就完成了<code>valine</code>评论的配置了，接下来就可以进行评论了，我们还可以在后台查看评论信息。</p><p>6.在后台查看评论数据</p><p>在<code>valine</code>后台，存储位置中的数据里面创建<code>Class</code>，名称必须为命名为<code>Comment</code></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-053fd5f8b3ce13cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="创建Comment.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-7323a50fe30382a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="评论系统后台管理数据.png"></p><ul><li><p>注：选择<code>valine</code>评论系统是因为支持国内网络，不需要连接外网（翻墙）就可以进行显示评论系统，而且很好管理，页面简单。</p></li><li><p><strong>来必力评论</strong></p></li></ul><p>接下来我们来进行一下来必力评论系统在<code>NexT</code>上配置。</p><p>1.进入<a href="https://livere.com/" target="_blank" rel="noopener">来必力官网</a></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-d3595c586dfc7038.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="来必力官网.png"></p><p>2.进入安装页面</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-21f1ec5c66c8e365.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="安装.png"></p><p>3.进入评论系统中的代码管理</p><p>将data-uid复制到<code>next/_config.yml</code>中的<code>livere_uid</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">livere_uid:  #you data-uid如图所示</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-aaaa8938bdfbb417.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="设置livere_uid.png"></p><p>4.显示结果</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-7bd1af2ccd435d68.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="来必力显示.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-cd36a42011c2e990.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="来必力评论.png"></p><ul><li>注：来必力是韩国打造的评论系统，所以可能在国内有时不稳定，可能有时需要翻墙才能进行评论，所以大家在选择的时候，需要注意。</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>1.本章主要讲解的是NexT添加友情链接，这样如需添加，就进行添加。</p><p>2.添加评论系统，让我们的文章都可以让读者进行评论，指点江山、探讨知识点，可能出现问题，学习进步。</p><p>3.这里进行了两种评论系统的配置，接下来，有空将别的也添加说明一下，一起玩玩别的评论系统看看怎么样，不过这两个也是够了的，推荐<code>Valine</code>,这样我们可以管理阅读统计量。</p><h1 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h1><p><a href="https://eirunye.github.io/categories/Hexo/"><strong>Hexo配置系列文章</strong></a></p><p><a href="https://eirunye.github.io/2018/09/01/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E5%88%9D%E7%BA%A7%E4%B8%80/#more"><strong>Hexo搭建GitHub博客–初级(一)</strong></a></p><p><a href="https://eirunye.github.io/2018/09/01/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E5%88%9D%E7%BA%A7%E2%80%94%E4%BA%8C/#more"><strong>Hexo搭建GitHub博客–初级(二)</strong></a></p><p><a href="https://eirunye.github.io/2018/09/02/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E6%89%93%E9%80%A0%E7%82%AB%E9%85%B7%E7%9A%84Next%E4%B8%BB%E9%A2%98%E2%80%94%E9%AB%98%E7%BA%A7%E2%80%94%E4%B8%89/#more"><strong>Hexo搭建GitHub博客—打造炫酷的NexT主题–高级(三)</strong></a></p><p><a href="https://eirunye.github.io/2018/09/15/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E6%89%93%E9%80%A0%E7%82%AB%E9%85%B7%E7%9A%84NexT%E4%B8%BB%E9%A2%98%E2%80%94%E9%AB%98%E7%BA%A7%E2%80%94%E5%9B%9B/#more"><strong>Hexo搭建GitHub博客—打造炫酷的NexT主题–高级(四)</strong></a></p><p><a href="https://eirunye.github.io/2018/09/23/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E6%89%93%E9%80%A0%E7%82%AB%E9%85%B7%E7%9A%84NexT%E4%B8%BB%E9%A2%98%E2%80%94%E9%AB%98%E7%BA%A7%E2%80%94%E4%BA%94/#more"><strong>Hexo搭建GitHub博客—打造炫酷的NexT主题–高级(五)</strong></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;上篇&lt;a href=&quot;https://eirunye.github.io/2018/09/15/Hexo%E6%90%AD%E5%BB%BA
      
    
    </summary>
    
      <category term="Hexo" scheme="http://eirunye.github.io/categories/Hexo/"/>
    
      <category term="NexT" scheme="http://eirunye.github.io/categories/Hexo/NexT/"/>
    
    
      <category term="Hexo" scheme="http://eirunye.github.io/tags/Hexo/"/>
    
      <category term="NexT" scheme="http://eirunye.github.io/tags/NexT/"/>
    
      <category term="GitHub" scheme="http://eirunye.github.io/tags/GitHub/"/>
    
      <category term="Node" scheme="http://eirunye.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 连接数据库(五)</title>
    <link href="http://eirunye.github.io/2018/09/19/Spring-Boot-%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93-%E4%BA%94/"/>
    <id>http://eirunye.github.io/2018/09/19/Spring-Boot-连接数据库-五/</id>
    <published>2018-09-19T05:54:20.000Z</published>
    <updated>2018-09-22T08:22:38.119Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本篇我们将学习如何在项目中连接数据库。<br>在一个成熟的项目是离不开数据库的，数据库很好的为我们的项目管理数据，让我们的开发变得简单，我们只需关注数据操作，而无需关注更多的数据库是如何操作的。<br>那么Spring Boot开发的项目是如何连接数据库呢？大家还记得在<a href="https://eirunye.github.io/2018/08/20/Spring-Boot-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AE%BE%E7%BD%AE-%E4%B8%89/#more"><strong>Spring Boot 配置文件设置(三)</strong></a>配置的时候说到数据库的连接。是的没错上面的例子完完全全都可以进行数据的连接。本篇是以连接<a href="https://www.mysql.com/" target="_blank" rel="noopener">MySQL</a>为例，进行连接数据操作。</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-06639c85d05db900.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="Spring Boot.png"></p><p>#安装</p><p>在开发之前，我们一定要选择合适的数据库，例如：<a href="https://dev.mysql.com/" target="_blank" rel="noopener">MySQL</a>、<a href="https://www.oracle.com/downloads/index.html#database" target="_blank" rel="noopener">Oracle</a>、<a href="https://www.microsoft.com/en-us/sql-server/sql-server-downloads" target="_blank" rel="noopener">SQL Server</a>、<a href="http://www.sqlite.org/download.html" target="_blank" rel="noopener">SQLite</a>、<a href="https://www.mongodb.com/download-center#community" target="_blank" rel="noopener">MongoDB</a>等数据库，本篇将对MySQL进行操作，其他数据库类型，请查看文档，后期可能增加。</p><p>1.下载<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">MySQL</a>进行安装</p><p>2.配置MySQL环境变量</p><p>3.打开CMD，进行验证MySQL是否安装成功</p><p>查看版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -v</span><br></pre></td></tr></table></figure><p>进入MySQL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p;</span><br></pre></td></tr></table></figure><ul><li>注意: mysql刚刚安装完成时，账户为:root,密码没有，所以直接回车就行<br>  然后可以设置一下密码，或者不设置也无所谓，修改密码如下:<br>  用SET PASSWORD命令：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">mysql&gt; SET PASSWORD FOR &apos;root&apos;@&apos;localhost&apos; = PASSWORD(&apos;newpass&apos;);</span><br></pre></td></tr></table></figure><p>或者用mysqladmin，如果无法设置的时候，就用管理者进入设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root password &quot;newpass&quot;</span><br></pre></td></tr></table></figure><p>如果root已经设置过密码，采用如下方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root password oldpass &quot;newpass&quot;</span><br></pre></td></tr></table></figure><p>创建一个数据库:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE 数据库名;</span><br><span class="line">CREATE DATABASE eirunye_springboot_notes;</span><br></pre></td></tr></table></figure><p>查看创建的数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW DATABASES;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3012005-20cf7bd301157c33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="show database.png"></p><h1 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h1><p><strong>1.在项目根目录下打开<code>pom.xml</code>文件添加 <code>MySql Maven</code> 依赖</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">                &lt;!--jpa依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.0.1.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">               &lt;!--MySQL配置依赖 版本看自己的需求--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;8.0.11&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p><strong>2.在<code>application.properties</code>或者在<code>application.yml</code>文件进行配置</strong>，本例以<code>application.yml</code>为例</p><ul><li>在<code>application.yml</code>添加一下代码。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">      driver-class-name: com.mysql.cj.jdbc.Driver  # MySql jdbc Driver</span><br><span class="line">      # 连接数据库</span><br><span class="line">      # eirunye_springboot_notes表示的是你创建的数据库;</span><br><span class="line">      # useSSL:是否使用SSL证书验证;</span><br><span class="line">      # characterEncoding:编码格式;</span><br><span class="line">      # useJDBCCompliantTimezoneShift:是否使用符合JDBC的时区转换;</span><br><span class="line">      # useLegacyDatetimeCode:是否使用旧版日期时间码;</span><br><span class="line">      # serverTimezone:选择服务器时间方式;</span><br><span class="line">      url: jdbc:mysql://127.0.0.1:3306/eirunye_springboot_notes?useSSL=false&amp;requireSSL=false&amp;characterEncoding=UTF-8&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC</span><br><span class="line">      username: root   #本地设置数据库账号</span><br><span class="line">      password: 123456 #密码</span><br></pre></td></tr></table></figure><ul><li>在<code>application.properties</code>添加一下代码。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line"># 连接数据库</span><br><span class="line"># demo表示的是你创建的数据库;</span><br><span class="line"># useSSL:是否使用SSL证书验证;</span><br><span class="line"># characterEncoding:编码格式;</span><br><span class="line"># useJDBCCompliantTimezoneShift:是否使用符合JDBC的时区转换;</span><br><span class="line"># useLegacyDatetimeCode:是否使用旧版日期时间码;</span><br><span class="line"># serverTimezone:选择服务器时间方式;</span><br><span class="line">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/demo?useSSL=false&amp;requireSSL=false&amp;characterEncoding=UTF-8&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC</span><br><span class="line"># 数据库用户名</span><br><span class="line">spring.datasource.username=root</span><br><span class="line"># 数据库密码</span><br><span class="line">spring.datasource.password=123456</span><br><span class="line">spring.jpa.hibernate.ddl-auto=update</span><br><span class="line"># 是否启用SQL语句的日志记录</span><br><span class="line">spring.jpa.show-sql=true</span><br><span class="line">server.port=8081</span><br></pre></td></tr></table></figure><p><strong>3.测试</strong></p><p>运行项目若无报错则说明配置已经成功了，接下来就是进行项目编写了。</p><h1 id="使用Intellij-IDEA操作数据库"><a href="#使用Intellij-IDEA操作数据库" class="headerlink" title="使用Intellij IDEA操作数据库"></a>使用Intellij IDEA操作数据库</h1><p>如果使用的是<a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">Intellij IDEA</a>进行开发项目的话，我们也可以这么查看我们的连接，还有相关数据表等等。</p><h2 id="如何使用Intellij-IDEA连接数据库？"><a href="#如何使用Intellij-IDEA连接数据库？" class="headerlink" title="如何使用Intellij IDEA连接数据库？"></a>如何使用Intellij IDEA连接数据库？</h2><p>1.打开Intellij IDEA的database数据库导航</p><ul><li>打开方式一</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3012005-78e6eb1c81a72ee1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="open databse 1.png"></p><ul><li>打开方式二</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3012005-2a604d6f3ff7556e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="open databse 2.png"></p><p>2.进行连接</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-cd88f011937ca37e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="open databse 3.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-98218a33d3fb8b7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="open databse 4.png"></p><p>3.连接成功</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-5356e90f44d55f4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="database success.png"></p><p>4.注意事项</p><p>如果无法连接，那说明账号密码出现问题，还有可能是修改了其他默认的地方。大家请注意。</p><p>5.创建表TABLE</p><ul><li>创建表</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3012005-9a160dbe5d29c123.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="创建表.png"></p><ul><li>添加字段</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3012005-d61934ea2984d57c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="添加字段.png"></p><ul><li>插入数据</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3012005-45409e06e0fd45e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="插入数据.png"></p><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><ul><li><p><a href="https://github.com/eirunye/SpringBoot_database_connection" target="_blank" rel="noopener"><strong>本篇案例代码下载-码云</strong></a></p></li><li><p><a href="https://github.com/eirunye/SpringBoot_database_connection" target="_blank" rel="noopener"><strong>本篇案例代码下载-GitHub</strong></a></p></li><li><p><a href="https://github.com/eirunye/Eirunye_SpringBoot_Notes" target="_blank" rel="noopener"><strong>Spring Boot系列代码-码云</strong></a></p></li><li><p><a href="https://github.com/eirunye/Eirunye_SpringBoot_Notes" target="_blank" rel="noopener"><strong>Spring Boot系列代码-GitHub</strong></a></p></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>1.一般情况下我在配置连接数据库的时候，推荐大家使用的是在设置文件里面配置在.yml或者是application.properties里面进行设置。</p><p>2.接下来的博文讲解如何操作数据库: <code>JPA、MyBatis</code></p><p>3.在使用Spring Boot开发项目中遇到了一些坑，在后期我会不断更新，与大家一起学习。</p><p>4.当然了IDEA还有许多操作数据库功能，大家就自己进行操作测试吧。</p><h1 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h1><p><a href="https://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/Spring-Boot/">Spring Boot 系列文章</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;本篇我们将学习如何在项目中连接数据库。&lt;br&gt;在一个成熟的项目是离不开数据库的，数据库很好的为我们的项目管理数据，让我们的开发变得简单，我们
      
    
    </summary>
    
      <category term="后台" scheme="http://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/"/>
    
      <category term="Spring Boot" scheme="http://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/Spring-Boot/"/>
    
    
      <category term="Java" scheme="http://eirunye.github.io/tags/Java/"/>
    
      <category term="Spring Boot" scheme="http://eirunye.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建GitHub博客—打造炫酷的NexT主题--高级(四)</title>
    <link href="http://eirunye.github.io/2018/09/15/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E6%89%93%E9%80%A0%E7%82%AB%E9%85%B7%E7%9A%84NexT%E4%B8%BB%E9%A2%98%E2%80%94%E9%AB%98%E7%BA%A7%E2%80%94%E5%9B%9B/"/>
    <id>http://eirunye.github.io/2018/09/15/Hexo搭建GitHub博客—打造炫酷的NexT主题—高级—四/</id>
    <published>2018-09-15T13:12:51.000Z</published>
    <updated>2018-09-23T08:11:54.010Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>上篇<a href="https://eirunye.github.io/2018/09/02/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E6%89%93%E9%80%A0%E7%82%AB%E9%85%B7%E7%9A%84Next%E4%B8%BB%E9%A2%98%E2%80%94%E9%AB%98%E7%BA%A7%E2%80%94%E4%B8%89/#more">Hexo搭建GitHub博客—打造炫酷的NexT主题–高级(三)</a>主要是对NexT整体布局的配置，达到完美喜欢的布局格式。<br>接下来继续对NexT主题博客进行配置，本篇主要是添加一些常用的第三方访问或者服务。请跟着脚步开启新的旅行吧。</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-370bd2ee37673ece.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/330" alt="Hexo.png"></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><blockquote><p><strong>1.Math Equations Render Support</strong> 数学方程式渲染支持</p></blockquote><p>这里可能有时需要在文章中使用到时数学公式了，在这里设置一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">math:</span><br><span class="line">  enable: true  #默认为false</span><br><span class="line">  per_page: true</span><br><span class="line">  engine: mathjax   #两种方式  mathjax / katex</span><br><span class="line">  mathjax:</span><br><span class="line">    cdn: //cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML  #默认 这里大家根据自己需求</span><br><span class="line">  katex:</span><br><span class="line">    cdn: //cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css   #默认</span><br></pre></td></tr></table></figure><blockquote><p><strong>2.Han Support</strong> 支持汉字</p></blockquote><p>设置汉字支持，这里我没配置，选择默认了，如果大家想配置的话就按照以下步骤</p><p>1.打开<code>Git Bash Here</code>进入<code>themes/next</code>目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd theme/next</span><br></pre></td></tr></table></figure><p>2.获取该汉字支持<code>Git module</code>,执行命令以下命令获得</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/theme-next/theme-next-han source/lib/Han</span><br></pre></td></tr></table></figure><p>3.设置汉字支持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">han: true</span><br></pre></td></tr></table></figure><p>4.更新update</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd themes/next/source/lib/Han</span><br><span class="line">$ git pull</span><br></pre></td></tr></table></figure><ul><li>注: 通过该链接可以查看以上步骤 <a href="https://github.com/theme-next/theme-next-han" target="_blank" rel="noopener">https://github.com/theme-next/theme-next-han</a></li></ul><blockquote><p><strong>3.添加图标链接到GitHub</strong></p></blockquote><p>一般在右上角或者左上角，如下我的博客配置。</p><ul><li>配置右上角<code>Fork_me_on_GitHub</code>,按以下步骤进行</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3012005-e0bcdcd9f52a18f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="Fork_me_on_GitHub_left.png"></p><p>1.打开<a href="https://blog.github.com/2008-12-19-github-ribbons/" target="_blank" rel="noopener">Fork_me_on_GitHub</a>链接，里面有许多样式，选择自己喜欢的样式，将其复制下来。</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-92ff12abe2bce550.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="get_Fork_me_on_GitHub"></p><p>2.打开自己博客项目中的<code>themes/next/layout/_layout.swig</code>文件，搜索<code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code> 将复制的内容粘贴到<code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code>下面，如下：</p><ul><li>注：要修改<code>红色</code>框里面的连接为自己在<code>GitHub</code>上的连接。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3012005-dfe58d27c86dce97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="Fork_GitHub.png"></p><ul><li>配置右上角的<code>Fork_me_on_GitHub</code></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3012005-eb8357bd72c556f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="right_GitHub.png"></p><p>本例的方式和上面的方式一样的步骤，但是获取的连接不同了，本例的连接地址是<a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">GitHub Corners</a></p><blockquote><p><strong>4.将文章底部<code>#</code>标签修改带为带<code>图标</code>的形式</strong></p></blockquote><p>在博客项目中找到<code>/themes/next/layout/_macro/post.swig</code>，搜索 <code>rel=&quot;tag&quot;</code>，将 <code>#</code>号 换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-772d622b78371ef5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="图标设置.png"></p><ul><li>原先<code>#</code>号的样式</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3012005-9a047dfc26ea22d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="标签_1.png"></p><ul><li>修改为<code>图标</code>的样式</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3012005-56af68a00a97f73e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="标签_2.png"></p><blockquote><p><strong>5.font字体设置</strong></p></blockquote><p>在<code>themes/next/_config.yml</code>搜索<code>font</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">font:</span><br><span class="line">  enable: true #默认false 如果要进行字体修改那么设置为true</span><br><span class="line"></span><br><span class="line">  global:</span><br><span class="line">    external: true</span><br><span class="line">    family: Lato   #设置字体  下同</span><br><span class="line">    size:   #字体大小  下同</span><br><span class="line"></span><br><span class="line">  headings:</span><br><span class="line">    external: true</span><br><span class="line">    family:</span><br><span class="line">    size:</span><br><span class="line">  posts:</span><br><span class="line">    external: true</span><br><span class="line">    family:</span><br><span class="line">  logo:</span><br><span class="line">    external: true</span><br><span class="line">    family:</span><br><span class="line">    size:</span><br><span class="line">  codes:</span><br><span class="line">    external: true</span><br><span class="line">    family:</span><br><span class="line">    size:</span><br></pre></td></tr></table></figure><blockquote><p><strong>6.设置背景动画样式</strong></p></blockquote><p>NexT里面有几种动画背景样式<code>canvas_nest</code>、<code>three_waves</code>、<code>canvas_lines</code>、<code>canvas_sphere</code>等</p><ul><li><strong>canvas_nest如下图所示</strong></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3012005-c41d2d9a1aed94c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="背景动画.png"></p><p>按照以下步骤完成</p><p>1.打开<code>Git Bash Here</code>进入自己文件夹下/themes/next文件夹下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd /themes/next</span><br></pre></td></tr></table></figure><p>2.下载安装 <code>canvas_nest module</code> 执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest</span><br></pre></td></tr></table></figure><p>在 <code>/themes/next/source/lib</code>查看会看到<code>canvas_nest</code>文件夹</p><p>3.在<code>/themes/next/_config.yml</code>设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">canvas_nest: true</span><br></pre></td></tr></table></figure><ul><li>注：<a href="https://github.com/theme-next/theme-next-canvas-nest" target="_blank" rel="noopener">canvas_nest</a>连接</li><li><p>注：这里也可以查看设置步骤：<a href="https://www.jianshu.com/p/b9556119ee8a" target="_blank" rel="noopener">canvas_nest设置</a></p></li><li><p><strong>three_waves如图所示</strong></p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3012005-a1c367800b7d8524.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="three_waves.png"></p><p>打开<a href="https://github.com/theme-next/theme-next-three" target="_blank" rel="noopener">three_waves</a> 查看设置步骤，这里和<code>canvas_nest</code>步骤是一样的，这里就不写咯。<br>下载完成后，在<code>/themes/next/_config.yml</code>设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">three_waves: true</span><br><span class="line">#OR</span><br><span class="line">canvas_lines: true</span><br><span class="line">#OR</span><br><span class="line">canvas_sphere: true</span><br></pre></td></tr></table></figure><ul><li><strong>canvas_ribbon</strong>只适合 <code>scheme Pisces</code> 这里不测试了，大家可以进入<a href="https://github.com/theme-next/theme-next-canvas-ribbon" target="_blank" rel="noopener">canvas_ribbon</a>安装</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># busuanzi_value_site_uv  表示用户连续点击n篇文章，只记录1次访客数</span><br><span class="line"># busuanzi_value_site_pv  表示用户连续点击n篇文章，记录+n次访问量</span><br><span class="line"># 这里对应的是2上的id值</span><br></pre></td></tr></table></figure><blockquote><p><strong>8.给每篇文章添加类别和标签</strong></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/3012005-9a81a6b5b4eb91de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="添加标签.png"></p><p>在创建的文章都在<code>source/_post</code>目录下找到，每篇文章添加<code>tags</code>、<code>categories</code></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-3af1b50cf510e5a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="标签_tags.png"></p><blockquote><p><strong>9.添加进度条</strong></p></blockquote><ul><li>注：添加进度条的话在手机浏览的时候一般情况都有自带的进度条了，例如微信浏览、浏览器浏览等等，这样就出现重复的进度条了，这里看个人是否添加。但是在电脑浏览器浏览却是不错的。<br>本例设置的如下<code>pace-theme-center-atom</code>显示</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3012005-d8e82b6d82527d0b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="进度条_1.png"></p><p>按照以下步骤进行</p><ul><li>注：或者进入这里 <a href="https://github.com/theme-next/theme-next-pace" target="_blank" rel="noopener">Progress配置</a>查看如何配置</li></ul><p>1.打开<code>Git Bash Here</code>进入自己文件夹下<code>/themes/next</code>文件夹下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd /themes/next</span><br></pre></td></tr></table></figure></p><p>2.下载安装 <code>Progress module</code> 执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/theme-next/theme-next-pace source/lib/pace</span><br></pre></td></tr></table></figure></p><p>在 <code>/themes/next/source/lib</code>查看会看到<code>pace</code>文件夹<br>3.在<code>/themes/next/_config.yml</code>设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pace: true  #设置为true</span><br><span class="line"># Themes list:</span><br><span class="line">#pace-theme-big-counter</span><br><span class="line">#pace-theme-bounce</span><br><span class="line">#pace-theme-barber-shop</span><br><span class="line">#pace-theme-center-atom</span><br><span class="line">#pace-theme-center-circle</span><br><span class="line">#pace-theme-center-radar</span><br><span class="line">#pace-theme-center-simple</span><br><span class="line">#pace-theme-corner-indicator</span><br><span class="line">#pace-theme-fill-left</span><br><span class="line">#pace-theme-flash</span><br><span class="line">#pace-theme-loading-bar</span><br><span class="line">#pace-theme-mac-osx</span><br><span class="line">#pace-theme-minimal</span><br><span class="line"># For example</span><br><span class="line"># pace_theme: pace-theme-center-simple</span><br><span class="line">pace_theme: pace-theme-center-atom #这里任选其中一种</span><br></pre></td></tr></table></figure><ul><li>注大家在这里想用什么样式就自己测试。</li></ul><blockquote><p><strong>10.添加站内搜索</strong></p></blockquote><p>由于可能我需要快速查找相关文章，那么就需要添加站内搜索。</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-a58b6a0d2e6ecc05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="local_search.png"></p><p>按以下步骤进行</p><ul><li>注：或者进入<a href="https://github.com/theme-next/hexo-generator-searchdb" target="_blank" rel="noopener">NexT配置站内搜索文档</a>查看如何配置</li></ul><p>1.安装站内搜索插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$  npm install hexo-generator-searchdb --save</span><br><span class="line">或者</span><br><span class="line">$ cnpm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>2.在根目录下的<code>_config.yml</code>添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#表示站内搜索</span><br><span class="line">search:</span><br><span class="line">    path: search.xml</span><br><span class="line">    field: post</span><br><span class="line">    format: html</span><br><span class="line">    limit: 10000</span><br></pre></td></tr></table></figure><p>3.在<code>themes/next/_config.yml</code>文件中搜索<code>local_search</code>,进行设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true  #设置为true</span><br><span class="line">  trigger: auto  # auto /  manual，auto 自动搜索、manual：按回车[enter ]键手动搜索</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  unescape: true</span><br></pre></td></tr></table></figure><blockquote><p><strong>11.添加打赏功能</strong></p></blockquote><p>查看配置如下</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-7930dad3ee7bc3e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="打赏.png"></p><p>NexT主要提供三种打赏方式分别是微信、支付宝、比特币<br>在<code>themes/next</code>搜索<code>Reward</code>,三个都打开吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Reward</span><br><span class="line">reward_comment: Donate comment here  # 描述</span><br><span class="line">wechatpay: /images/wechatpay.jpg</span><br><span class="line">alipay: /images/alipay.jpg</span><br><span class="line">bitcoin: /images/bitcoin.png</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本篇我们进行了<code>NexT</code>主题的相关配置，这让我们的博客已经非常漂亮了，接下来我们主要进行添加<code>NexT</code>的评论系统、添加百度、Google检索等高级配置，希望各位读者在配置时遇到问题是，随时评论，我们一起解决相关问题。</p><h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p>大家也可以查看关于Hexo相关文章。</p><p><a href="https://eirunye.github.io/2018/09/01/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E5%88%9D%E7%BA%A7%E4%B8%80/#more"><strong>Hexo搭建GitHub博客–初级(一)</strong></a></p><p><a href="https://eirunye.github.io/2018/09/01/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E5%88%9D%E7%BA%A7%E2%80%94%E4%BA%8C/#more"><strong>Hexo搭建GitHub博客–初级(二)</strong></a></p><p><a href="https://eirunye.github.io/2018/09/02/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E6%89%93%E9%80%A0%E7%82%AB%E9%85%B7%E7%9A%84Next%E4%B8%BB%E9%A2%98%E2%80%94%E9%AB%98%E7%BA%A7%E2%80%94%E4%B8%89/#more"><strong>Hexo搭建GitHub博客—打造炫酷的NexT主题–高级(三)</strong></a></p><p><a href="https://eirunye.github.io/2018/09/15/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E6%89%93%E9%80%A0%E7%82%AB%E9%85%B7%E7%9A%84NexT%E4%B8%BB%E9%A2%98%E2%80%94%E9%AB%98%E7%BA%A7%E2%80%94%E5%9B%9B/#more"><strong>Hexo搭建GitHub博客—打造炫酷的NexT主题–高级(四)</strong></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;上篇&lt;a href=&quot;https://eirunye.github.io/2018/09/02/Hexo%E6%90%AD%E5%BB%BA
      
    
    </summary>
    
      <category term="Hexo" scheme="http://eirunye.github.io/categories/Hexo/"/>
    
      <category term="NexT" scheme="http://eirunye.github.io/categories/Hexo/NexT/"/>
    
    
      <category term="Hexo" scheme="http://eirunye.github.io/tags/Hexo/"/>
    
      <category term="NexT" scheme="http://eirunye.github.io/tags/NexT/"/>
    
      <category term="GitHub" scheme="http://eirunye.github.io/tags/GitHub/"/>
    
      <category term="Node" scheme="http://eirunye.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建GitHub博客—打造炫酷的NexT主题--高级(三)</title>
    <link href="http://eirunye.github.io/2018/09/02/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E6%89%93%E9%80%A0%E7%82%AB%E9%85%B7%E7%9A%84Next%E4%B8%BB%E9%A2%98%E2%80%94%E9%AB%98%E7%BA%A7%E2%80%94%E4%B8%89/"/>
    <id>http://eirunye.github.io/2018/09/02/Hexo搭建GitHub博客—打造炫酷的Next主题—高级—三/</id>
    <published>2018-09-01T17:22:43.000Z</published>
    <updated>2018-09-17T09:03:56.561Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>上面两篇文章让我们人识了<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo</a>是如何搭建GitHub博客、如何进行部署Hexo到GitHub上、如何进行一些常用的配置例如：<strong>Site</strong>、<strong>URL</strong>、<strong>Deployment</strong>、<strong>Date</strong>等配置、如何创建文章、创建文章时应该注意哪些事项等等。<br>在<a href="https://hexo.io/themes/" target="_blank" rel="noopener"><strong>Hexo主题官网</strong></a>中有许多主题，大家喜欢什么就进行部署和编辑就好了，大致的思路都是差不多的。<br>本篇让我们正在进入到高级篇学习，如何打造炫酷的<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener"><strong>NexT主题</strong></a>，让我们的博客更加美化。</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-370bd2ee37673ece.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="Hexo.png"></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>首先我们先进入到NexT主题官网，看看我们如何安装。这里就直接进行了，大家有空自己可以去看看，本篇主要说的是NexT 6.0版本以上，6.0版本以前就不说了。</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-57f853dd3402c444.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="NexT主题官网.png"></p><p>1.在项目根目录下，我的项目是<code>myblog</code>,打开Git Bash Here执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3012005-7126866142ce32d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="NexT下载安装.png"></p><p>下载安装完成</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-39c9ac9978d59b4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="NexT下载安装完成.png"></p><p>2.将Hexo的主题切换为NexT主题<br>在项目根目录下打开<code>_config.yml</code>文件将<code>theme</code>设置为<code>next</code>即：</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-667a6d087077b256.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="设置NexT.png"></p><p>3.运行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3012005-bca158b2e76c0926.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="NexT初始布局.png"></p><p>看起来还是有点难看啊，接下来进行配置吧。</p><h1 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h1><p>接下来就是进入我们博客核心部分了，配置属于自己的主题，让我们一起进入学习吧。</p><ul><li>注：这里可能不能全部去设置，大家有属于自己的，可以去研究，欢迎一起分享，可能在后期有遇到好的配置会在接下来的文章编写。</li><li>注：一般配置都在<strong>theme/next/-config.yml</strong>文件下配置</li></ul><blockquote><p>1.修改整体布局</p></blockquote><p>在<code>theme/next/-config.yml</code>找到<code>menu</code>看看自己博客所需的分类</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-1d82259bcb6cb1c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="NexT_menu.png"></p><p>显示如下</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-a4ea01dabc22c82c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="NexT-menu.png"></p><p>在<code>menu_settings</code>如果设置<code>icon: false</code>则无图标，<code>badges: true</code>则标签都会显示数字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">menu_settings:</span><br><span class="line">  icons: true</span><br><span class="line">  badges: true #默认是false</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3012005-5a23060e73e0e579.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="badges true.png"></p><ul><li>注：这里我们需要创建<code>about</code>页面，很简单，同理创建标签<code>tags</code>、归档<code>archives</code>页面一样的方式，<code>所需要创建的名称要与menu相对应</code>，举例说明如下。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page about   #看看menu上还有什么标签没创建就行创建</span><br><span class="line">$ hexo new page tags    #创建标签等</span><br></pre></td></tr></table></figure><p>创建完成之后我们在自己项目查找，如我的是<code>myblog/source/</code>目录下查看新创建好的相关标签页面，里面包含各自的<code>index.md</code>文件，大家可以自行编辑了。</p><blockquote><p>2.<strong>Schemes</strong>方案设置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse  #这是 Nex默认版本，黑白主调，大量留白</span><br><span class="line">scheme: Mist  #Muse 的紧凑版本，整洁有序的单栏外观</span><br><span class="line">#scheme: Pisces #双栏 Scheme，小家碧玉似的清新</span><br><span class="line">#scheme: Gemini  #双子座，也是双栏形式，和Pisces类似</span><br></pre></td></tr></table></figure><p>我们来一一测试一下吧，自己喜欢什么风格自行选择。</p><ul><li>scheme: Mist</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3012005-762952637a910da5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="scheme Mist.png"></p><ul><li>scheme: Pisces</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3012005-7d4d9b9f84d40ac7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="scheme Pisces.png"></p><ul><li>scheme: Gemini</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3012005-f6d9c1600c9d6b2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="scheme Gemini.png"></p><blockquote><p>3.<strong>social设置</strong></p></blockquote><p>使用方式: <code>Key: permalink || icon</code> <code>Key</code>表示标签显示，<code>permalink</code>表示URI连接，<code>icon</code>表示图标，自己添加所要显示的，</p><ul><li>注：<a href="https://fontawesome.com/icons?from=io" target="_blank" rel="noopener">图标库来源</a> [<a href="https://fontawesome.com/icons?from=io]" target="_blank" rel="noopener">https://fontawesome.com/icons?from=io]</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/eirunye || github</span><br><span class="line">  E-Mail: mailto:yrungen@gmail.com || envelope</span><br><span class="line">  简书: https://www.jianshu.com/u/447fdef5fb8f || heartbeat</span><br><span class="line">  Segmentfault: https://segmentfault.com/blog/iconye_vue || link</span><br><span class="line">  知乎: https://www.zhihu.com/people/yi-ke-id/activities || ioxhost</span><br><span class="line">  #Google: https://plus.google.com/yourname || google</span><br><span class="line">  #Twitter: https://twitter.com/yourname || twitter</span><br><span class="line">  #FB Page: https://www.facebook.com/yourname || facebook</span><br><span class="line">  #VK Group: https://vk.com/yourname || vk</span><br><span class="line">  StackOverflow: https://stackoverflow.com/ || stack-overflow</span><br><span class="line">  #YouTube: https://youtube.com/yourname || youtube</span><br><span class="line">  #Instagram: https://instagram.com/yourname || instagram</span><br><span class="line">  #Skype: skype:yourname?call|chat || skype</span><br><span class="line"></span><br><span class="line">social_icons:  #设置图标是否显示这里</span><br><span class="line">  enable: true #表示开启</span><br><span class="line">  icons_only: true 只显示图片</span><br><span class="line">  transition: true</span><br><span class="line">  exturl: false</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3012005-885af877f70ccf54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="social.png"></p><ul><li>注：在<code>scheme: Pisces</code>该效果不显示？</li></ul><blockquote><p>4.<strong>avatar</strong>头像设置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">avatar:</span><br><span class="line">  url: #/images/avatar.gif  #头像图片路径 图片放置在next/source/images</span><br><span class="line">  rounded: false  #是否显示圆形头像，true表示圆形，false默认</span><br><span class="line">  opacity: 0.7  #透明度0~1之间</span><br><span class="line">  rotated: false  #是否旋转 true表示旋转，false默认</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3012005-7aa5901266d99055.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="avatar-rounded-false.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-e68961a0ca02365d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="avatar-rounded-true.png"></p><blockquote><p>5.<strong>toc</strong>边栏中的目录设置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">toc:</span><br><span class="line">  enable: false #是否启动侧边栏</span><br><span class="line">  number: true  #自动将列表编号添加到toc。</span><br><span class="line">  wrap: false #true时是当标题宽度很长时，自动换到下一行</span><br></pre></td></tr></table></figure><blockquote><p>6.<strong>Creative Commons 4.0</strong>国际许可设置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span><br><span class="line">creative_commons: by-nc-sa</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3012005-f9a1f34c3df16f68.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="creative_commons.png"></p><blockquote><p>7.<strong>sidebar</strong>侧边栏配置这里选择默认吧。</p></blockquote><p>大家可以去看看里面的属性，有许多相对应的<code>scheme</code>而设置。</p><blockquote><p>8.<strong>save_scroll</strong>配置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save_scroll: false # 是否在Cookie中自动保存每个帖子/页面上的滚动位置。</span><br></pre></td></tr></table></figure><blockquote><p>9.<strong>excerpt_description</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">excerpt_description: true #是否自动摘录主页中的描述作为前导文本。</span><br></pre></td></tr></table></figure><blockquote><p>10.<strong>auto_excerpt</strong>配置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auto_excerpt:</span><br><span class="line">  enable: true  #是否自动摘录。不推荐。</span><br><span class="line">  length: 150  #这里是说文章开头第一个字到第150个字就显示&quot;阅读全文&quot;</span><br></pre></td></tr></table></figure><p>或者是在每篇文章需要显示”阅读全文”,在Markdown里面设置,但是<code>enable: false</code>表示不启动。两种方式选择一个。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3012005-acbfaf0f5b3b37e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="auto_excerpt.png"></p><blockquote><p>11.<strong>codeblock</strong>代码块配置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">codeblock:</span><br><span class="line">  copy_button:</span><br><span class="line">    enable: true  #是否添加复制按钮</span><br><span class="line">    show_result: true  #是否显示文本复制结果</span><br></pre></td></tr></table></figure><blockquote><p>12.<strong>wechat_subscriber</strong>微信配置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wechat_subscriber:</span><br><span class="line">  enabled: true #是否启动微信订阅</span><br><span class="line">  qcode: /path/to/your/wechatqcode ex. /uploads/wechat-qcode.jpg #设置图片</span><br><span class="line">  description: ex. subscribe to my blog by scanning my public wechat account #描述</span><br></pre></td></tr></table></figure><blockquote><p>13.<strong>Code Highlight theme</strong> 代码突出显示主题</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Available values: normal | night | night eighties | night blue | night bright</span><br><span class="line">highlight_theme: normal #设置喜欢的模式，默认：normal</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3012005-4ab4b79eeae2782b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="Code_Highlight_theme.png"></p><blockquote><p>14.<strong>footer</strong> 底部设置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">footer</span><br><span class="line">  icon:</span><br><span class="line">    name: user  #设置图标，想修改图标从https://fontawesome.com/v4.7.0/icons获取</span><br><span class="line">    animated: true  #是否要为图标设置动画，默认为false</span><br><span class="line">    color: &quot;#66CDAA&quot;  #图标颜色</span><br><span class="line">  copyright: ©2018 by Eirunye  #版权</span><br><span class="line">  powered:</span><br><span class="line">    enable: true  #是否显示 Hexo link</span><br><span class="line">    version: true  #是否显示Hexo链接后的Hexo版本信息（vX.X.X）</span><br><span class="line">  theme:</span><br><span class="line">    enable: true   #是否显示NexT Themelink</span><br><span class="line">    version: true  #是否显示NexT版本信息</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3012005-5756c4bea6d57afe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="hexo_footer.png"></p><blockquote><p>15.<strong>favicon</strong>标签页图标</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: /images/favicon-16x16-next.png   #小图标 默认的NexT</span><br><span class="line">  medium: /images/favicon-32x32-next.png  #中图标 默认NexT</span><br><span class="line">  apple_touch_icon: /images/apple-touch-icon-next.png #苹果触摸图标</span><br><span class="line">  safari_pinned_tab: /images/logo.svg   #safari固定标签</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3012005-9894e2608fc34c2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="favicon.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本篇主要讲解的是NexT主题常用的一些配置，接下来我们继续讲解<a href="https://eirunye.github.io/2018/09/15/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E6%89%93%E9%80%A0%E7%82%AB%E9%85%B7%E7%9A%84NexT%E4%B8%BB%E9%A2%98%E2%80%94%E9%AB%98%E7%BA%A7%E2%80%94%E5%9B%9B/#more"><strong>Hexo搭建GitHub博客—打造炫酷的NexT主题–高级(四)</strong></a>。</p><h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p>大家也可以查看关于Hexo相关文章。</p><p><a href="https://eirunye.github.io/2018/09/01/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E5%88%9D%E7%BA%A7%E4%B8%80/#more"><strong>Hexo搭建GitHub博客–初级(一)</strong></a></p><p><a href="https://eirunye.github.io/2018/09/01/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E5%88%9D%E7%BA%A7%E2%80%94%E4%BA%8C/#more"><strong>Hexo搭建GitHub博客–初级(二)</strong></a></p><p><a href="https://eirunye.github.io/2018/09/02/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E6%89%93%E9%80%A0%E7%82%AB%E9%85%B7%E7%9A%84Next%E4%B8%BB%E9%A2%98%E2%80%94%E9%AB%98%E7%BA%A7%E2%80%94%E4%B8%89/#more"><strong>Hexo搭建GitHub博客—打造炫酷的NexT主题–高级(三)</strong></a></p><p><a href="https://eirunye.github.io/2018/09/15/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E6%89%93%E9%80%A0%E7%82%AB%E9%85%B7%E7%9A%84NexT%E4%B8%BB%E9%A2%98%E2%80%94%E9%AB%98%E7%BA%A7%E2%80%94%E5%9B%9B/#more"><strong>Hexo搭建GitHub博客—打造炫酷的NexT主题–高级(四)</strong></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;上面两篇文章让我们人识了&lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot; target=&quot;_blank&quot; rel=
      
    
    </summary>
    
      <category term="Hexo" scheme="http://eirunye.github.io/categories/Hexo/"/>
    
      <category term="NexT" scheme="http://eirunye.github.io/categories/Hexo/NexT/"/>
    
    
      <category term="Hexo" scheme="http://eirunye.github.io/tags/Hexo/"/>
    
      <category term="NexT" scheme="http://eirunye.github.io/tags/NexT/"/>
    
      <category term="GitHub" scheme="http://eirunye.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建GitHub博客--初级(二)</title>
    <link href="http://eirunye.github.io/2018/09/01/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E5%88%9D%E7%BA%A7%E2%80%94%E4%BA%8C/"/>
    <id>http://eirunye.github.io/2018/09/01/Hexo搭建GitHub博客—初级—二/</id>
    <published>2018-09-01T15:38:22.000Z</published>
    <updated>2018-09-14T02:45:03.677Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>上篇我们主要讲的是如何通过<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>建站，并如何部署到GitHub上<a href="https://eirunye.github.io/2018/09/01/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E5%88%9D%E7%BA%A7%E4%B8%80/#more">Hexo搭建GitHub博客–初级(一)</a>。<br>大家不了解的话再看一下。本篇我们紧接上一篇继续进一步搭建<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>博客。<br>本篇主要讲解的是如何进行配置我们<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo</a>的博客，开启旅程吧。</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-341ef9931265c1c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="Hexo.png"></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>我们来进行一些我们常用的配置，在跟<strong>myblog</strong>目录下<code>_config.yml</code>。可以查看<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">Hexo官网配置模块</a></p><h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>title</code></td><td>网站标题</td></tr><tr><td><code>subtitle</code></td><td>网站副标题</td></tr><tr><td><code>description</code></td><td>网站描述</td></tr><tr><td><code>author</code></td><td>您的名字</td></tr><tr><td><code>language</code></td><td>网站使用的语言</td></tr><tr><td><code>timezone</code></td><td>网站时区。Hexo 默认使用您电脑的时区。<a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones" target="_blank" rel="noopener">时区列表</a>。比如说：<code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。</td></tr></tbody></table><p>例如：我的<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Eirunye Activity  #网站标题</span><br><span class="line">subtitle: Notes      #网站副标题</span><br><span class="line">description:  This is MyBlog  Notes      #详情</span><br><span class="line">keywords:</span><br><span class="line">author: Eirunye   #作者</span><br><span class="line">language: zh-CN # 语言</span><br><span class="line">timezone: UTC #时区</span><br></pre></td></tr></table></figure><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Directory</span><br><span class="line">source_dir: source</span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags #标签</span><br><span class="line">archive_dir: archives  #归档</span><br><span class="line">category_dir: categories #类别</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br></pre></td></tr></table></figure><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><p>查看以下列表，在<code>_config.yml</code>文件下查看相关属性。并进行修改为自己所想要的方式吧，这个就不一一进行分解了。</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>new_post_name</code></td><td>新文章的文件名称</td><td>:title.md</td></tr><tr><td><code>default_layout</code></td><td>预设布局</td><td>post</td></tr><tr><td><code>auto_spacing</code></td><td>在中文和英文之间加入空格</td><td>false</td></tr><tr><td><code>titlecase</code></td><td>把标题转换为 title case</td><td>false</td></tr><tr><td><code>external_link</code></td><td>在新标签中打开链接</td><td>true</td></tr><tr><td><code>filename_case</code></td><td>把文件名称转换为 (1) 小写或 (2) 大写</td><td>0</td></tr><tr><td><code>render_drafts</code></td><td>显示草稿</td><td>false</td></tr><tr><td><code>post_asset_folder</code></td><td>启动 <a href="https://hexo.io/zh-cn/docs/asset-folders" target="_blank" rel="noopener">Asset 文件夹</a></td><td>false</td></tr><tr><td><code>relative_link</code></td><td>把链接改为与根目录的相对位址</td><td>false</td></tr><tr><td><code>future</code></td><td>显示未来的文章</td><td>true</td></tr><tr><td><code>highlight</code></td><td>代码块的设置</td><td><code>自定义</code></td></tr></tbody></table><h2 id="分类-amp-标签"><a href="#分类-amp-标签" class="headerlink" title="分类&amp;标签"></a>分类&amp;标签</h2><p>这里默认就行，并不影响我们接下来的一些操作。</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>default_category</code></td><td>默认分类</td><td>uncategorized</td></tr><tr><td><code>category_map</code></td><td>分类别名</td><td></td></tr><tr><td><code>tag_map</code></td><td>标签别名</td><td><code>自定义</code></td></tr></tbody></table><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p>在分页中一般情况默认就好，10篇文章一页，不错的。</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>per_page</code></td><td>每页显示的文章量 (0 = 关闭分页功能)</td><td>10</td></tr><tr><td><code>pagination_dir</code></td><td>分页目录</td><td><code>page</code></td></tr></tbody></table><h1 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h1><h2 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>如：创建hello-world<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new hello-world</span><br></pre></td></tr></table></figure></p><p>layout:就是<code>hello-world</code>,如果不添加title，默认就是标题title:<code>hello-world</code>。<br>这里注意一下，如果创建带有中文的路径名称时，生成静态页面<code>hexo g</code>可能会报错。那么可以查看<a href="https://www.jianshu.com/p/9afb3257133b" target="_blank" rel="noopener">Hexo 部署的时候发生错误解决方案</a></p><h2 id="修改文章"><a href="#修改文章" class="headerlink" title="修改文章"></a>修改文章</h2><p>创建的文章在<code>source/_posts</code> 文件夹下。我试着对<code>hello-world.md</code>进行修改。<br>修改如下: 添加标签<code>tags</code>、类别<code>categories</code>等等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">date: 2018-09-01</span><br><span class="line">tags:</span><br><span class="line">- Hexo</span><br><span class="line">categories:</span><br><span class="line">- Hexo</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="编写文章"><a href="#编写文章" class="headerlink" title="编写文章"></a>编写文章</h2><p>在这里写文章，和平时一样完全支持<a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>语法，加油吧。</p><h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a><a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题</a></h1><p>这是我们重点需要修改的东西，为了能达到自己喜欢的布局结构，你需要在这里进行各种配置哦，对博客的美化，还有修改成为自己独特风格的博客。<br><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>提供给我们许多模板主题，请查看<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo主题官网</a>下载自己喜欢的主题，接下来我会重点的讲解我所配置的主题。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>学习本篇文章我们知道了如何进行配置博客一些常用的功能，如何进行分类，如何创建文章。<br>接下来让我们进入到下一个阶段，主要是如何打造属于自己的博客风格，请进入下一站吧。<br><a href="https://eirunye.github.io/2018/09/02/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E6%89%93%E9%80%A0%E7%82%AB%E9%85%B7%E7%9A%84Next%E4%B8%BB%E9%A2%98%E2%80%94%E9%AB%98%E7%BA%A7%E2%80%94%E4%B8%89/#more"><strong>Hexo搭建GitHub博客—打造炫酷的NexT主题–高级(三)</strong></a>。</p><h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p>大家可以查看关于<a href="https://eirunye.github.io/categories/Hexo/">Hexo</a>相关的文章。</p><p><a href="https://eirunye.github.io/2018/09/01/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E5%88%9D%E7%BA%A7%E4%B8%80/#more"><strong>Hexo搭建GitHub博客–初级(一)</strong></a></p><p><a href="https://eirunye.github.io/2018/09/01/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E5%88%9D%E7%BA%A7%E2%80%94%E4%BA%8C/#more"><strong>Hexo搭建GitHub博客–初级(二)</strong></a></p><p><a href="https://eirunye.github.io/2018/09/02/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E6%89%93%E9%80%A0%E7%82%AB%E9%85%B7%E7%9A%84Next%E4%B8%BB%E9%A2%98%E2%80%94%E9%AB%98%E7%BA%A7%E2%80%94%E4%B8%89/#more"><strong>Hexo搭建GitHub博客—打造炫酷的NexT主题–高级(三)</strong></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;上篇我们主要讲的是如何通过&lt;a href=&quot;https://hexo.io/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;noo
      
    
    </summary>
    
      <category term="Hexo" scheme="http://eirunye.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://eirunye.github.io/tags/Hexo/"/>
    
      <category term="NexT" scheme="http://eirunye.github.io/tags/NexT/"/>
    
      <category term="GitHub" scheme="http://eirunye.github.io/tags/GitHub/"/>
    
      <category term="Node" scheme="http://eirunye.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建GitHub博客--初级(一)</title>
    <link href="http://eirunye.github.io/2018/09/01/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E5%88%9D%E7%BA%A7%E4%B8%80/"/>
    <id>http://eirunye.github.io/2018/09/01/Hexo搭建GitHub博客—初级一/</id>
    <published>2018-09-01T15:17:30.000Z</published>
    <updated>2018-09-14T02:45:03.662Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>由于平时自己喜欢记录开发笔记，写一些博客，但是总想自己搭建属于自己的博客，在网上查阅了一下，发现<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>在GitHub或者是码云上搭建博客非常给力。<br>接下来让我们一起进入<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>搭建博客学习吧。</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-341ef9931265c1c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="Hexo.png"></p><h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a></h1><h2 id="什么是Hexo？"><a href="#什么是Hexo？" class="headerlink" title="什么是Hexo？"></a>什么是<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>？</h2><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>是一个快速、简洁且高效的博客框架。<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>使用<a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>当我们在遇到一个新东西的时候，进入其官网能帮助我们解决很多问题。关于什么是Hexo？还有一些关于Hexo的问题，大家进入<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官网</a>进行查看，这里我就不多说咯。</p><h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><p>我们在使用<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>之前需要准备一些东西，也就是需要安装一些我们必需的。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装所需"><a href="#安装所需" class="headerlink" title="安装所需"></a>安装所需</h3><p>安装<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：</p><ul><li><a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a></li><li><a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a></li><li>cnpm 如果<code>npm</code>运行出错就安装<code>cnpm</code>国内镜像</li></ul><p>如果没有安装那么就需要安装咯，大家可以看看<a href="https://www.jianshu.com/writer#/notebooks/10827440/notes/31436824" target="_blank" rel="noopener">Vue-cli项目创建</a>如何检查<a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a>、<a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a>和<code>cnpm</code>是否安装成功。</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a></h3><p>所有必备的应用程序安装完成后，即可使用<code>npm</code>或者<code>cnpm</code>来安装<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>。<br>打开Git Bash Here输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br><span class="line">或者</span><br><span class="line">$ cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>检查是否安装<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>完成,查询是否成功，显示<code>hexo-cli</code>版本就说明成功了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo -V</span><br></pre></td></tr></table></figure></p><h1 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h1><p>安装一切所需的程序后，我们可以开始建站了，就是创建我们的博客,大家也可以进入<a href="https://hexo.io/zh-cn/docs/setup" target="_blank" rel="noopener">Hexo建站官网</a>查看。<br>新建一个文件夹，来管理我们的博客项目，请执行下列命令，<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>将会在指定文件夹中新建所需要的文件。</p><h2 id="运行命令"><a href="#运行命令" class="headerlink" title="运行命令"></a>运行命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ cnpm install</span><br></pre></td></tr></table></figure><ul><li>注：folder是表示建站的博客项目名</li></ul><p>打开Git Bash Here，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init myblog</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3012005-b9f23bb1631d76e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="建站.png"></p><p>再运行以下命令：<code>myblog</code>是我创建博客站。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd myblog</span><br><span class="line">$ cnpm install</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-7b2253a00ae12e11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="建站完成.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-2f2bb0a75cb6cb46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="myblog目录.png"></p><h2 id="访问URL"><a href="#访问URL" class="headerlink" title="访问URL"></a>访问URL</h2><p>我们可以运行看看<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>创建的博客站是什么样的，运行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">或者</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3012005-c4566376a59b96c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="运行.png"></p><p>访问URL<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:4000/</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-52f623758fa37f13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="访问.png"></p><p>好了，到这里你已经学会了通过<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>创建博客了，接下来我们将会分析如何将我们的博客上传到我们的GitHub服务器上呢？<br>还有我们如何修改我们的博客让我们的博客漂亮而且修改不同的主题来美化我们的博客呢?<br>紧跟着脚步。</p><h1 id="上传到GitHub"><a href="#上传到GitHub" class="headerlink" title="上传到GitHub"></a>上传到<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a></h1><h2 id="GitHub创建repositories"><a href="#GitHub创建repositories" class="headerlink" title="GitHub创建repositories"></a><a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>创建repositories</h2><p> 进入<a href="https://github.com/" target="_blank" rel="noopener">GitHub官网</a>,或者在浏览器输入<code>https://github.com/</code>,如果还没有账号就创建一个账号就好了，这里不教大家怎么注册账号了。登录自己的账号，直接点击<code>new repositories</code>或者进入<code>You repositories</code>再<code>new repositories</code></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-9643d73b2a601e2a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="repository_1.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-884ba47d0d035bc7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="repository_2.png"></p><p>进入到创建<code>repositories</code>页面来,这里很重要，一定要注意哦！必须将新建的<code>repository</code>的名字为: <strong><code>You account name</code></strong>.github.io。其他默认就好了</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-fa33b440fd84624c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="repository_3.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-5863e3f089bc239a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="repository_4.png"></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>GitHub的Repository创建好后。我们在回到本地的<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>的<code>Myblog</code>项目中，我们用代码编辑器工具打开，我这里用的是<a href="https://www.jetbrains.com/webstorm/" target="_blank" rel="noopener">Webstorm</a>,找到在项目的根目录下<strong>_config.yml</strong>找到 <strong>deploy</strong>标签</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-1e380b97ef75ea93.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="_config.yml.png"></p><p>在该文件下面添加</p><ul><li>注：<code>repository: https://github.com/eirunye/eirunye.github.io.git</code> 是自己刚刚创建You account name.github.io 的repository，在<code>Clone with HTTPS</code>里面，复制粘贴就好咯。冒号后面记得空格哦。<code>branch</code> 后面是<code>master</code>就好了。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/eirunye/eirunye.github.io.git #复制过来</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3012005-16f89dd25c96aeee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="_config.yml_0.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-3a90ca707717cc04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="_config.yml_repository.png"></p><p>在<code>_config.yml</code>找到<code>url</code>进行修改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url: http://eirunye.github.io # eirunye是我的账号，修改为自己的账号</span><br></pre></td></tr></table></figure></p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>到这里就差不到了，接下来我们需要执行一些命令，将我们的博客部署到GitHub上了，惊喜将会到来了。<br>打开Git Bash Here进入<code>myblog</code>根目录下，首先我们需要安装一下<a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a>不然可能出现错误，无法部署成功，执行命令行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后在执行以下命令</p><ul><li><strong>注：每次提交时必须执行这三个命令</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></li></ul><p>或者简写方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></p><p>部署成功如下显示</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-3da4ba848a8df404.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="部署成功.png"></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>我们进行访问<code>https://eirunye.github.io/</code><br>和 <code>http://localhost:4000/</code>一样的页面说明是已经成功。</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-cb4c8c8a925effc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="部署成功1.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我们已经从如何使用<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>到部署上<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>上，没什么困难。需要我们对一些命令行的操作，还有一些需要我们必须注意的，一定要小心，不然就出错了。<br>当然了，我们还未对<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>进行一些我们对于博客的美化，还有修改成为自己独特风格的博客。希望我们继续加油吧。接下来的我们将在下一章讲到哦，请查看<a href="https://www.jianshu.com/writer#/notebooks/10827440/notes/33161742/preview" target="_blank" rel="noopener"><strong>Hexo搭建GitHub博客–初级(二)</strong></a>。</p><h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p>大家也可以查看关于<a href="https://eirunye.github.io/categories/Hexo/">Hexo</a>相关文章。</p><p><a href="https://eirunye.github.io/2018/09/01/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E5%88%9D%E7%BA%A7%E4%B8%80/#more"><strong>Hexo搭建GitHub博客–初级(一)</strong></a></p><p><a href="https://eirunye.github.io/2018/09/01/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E5%88%9D%E7%BA%A7%E2%80%94%E4%BA%8C/#more"><strong>Hexo搭建GitHub博客–初级(二)</strong></a></p><p><a href="https://eirunye.github.io/2018/09/02/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E6%89%93%E9%80%A0%E7%82%AB%E9%85%B7%E7%9A%84Next%E4%B8%BB%E9%A2%98%E2%80%94%E9%AB%98%E7%BA%A7%E2%80%94%E4%B8%89/#more"><strong>Hexo搭建GitHub博客—打造炫酷的NexT主题–高级(三)</strong></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;由于平时自己喜欢记录开发笔记，写一些博客，但是总想自己搭建属于自己的博客，在网上查阅了一下，发现&lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="Hexo" scheme="http://eirunye.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://eirunye.github.io/tags/Hexo/"/>
    
      <category term="NexT" scheme="http://eirunye.github.io/tags/NexT/"/>
    
      <category term="GitHub" scheme="http://eirunye.github.io/tags/GitHub/"/>
    
      <category term="Node" scheme="http://eirunye.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>策略模式</title>
    <link href="http://eirunye.github.io/2018/09/01/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://eirunye.github.io/2018/09/01/策略模式/</id>
    <published>2018-08-31T17:24:32.000Z</published>
    <updated>2018-09-26T07:47:48.919Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>1.学习本篇博文，我们知道在什么场景下使用策略模式。<br>2.策略模式的优缺点。<br>3.策略模式的思想。</p><h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p> 某公司需要每个周五每名员工都要提交周报，在该公司可以提交周报的行为或者“算法”有：邮箱提交、SVN、Git后两种一般是开发部门使用的(刚开始还没有Git提交方式)。<br> 那么在该场景中我们是如何设计业务逻辑呢？</p><p> 你可能这么想，我用继承的方式多好，在一个超类中都定义有邮箱提交，SVN提交，然后具体角色去继承，然后分别实现这些方法，在进行调用。<br> 但是你是不是忽略了一个问题，一个人事部门的前台小姐姐并不会SVN提交方式，你确实给她也拥有这样的方式了，这不是明显的设计漏洞吗？<br> 而且当你使用这样的方式的时候，如果开发部门经理，又提出新的想法添加了Git提交方式，那么你是不是需要修改了很多代码了呢？牵一发而动全身啊<br> 子类的代码重复到你崩溃了，而且很多部门使用的提交方式不同，我们并不需要知道其他部门的提交方式等等。<br> 所以继承很难解决我们现在的问题了。</p><p> 那么我们应该怎么设计呢？<br> 答案就是下文</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="什么是策略模式？"><a href="#什么是策略模式？" class="headerlink" title="什么是策略模式？"></a>什么是策略模式？</h2><p>  策略模式是：定义了算法族，分别封装起来，让其相互替换，相互独立，为达到算法动态修改的角色提供了独立。</p><h2 id="为什么需要策略模式？"><a href="#为什么需要策略模式？" class="headerlink" title="为什么需要策略模式？"></a>为什么需要策略模式？</h2><p> 1.从定义可以看出策略模式是定义了行为“算法”族，将其封装起来，给用户使用的，如果算法改变，那么只需添加或者修改算法方式便能解决问题了，而无需修改其他原有的行为“算法”，因为他们是相互独立的。<br> 2.对客户隐藏具体行为“算法”的实现细节，彼此之间相互独立。<br> 3.我们的场景需要完全符合策略模式，封装了不同的提交行为“算法”。</p><h2 id="进入代码分析"><a href="#进入代码分析" class="headerlink" title="进入代码分析"></a>进入代码分析</h2><blockquote><p>我们先来看一下这个UML类图进行分析</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/3012005-b7dcbc207bffa21b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="stategy.png"></p><blockquote><p>具体实现步骤</p></blockquote><p>1.定义一个行为“算法”，该行为“算法”是一个抽象类或者是接口<br>2.各种独立的行为去实现该行为“算法”接口<br>3.定义一个角色，是一个抽象超类或者接口<br>4.超类角色里面有一个封装的行为或者是“算法”的属性<br>5.定义一个方法进行委托该行为或者“算法”<br>6.具体的角色继承超类角色，并实现抽象方法</p><blockquote><p>具体代码分析</p></blockquote><p>SubmissionBehavior 接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Author Eirunye</span><br><span class="line"> * Created by on 2018/8/31.</span><br><span class="line"> * Describe 定义了一个提交的行为称为一簇&quot;算法&quot;</span><br><span class="line"> * 这可以是一个抽象类或者是一个接口</span><br><span class="line"> */</span><br><span class="line">public interface SubmissionBehavior &#123;</span><br><span class="line"></span><br><span class="line">     void commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>MailCommitBehavior.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Author Eirunye</span><br><span class="line"> * Created by on 2018/8/31.</span><br><span class="line"> * Describe 邮箱提交行为</span><br><span class="line"> */</span><br><span class="line">public class MailCommitBehavior implements SubmissionBehavior&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void commit() &#123;</span><br><span class="line">        System.out.println(&quot;邮箱提交周报行为&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SVNCommitBehavior.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Author Eirunye</span><br><span class="line"> * Created by on 2018/8/31.</span><br><span class="line"> * Describe SVN 提交行为</span><br><span class="line"> */</span><br><span class="line">public class SVNCommitBehavior implements SubmissionBehavior&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void commit() &#123;</span><br><span class="line">        System.out.println(&quot;SVN提交行为&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Character.class 抽象类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Author Eirunye</span><br><span class="line"> * Created by on 2018/8/31.</span><br><span class="line"> * Describe 定义一个抽象超类角色</span><br><span class="line"> * 或者这里也可以是接口</span><br><span class="line"> */</span><br><span class="line">public abstract class Character &#123;</span><br><span class="line"></span><br><span class="line">    //一个角色有一个这样的行为</span><br><span class="line">    public SubmissionBehavior submissionBehavior;</span><br><span class="line"></span><br><span class="line">    public abstract void display();</span><br><span class="line"></span><br><span class="line">    //完成提交行为 委托</span><br><span class="line">    public void completeCommit()&#123;</span><br><span class="line">        submissionBehavior.commit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //动态设置行为</span><br><span class="line">    public void setSubmissionBehavior(SubmissionBehavior submissionBehavior) &#123;</span><br><span class="line">        this.submissionBehavior = submissionBehavior;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Coder.class 具体的角色<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Author Eirunye</span><br><span class="line"> * Created by on 2018/8/31.</span><br><span class="line"> * Describe 开发员</span><br><span class="line"> */</span><br><span class="line">public class Coder extends Character&#123;</span><br><span class="line"></span><br><span class="line">    public Coder() &#123;</span><br><span class="line">        submissionBehavior = new SVNCommitBehavior();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void display() &#123;</span><br><span class="line">        System.out.println(&quot;刚开始使用的周报提交方式是SVN&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>测试</p></blockquote><p>Test.class<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Author Eirunye</span><br><span class="line"> * Created by on 2018/8/31.</span><br><span class="line"> * Describe 测试</span><br><span class="line"> */</span><br><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //创建一个码农提交方式</span><br><span class="line">        Character character = new Coder();</span><br><span class="line">        character.completeCommit();</span><br><span class="line"></span><br><span class="line">        //创建一个前台小姐姐提交方式</span><br><span class="line">        Character character1 = new ReceptionSister();</span><br><span class="line">        character1.completeCommit();</span><br><span class="line"></span><br><span class="line">        //某天开发部们经理说了以后开发部要统一使用Git方式提交周报了，</span><br><span class="line">        //那么如下看看发生什么情况</span><br><span class="line">        Character character2 = new Coder();</span><br><span class="line">        character2.setSubmissionBehavior(new GitCommitBehavior());//动态设置提交方式</span><br><span class="line">        character2.completeCommit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>输出结果：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Java\jdk1.8.0_161\bin\...</span><br><span class="line">SVN提交行为</span><br><span class="line">邮箱提交周报行为</span><br><span class="line">新增的Git提交周报行为</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><strong><a href="https://github.com/eirunye/StrategyPattern_Design" target="_blank" rel="noopener">策略模式案例代码</a></strong></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我们学习了策略模式，在生活中是经常运用到的，本例只是一个场景。<br>我们在设计开发的时候一定要“多用组合，少用继承”。<br>针对接口变成，而不针对实现编程。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>1.策略模式提供了管理相关的算法族的办法。策略类的等级结构定义了一个算法或行为族。通过使用继承抽象超类可以把公共的代码转移到抽象超类父类里面，从而避免重复的代码。<br>2.通过实现接口的方式定义具体的行为“算法”，从而减少子类继承父类相互混淆的行为。<br>3.使用策略模式可以避免使用多重条件转移语句，动态的改变行为，而各个具体角色行为“算法”相互独立。</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>1.客户端必须知道所有的具体角色，并决定使用哪个算法族，这样在设计开始时是需要花费时间是封装“算法”族的，策略模式只适用于客户端知道所有的算法或行为的情况。<br>2.策略模式造成很多具体的角色，每个具体角色就得创建一个新的类，这样类无法相互联系，所以无法共享。</p><h1 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h1><p>大家可以到<a href="https://eirunye.github.io/"><strong>我的博客https://eirunye.github.io</strong></a>进行浏览相关文章，大家一起相互探讨技术。</p><p><a href="https://eirunye.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"><strong>设计模式系列</strong></a>大家可以了解相关文章。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;1.学习本篇博文，我们知道在什么场景下使用策略模式。&lt;br&gt;2.策略模式的优缺点。&lt;br&gt;3.策略模式的思想。&lt;/p&gt;
&lt;h1 id=&quot;场景
      
    
    </summary>
    
      <category term="设计模式" scheme="http://eirunye.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="策略模式" scheme="http://eirunye.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="http://eirunye.github.io/tags/Java/"/>
    
      <category term="设计模式" scheme="http://eirunye.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="策略模式" scheme="http://eirunye.github.io/tags/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>观察者模式</title>
    <link href="http://eirunye.github.io/2018/09/01/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://eirunye.github.io/2018/09/01/观察者模式/</id>
    <published>2018-08-31T17:24:02.000Z</published>
    <updated>2018-09-26T07:47:48.970Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>1.学习本篇博文，我们知道在什么场景下使用观察者模式。<br>2.观察者模式的优缺点。<br>3.观察者模式给我们在今后开发中什么思想。</p><h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>某家科技公司目前在开发一个项目，设计小组需要上报项目的进度给部门经理，主要有两个模块更新原有的业务模块进度和添加新业务的模块完成进度。<br>那么部门经理需要什么途径能最快的得到进度的信息呢？或者可能是项目总监也想参与，去获取到最新的进展情况呢？我们改如何去考虑这个业务呢？</p><p>很多时候我们就会想到继承去解决这一情况，毕竟OO编写思想时刻影响这一我们，但是如果某天项目经理出差了，他不想看项目进度了，那我们又改怎么办呢？</p><p>我们能不能就是设计一个业务，让能想知道该进度的人，不管什么时候，只要有开发者上报进度的时候就一下他就得到进度的信息，而他无需去关系这个过程。</p><p>你是否能想到合适的解决方案呢？</p><p>答案就在下文中，你准备好了吗？</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="什么是观察者模式？"><a href="#什么是观察者模式？" class="headerlink" title="什么是观察者模式？"></a>什么是观察者模式？</h2><p>观察者模式定义一系列对象之间的一对多关系，当一个对象改变、更新状态时，依赖它的都会收到通知改变或者更新。</p><h2 id="为什么需要观察者模式"><a href="#为什么需要观察者模式" class="headerlink" title="为什么需要观察者模式?"></a>为什么需要观察者模式?</h2><p>从定义中我们可以知道观察者模式当对象改变时，其他依赖的对象都会收到改变信息的状态。</p><p>从本例分析项目经理想知道进度情况，他只需要绑定进度，他就可以知道进度信息了，而无需关心如何操作，如果再增加一个想知道进度信息老板呢？也很容易，也让老板绑定进度信息数据就好了，不想知道的时候就解除绑定，就不在获取进度信息了。</p><p>所以在本案例场景中，观察者是我们这个场景非常合适的设计。</p><h1 id="如何实现观察者模式？"><a href="#如何实现观察者模式？" class="headerlink" title="如何实现观察者模式？"></a>如何实现观察者模式？</h1><h2 id="自定义观察者模式"><a href="#自定义观察者模式" class="headerlink" title="自定义观察者模式"></a>自定义观察者模式</h2><h3 id="实现如下"><a href="#实现如下" class="headerlink" title="实现如下"></a>实现如下</h3><blockquote><p>我们先来看一下这个UML类图进行分析</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/3012005-ee86c1da81dd578e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="observer.png"></p><blockquote><p>具体实现步骤</p></blockquote><p>1.构造一个主题Subject或者是一个被观察者Observeable，这是一个接口或者是抽象类</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> public interface Subject &#123;</span><br><span class="line">  //注册观察者</span><br><span class="line">  void registerObserver(Observer observe);</span><br><span class="line">  //解除绑定观察者</span><br><span class="line">  void unRegisterObserver(Observer observe);</span><br><span class="line">  //更新数据</span><br><span class="line">  void notifyObservers();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 2.构建一个被观察者实现该主题接口如本例的 DevelopmentProgressData.class，这里是进度信息数据<br>  在registerObserver(Observer o);//方法中将观察者添加到注册列表中<br>  在unRegisterObserve(Observer o);//删除观察者<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class DevelopmentProgressData implements Subject &#123;</span><br><span class="line"> @Override</span><br><span class="line">   public void registerObserver(Observer observer) &#123;</span><br><span class="line">       //将观察者添加到列表中</span><br><span class="line">       arrayObserve.add(observer);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public void unRegisterObserver(Observer observer) &#123;</span><br><span class="line">       int i = arrayObserve.indexOf(observer);</span><br><span class="line">       if (i &gt;= 0) &#123;</span><br><span class="line">           //将观察者从列表中解除</span><br><span class="line">           arrayObserve.remove(i);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   //通知所以观察者数据更新了</span><br><span class="line">   @Override</span><br><span class="line">   public void notifyObservers() &#123;</span><br><span class="line"></span><br><span class="line">       for (int i = 0; i &lt; arrayObserve.size(); i++) &#123;</span><br><span class="line">           Observer o = (Observer) arrayObserve.get(i);</span><br><span class="line">           o.update(completeProgress, updateProgress);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.构建一个观察者接口Observer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface Observer &#123;</span><br><span class="line">   //更新数据</span><br><span class="line">   void update(int completeProgress, int updateProgress);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.可构建一个展示数据的接口（可忽略）<br> 有展示数据的方法，观察者要实现这个方法 查看本例的 DisplaySchedule<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface DisplaySchedule &#123;</span><br><span class="line">    void display();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5.定义观察者(模拟该类就是产品经理观察者)，需实现接口Observes、DisplaySchedule(可忽略)，</p><p><1>、将主题Subject设置为观察者的属性，并将其作为观察者的构造函数如 ProductManagerObserver.class<br>调用  developmentProgressSubject.registerObserver(this);将观察者注册到观察列表中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class ProductManagerObserver implements Observer, DisplaySchedule &#123;</span><br><span class="line"></span><br><span class="line">    private int completeProgress;//完成进度</span><br><span class="line">    private int updateProgress;//更新进度</span><br><span class="line">    //将主题当成观察者的属性</span><br><span class="line">    private Subject developmentProgressSubject;</span><br><span class="line"></span><br><span class="line">    public ProductManagerObserver(Subject developmentProgressSubject) &#123;</span><br><span class="line">        this.developmentProgressSubject = developmentProgressSubject;</span><br><span class="line">        //注册该观察者</span><br><span class="line">        developmentProgressSubject.registerObserver(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void display() &#123;</span><br><span class="line">        System.out.println(&quot;产品经理管理者显示当前数据 完成进度为: &quot; + completeProgress + &quot;更新修改进度为:&quot; + updateProgress);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void update(int completeProgress, int updateProgress) &#123;</span><br><span class="line">        this.completeProgress = completeProgress;</span><br><span class="line">        this.updateProgress = updateProgress;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></1></p><blockquote><p>测试</p></blockquote><p>RunTest.class<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class RunTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        DevelopmentProgressData developmentProgressData = new DevelopmentProgressData();</span><br><span class="line">        ProductManagerObserver productManagerObserver = new ProductManagerObserver(developmentProgressData);</span><br><span class="line">        ProjectManagerObserver projectManagerObserver = new ProjectManagerObserver(developmentProgressData);</span><br><span class="line">        developmentProgressData.setCurrentData(34, 45);</span><br><span class="line">        //当项目经理出差了，不观察项目进度了就取消订阅了</span><br><span class="line">        developmentProgressData.unRegisterObserver(projectManagerObserver);</span><br><span class="line">        //当前只有产品经理获取到数据</span><br><span class="line">        developmentProgressData.setCurrentData(46, 90);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>输出结果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Java\jdk1.8.0_161\bin\...</span><br><span class="line">产品经理管理者显示当前数据 完成进度为: 34更新修改进度为:45</span><br><span class="line">项目管理真显示当前数据完成进度为: 34更新修改进度为:45</span><br><span class="line">产品经理管理者显示当前数据 完成进度为: 46更新修改进度为:90</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h2 id="根据java-util-observerable包下的Observerable-class实现观察者模式功能"><a href="#根据java-util-observerable包下的Observerable-class实现观察者模式功能" class="headerlink" title="根据java.util.observerable包下的Observerable.class实现观察者模式功能"></a>根据java.util.observerable包下的Observerable.class实现观察者模式功能</h2><h3 id="实现如下-1"><a href="#实现如下-1" class="headerlink" title="实现如下"></a>实现如下</h3><blockquote><p>具体实现步骤</p></blockquote><p> 1.首先观察者需要实现java.util.Observer,然后将其被观察者=&gt;java.util.Observaerable作为其观察者的构造函数</p><p>   <1>、通过observeable.addObserver(this)添加观察者<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> public class BossMngObserver implements Observer, DisplayIllustrate &#123;</span><br><span class="line"></span><br><span class="line">  private Observable observable;</span><br><span class="line">  private int valuableProductNum; //库存有贵重产品</span><br><span class="line">  private int normalProductNum;   //普通产品</span><br><span class="line"></span><br><span class="line">  public BossMngObserver(Observable observable) &#123;</span><br><span class="line">      this.observable = observable;</span><br><span class="line">      observable.addObserver(this);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public void disPlay() &#123;</span><br><span class="line">      System.out.println(&quot;总经理观察数据改变:贵重产品数量: &quot; + valuableProductNum + &quot;普通产品数量： &quot; + normalProductNum);</span><br><span class="line">  &#125;</span><br><span class="line"> //&lt;2&gt;、实现 Observer更新数据方法</span><br><span class="line"> //看本例的包下的observe的三个类</span><br><span class="line">  @Override</span><br><span class="line">  public void update(Observable o, Object arg) &#123;</span><br><span class="line">      if (o instanceof InventoryData) &#123;</span><br><span class="line">          InventoryData inventoryData = (InventoryData) o;</span><br><span class="line">          this.valuableProductNum = inventoryData.getValuableProductNum();</span><br><span class="line">          this.normalProductNum = inventoryData.getNormalProductNum();</span><br><span class="line">          disPlay();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></1></p><p> 2.被观察者需要继承java.util.Observerable,</p><p>   <1>、然后先调用setChanged()方法</1></p><p>   <2>、在进行调用notifyObserves()更新数据</2></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> public class InventoryData extends Observable &#123;</span><br><span class="line"></span><br><span class="line">   private int valuableProductNum; //库存有贵重产品</span><br><span class="line">   private int normalProductNum;   //普通产品</span><br><span class="line"></span><br><span class="line">   public void setCurrentData(int valuableProductNum, int normalProductNum) &#123;</span><br><span class="line">       this.valuableProductNum = valuableProductNum;</span><br><span class="line">       this.normalProductNum = normalProductNum;</span><br><span class="line">       statusChange();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   private void statusChange() &#123;</span><br><span class="line">   //先调用 setChanged();</span><br><span class="line">       setChanged();</span><br><span class="line">       notifyObservers();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试<br>3.Test.class<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        InventoryData inventoryData = new InventoryData();</span><br><span class="line"></span><br><span class="line">        ValuableInfoMngObserver io = new ValuableInfoMngObserver(inventoryData);</span><br><span class="line"></span><br><span class="line">        //io.deleteObserve();</span><br><span class="line">        inventoryData.setCurrentData(20, 30);</span><br><span class="line"></span><br><span class="line">        NormalInfoMngObserver no = new NormalInfoMngObserver(inventoryData);</span><br><span class="line"></span><br><span class="line">        //no.deleteObserver();</span><br><span class="line">        inventoryData.setCurrentData(15, 27);</span><br><span class="line"></span><br><span class="line">        BossMngObserver bossMngObserver = new BossMngObserver(inventoryData);</span><br><span class="line"></span><br><span class="line">        inventoryData.setCurrentData(10, 50);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><strong><a href="https://github.com/eirunye/Oberser_Design" target="_blank" rel="noopener">观察者模式案例代码</a></strong></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>观察者模式的让我们知道了在设计开发的时候一定要“多用组合，少用继承”。</p><p>我们设计开发是应该是针对接口变成，而不针对实现编程。</p><p>在java.util.*下的Observer和Observable可以实现观察者，但是Observable是一个类，这样我们是不违背了“多用组合少用继承”的OO编程思想，是的没错在java.util.Observable类违背了该规则。</p><h1 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h1><p>大家可以到<a href="https://eirunye.github.io/"><strong>我的博客https://eirunye.github.io</strong></a>进行浏览相关文章，大家一起相互探讨技术。</p><p><a href="https://eirunye.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"><strong>设计模式系列</strong></a>大家可以了解相关文章。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;1.学习本篇博文，我们知道在什么场景下使用观察者模式。&lt;br&gt;2.观察者模式的优缺点。&lt;br&gt;3.观察者模式给我们在今后开发中什么思想。&lt;/
      
    
    </summary>
    
      <category term="设计模式" scheme="http://eirunye.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="观察者模式" scheme="http://eirunye.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="http://eirunye.github.io/tags/Java/"/>
    
      <category term="设计模式" scheme="http://eirunye.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="观察者模式" scheme="http://eirunye.github.io/tags/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 项目如何搭建(四)</title>
    <link href="http://eirunye.github.io/2018/08/22/Spring-Boot-%E9%A1%B9%E7%9B%AE%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA-%E5%9B%9B/"/>
    <id>http://eirunye.github.io/2018/08/22/Spring-Boot-项目如何搭建-四/</id>
    <published>2018-08-22T14:13:20.000Z</published>
    <updated>2018-10-03T06:36:08.336Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="Spring-Boot如何搭建完整项目"><a href="#Spring-Boot如何搭建完整项目" class="headerlink" title="Spring Boot如何搭建完整项目"></a>Spring Boot如何搭建完整项目</h2><p>在项目开发中我们一般情况下提供给APP或者网站应用的接口一般的请求方式是<strong><em>GET、POST、PUT</em></strong>等等，那么接下来我们将通过一个简单的案例来进行分析，带领大家进入Spring Boot项目的开发，创建(层级分明，思路请析)、编码，主要是 <strong>搭建项目</strong> 等，如何搭建一个Spring Boot开发项目呢？。</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-06639c85d05db900.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/330" alt="Spring Boot.png"></p><h1 id="项目结构创建"><a href="#项目结构创建" class="headerlink" title="项目结构创建"></a>项目结构创建</h1><h2 id="项目目录如下-包层级分明"><a href="#项目目录如下-包层级分明" class="headerlink" title="项目目录如下,包层级分明"></a>项目目录如下,包层级分明</h2><p>一般如下图所示:</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-e971c11aed6ab6dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/400" alt="项目包级结构.png"></p><p>在<strong><em>src</em></strong>目录下的<strong><em>main/java</em></strong>里面的创建的包级目录,进行分析如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/----------------------------------</span><br><span class="line">|-- controller：主要是控制器，通过注解@RestController，Spring4之后新加的注解，原来返回json数据格式，通@RequestMapping，设置访问URI。</span><br><span class="line">|-- enums: 主要是封装返回码的提示。</span><br><span class="line">|-- exception: 主要是封装异常打印输出。</span><br><span class="line">|-- handle: 捕捉异常处理</span><br><span class="line">|-- model：实体类</span><br><span class="line">|-- repository：Jpa使用封装，假如使用MyBatis的会进行其封装，后期文章会说明到MyBatis</span><br><span class="line">|-- service：逻辑处理封装，返回数据给Controller类</span><br><span class="line">|-- utils：封装一些工具类</span><br><span class="line">|-- 其他：在开发中还有一些需要创建其他包，根据自己需求。</span><br><span class="line">\------------------------------------</span><br></pre></td></tr></table></figure><h2 id="主要代码分析"><a href="#主要代码分析" class="headerlink" title="主要代码分析"></a>主要代码分析</h2><p>这里主要是写一个简单的事例进行参考包层级之间的调用，各个层次的封装，达到一个完整的开发Spring Boot项目模板。</p><blockquote><p>代码注解如下:</p></blockquote><p><strong><em>1.EirunyeController.class</em></strong>，这里进行一些常用的请求<code>GET</code>、<code>POST</code>、<code>PUT</code>等案例测试,代码没用贴全，请查看<a href="https://github.com/eirunye/SpringBoot_CreateProject/blob/master/src/main/java/com/eirunye/springboot/controller/EirunyeController.java" target="_blank" rel="noopener">EirunyeController.class</a>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/Eirunye&quot;) //设置请求的父级标签URI</span><br><span class="line">public class EirunyeController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired //注:Autowired是按类型进行装配，可获取它所装配类的属性</span><br><span class="line">    EirunyeService eirunyeService;</span><br><span class="line">    /**</span><br><span class="line">     * 访问返回数据</span><br><span class="line">     *</span><br><span class="line">     * @return JSON EiBean</span><br><span class="line">     * @throws Exception 出现异常处理</span><br><span class="line">     */</span><br><span class="line">    @GetMapping(value = &quot;/get/bean&quot;)//url===&gt;http:localhost:8091/Eirunye/get/bean</span><br><span class="line">    public Result&lt;EiBean&gt; getEiBeanData() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        return eirunyeService.getEiBeanData();</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     *  POST请求</span><br><span class="line">     * @param eiBean</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @PostMapping(value = &quot;/save/bean&quot;) //url===&gt;http:localhost:8091/Eirunye/save/bean</span><br><span class="line">    public Result&lt;EiBean&gt; saveEiBeanData(@Valid EiBean eiBean) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        return eirunyeService.saveEiBeanData(eiBean);</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     *  PUT请求</span><br><span class="line">     * @param eiBean</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(value = &quot;/put/eiBean&quot;, method = RequestMethod.PUT)//url===&gt;http:localhost:8091/Eirunye/put/eiBean</span><br><span class="line">    public Result&lt;EiBean&gt; putEiBeanData(@Valid EiBean eiBean) throws Exception&#123;</span><br><span class="line">        return eirunyeService.putEiBeanData(eiBean);</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * DELETE 请求案例</span><br><span class="line">     * @param id id</span><br><span class="line">     * @return JSON EiBean</span><br><span class="line">     * @throws Exception 异常处理</span><br><span class="line">     */</span><br><span class="line">    @DeleteMapping(value = &quot;/delete/Bean/&#123;id&#125;&quot;)//url===&gt;http:localhost:8091/Eirunye/delete/Bean/1</span><br><span class="line">    public Result&lt;EiBean&gt; deleteEiBeanDataById(@PathVariable(&quot;id&quot;)Integer id) throws Exception&#123;</span><br><span class="line">        return eirunyeService.deleteEiBeanDataById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><em>2.EirunyeService.class</em></strong></p><blockquote><p>@Service 用于标注业务层组件：将当前类注册为Spring的Bean<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Service // 用于标注业务层组件：将当前类注册为Spring的Bean</span><br><span class="line">public class EirunyeService &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @return Result&lt;EiBean&gt;</span><br><span class="line">     * @throws EirunyeException 异常处理</span><br><span class="line">     */</span><br><span class="line">    public Result&lt;EiBean&gt; getEiBeanData() throws EirunyeException&#123;</span><br><span class="line">        EiBean eiBean = new EiBean();</span><br><span class="line">        eiBean.setName(&quot;Eirunye&quot;);</span><br><span class="line">        eiBean.setAge(19);</span><br><span class="line">        eiBean.setHobby(&quot;Java Spring Boot&quot;);</span><br><span class="line">        return ResultUtil.globalInfo(ResultEnum.SUCCESS,eiBean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p><strong><em>EiBean.class</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class EiBean &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    private String hobby;</span><br><span class="line">//get/set...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>*ResultUtil.class</strong>表示返回JSON数据封装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Author Eirunye</span><br><span class="line"> * Created by on 2018/8/24.</span><br><span class="line"> * Describe ResultUtil 返回结果封装</span><br><span class="line"> */</span><br><span class="line">public class ResultUtil &#123;</span><br><span class="line"></span><br><span class="line">    public static Result globalInfo(ResultEnum resultEnum, Object object) &#123;</span><br><span class="line">        Result result = new Result();</span><br><span class="line">        result.setCode(resultEnum.getCode());</span><br><span class="line">        result.setMsg(resultEnum.getMsg());</span><br><span class="line">        result.setData(object);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    public static  Result error(Integer code,String msg)&#123;</span><br><span class="line">        Result result = new Result();</span><br><span class="line">        result.setCode(code);</span><br><span class="line">        result.setMsg(msg);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ResultEnum枚举，进行封装符合字符提示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Author Eirunye</span><br><span class="line"> * Created by on 2018/8/24.</span><br><span class="line"> * Describe ResultEnum</span><br><span class="line"> */</span><br><span class="line">public enum ResultEnum &#123;</span><br><span class="line"></span><br><span class="line">    UNKNOWN_ERROR(-1, &quot;UNKNOW ERROR&quot;),//返回失败</span><br><span class="line">    SUCCESS(0, &quot;SUCEESSS&quot;), ///返回成功</span><br><span class="line">    ///这里大家定义自己的返回系列</span><br><span class="line">    ;</span><br><span class="line">    private Integer code; //返回码 0表示成功，1表示失败，-1未知错误</span><br><span class="line">    private String msg;</span><br><span class="line"></span><br><span class="line">    ResultEnum(Integer code, String msg) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">        this.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">    public Integer getCode() &#123;</span><br><span class="line">        return code;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getMsg() &#123;</span><br><span class="line">        return msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>*EirunyeException.class</strong>这里表示封装的一次处理。添加异常处理，这里只是简单的提示，后期会讲解到Spring Boot如何优雅的封装异常。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Author Eirunye</span><br><span class="line"> * Created by on 2018/8/24.</span><br><span class="line"> * Describe ResultEnum</span><br><span class="line"> */</span><br><span class="line">public class EirunyeException extends RuntimeException &#123;</span><br><span class="line"></span><br><span class="line">    private Integer code;</span><br><span class="line">    public EirunyeException(ResultEnum resultEnum) &#123;</span><br><span class="line">        super(resultEnum.getMsg());</span><br><span class="line">        this.code = resultEnum.getCode();</span><br><span class="line">    &#125;</span><br><span class="line">    public Integer getCode() &#123;</span><br><span class="line">        return code;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setCode(Integer code) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>常用的注解 <a href="https://docs.spring.io/spring/docs/4.3.1.RELEASE_to_4.3.2.RELEASE/Spring%20Framework%204.3.2.RELEASE/org/springframework/web/bind/annotation/" target="_blank" rel="noopener">参数注解官方文档</a></li></ul><p>这里主要讲解的是常用的注解方法。需要更多的情况官方文档。</p><table><thead><tr><th>注解</th><th>解释说明</th></tr></thead><tbody><tr><td><code>@RestController</code></td><td>表示的是：<code>@ResponseBody</code> ＋ <code>@Controller</code>，作用于类，返回默认为JSON数据</td></tr><tr><td><code>@Controller</code></td><td>表示视图可以解析jsp、xml等文档，需要在方法中添加<code>@ResponseBody</code>，返回JSON</td></tr><tr><td><code>@ResponseBody</code></td><td>作用于方法中，如果类中有<code>@RestController</code>，就不需要添加<code>@ResponseBody</code></td></tr><tr><td><code>@RequestMapping(&quot;/Eirunye&quot;)</code></td><td>作用于类中是表示设置请求的父级标签URI,每个URI必须带父级标签如：<code>http://localhost:8080/Eirunye/xxxx</code><br>作用于方法是表示默认为<code>GET</code>请求<br><code>@RequestMapping(value = &quot;/put/eiBean&quot;,method = RequestMethod.PUT)</code> 表示<code>PUT</code>请求,如图<code>RequestMethod.png</code> 常用的请求方法</td></tr><tr><td><code>@GetMapping(value = &quot;/bean&quot;)</code></td><td>表示<code>GET</code>请求<br><code>@GetMapping(value = &quot;/get/hello/{id}&quot;)</code>表示参数<code>id</code>,看上面代码引用<code>@PathVariable(&quot;id&quot;)</code></td></tr><tr><td><code>@PathVariable(&quot;xx&quot;)</code></td><td>表示在方法的参数中引用，获取URL中<code>{xx}</code>中的数据，<code>xx</code>表示的字段相同，看以上代码<code>id</code></td></tr><tr><td><code>@RequestParam</code></td><td>表示请求参数，看以上代码<code>(@RequestParam(&quot;name&quot;) String name, @RequestParam(&quot;age&quot;) int age)</code></td></tr><tr><td><code>@PostMapping(value = &quot;/save/bean&quot;)</code></td><td>表示<code>POST</code>请求，<code>@RequestMapping(value = &quot;/save/bean&quot;, method = RequestMethod.POST)</code>简写，参数<code>(@Valid EiBean eiBean)</code>或者<code>params</code>形式等</td></tr><tr><td><code>@DeleteMapping(value = &quot;delete/Bean/{id}&quot;)</code></td><td>表示<code>DELETE</code>请求，<code>@RequestMapping(value = &quot;delete/Bean/{id}&quot;, method = RequestMethod.DELETE)</code></td></tr><tr><td><code>@Service</code></td><td>用于标注业务层组件：将当前类注册为Spring的Bean，操作数据库一般在这里进行</td></tr></tbody></table><p><img src="https://upload-images.jianshu.io/upload_images/3012005-0c24f02f22717b39.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="RequestMethod.png"></p><ul><li>注：在后期文章遇到新的注解会说明到。</li></ul><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p><strong><em>在接下来会有一篇博文会详细讲解在开发中我们如何进行测试(#)，这里只进行一些简单测试</em></strong></p><p>在这里我们只需要进行一下访问结果，如下:</p><ul><li>Postman请求如下:<br>Postman请求有全部满足要求的请求，切换请求方法即可。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3012005-187753fe7538a27d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="Postman_返回.png"></p><ul><li>IDEA请求如下:</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3012005-58c7ec1b75c3069b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="返回成功.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-db619b9a5da650ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="返回数据结果.png"></p><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><ul><li><a href="https://gitee.com/springboot_yrgen/SpringBoot_CreateProject" target="_blank" rel="noopener"><strong>本篇案例代码下载-码云</strong></a></li><li><a href="https://github.com/eirunye/SpringBoot_CreateProject" target="_blank" rel="noopener"><strong>本篇案例代码下载-GitHub</strong></a></li><li><a href="https://github.com/eirunye/Eirunye_SpringBoot_Notes" target="_blank" rel="noopener"><strong>Spring Boot系列代码-码云</strong></a></li><li><a href="https://github.com/eirunye/Eirunye_SpringBoot_Notes" target="_blank" rel="noopener"><strong>Spring Boot系列代码-GitHub</strong></a></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>1.学习本篇，我们知道如何搭建一个好的项目工程,常用的功能架构</p><p>2.我们在搭建项目的时候要尽可能考虑到我们需要的处理逻辑，选型，然后进行封装，这只是一个简单的项目搭建，在正常情况下，假如添加MyBatis或者其他数据库操作时，最好分成处理，这里我们阅读代码非常方便，异常处理非常重要，我们能快速定位错误位置等等。</p><p>3.打家可以通过该案例来进行搭建项目，符合自己的代码编写项目操作。</p><p>4.本案例代码大家完全可以引用到自己的项目中进行封装开发。</p><h1 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h1><ul><li><p>我的博客<br>大家可以到<a href="https://eirunye.github.io"><strong>我的博客https://eirunye.github.io</strong></a>进行浏览相关文章，大家一起相互探讨技术。</p></li><li><p><a href="https://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/Spring-Boot/">Spring Boot 系列</a><br>如果大家想了解更多的Spring Boot相关博文请进入我的<a href="https://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/Spring-Boot/"><strong>Spring Boot系列博客栈</strong></a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;h2 id=&quot;Spring-Boot如何搭建完整项目&quot;&gt;&lt;a href=&quot;#Spring-Boot如何搭建完整项目&quot; class=&quot;header
      
    
    </summary>
    
      <category term="后台" scheme="http://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/"/>
    
      <category term="Spring Boot" scheme="http://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/Spring-Boot/"/>
    
    
      <category term="Java" scheme="http://eirunye.github.io/tags/Java/"/>
    
      <category term="Spring Boot" scheme="http://eirunye.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 配置文件设置(三)</title>
    <link href="http://eirunye.github.io/2018/08/20/Spring-Boot-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AE%BE%E7%BD%AE-%E4%B8%89/"/>
    <id>http://eirunye.github.io/2018/08/20/Spring-Boot-配置文件设置-三/</id>
    <published>2018-08-20T13:51:39.000Z</published>
    <updated>2018-08-21T08:36:40.216Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>上篇我们做了一些简单的运行文件的配置，本篇带领大家来认识常用的一些配置，当然了关于Spring Boot 这些配置太多太多了，如果想了解更多的话直接上官网参考一下，了解相关案例如本篇的配置。 <a href="https://docs.spring.io/spring-boot/docs/2.0.4.RELEASE/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">application.properties配置官方指南参考</a>。<br><img src="https://upload-images.jianshu.io/upload_images/3012005-2eecd990df12386f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="Spring Boot.jpg"></p><h1 id="Spring-Boot有以下方式配置"><a href="#Spring-Boot有以下方式配置" class="headerlink" title="Spring Boot有以下方式配置"></a>Spring Boot有以下方式配置</h1><h2 id="application-properties配置"><a href="#application-properties配置" class="headerlink" title="application.properties配置"></a>application.properties配置</h2><p>在 <a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">IntelliJ IDEA</a> 开发工具中创建项目的时候，默认的配置文件是<em>application.properties</em>，接下来我们就学习一下然后配置一些我们在开发中经常用到的配置项，进入带领我们揭开Spring Boot 项目的神秘的面纱。<br>在下面的文档中我会在每个配置中进行注解，这样能更好的了解，当然官方文档有我们所需的全部配置，大家如果项目开发中有需求那么可以进入<a href="https://docs.spring.io/spring-boot/docs/2.0.4.RELEASE/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">application.properties配置官方指南参考</a>。</p><p><strong>英:</strong> Appendix A. Common application properties<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Various properties can be specified inside your application.properties file, inside your application.yml file, or as command line switches.</span><br><span class="line">This appendix provides a list of common Spring Boot properties and references to the underlying classes that consume them.</span><br><span class="line">[Note]</span><br><span class="line">Property contributions can come from additional jar files on your classpath, so you should not consider this an exhaustive list.</span><br><span class="line">Also, you can define your own properties.</span><br><span class="line">[Warning]</span><br><span class="line">This sample file is meant as a guide only. Do not copy and paste the entire content into your application. Rather, pick only the properties that you need.</span><br></pre></td></tr></table></figure></p><p><strong>译:</strong> 官方指南者三段话概况了今天我们要讲得内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">可以在application.properties文件中，application.yml文件中或命令行开关中指定各种属性。 本附录提供了常用Spring Boot属性的列表以及对使用它们的基础类的引用。</span><br><span class="line">[注意]</span><br><span class="line">属性贡献可以来自类路径上的其他jar文件，因此您不应将此视为详尽的列表。 此外，您可以定义自己的属性。</span><br><span class="line">[警告]</span><br><span class="line">此示例文件仅供参考。 不要将整个内容复制并粘贴到您的应用程序中。 相反，只选择您需要的属性。</span><br></pre></td></tr></table></figure></p><p>所以我们在添加某些配置属性的时候，一定要根据自己的需要来添加，不然有时出错了，不知道哪里找问题。</p><h3 id="常用的application-properties配置"><a href="#常用的application-properties配置" class="headerlink" title="常用的application.properties配置"></a>常用的application.properties配置</h3><p>一般情况下在src目录下的/main/resource文件夹中新建<em><code>application.properties</code></em>文件，目录结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|--src</span><br><span class="line">   |--main</span><br><span class="line">      |--resources</span><br><span class="line">         |--application.properties</span><br></pre></td></tr></table></figure></p><p>我们接下来编写一些常用的属性配置，大家在开发中需要到哪些就直接去查看一下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line">#启用调试日志。</span><br><span class="line">debug=false</span><br><span class="line">#启用跟踪日志。</span><br><span class="line">trace=false</span><br><span class="line"></span><br><span class="line">#--------------------------------------</span><br><span class="line"># LOGGING 日记</span><br><span class="line">#--------------------------------------</span><br><span class="line"># 日志配置文件的位置。 例如，Logback的classpath:logback.xml</span><br><span class="line">logging.config=classpath:logback.xml</span><br><span class="line"># 日志文件名（例如，`myapp.log`）。名称可以是精确位置或相对于当前目录。</span><br><span class="line">logging.file=property.log</span><br><span class="line"># 最大日志文件大小。 仅支持默认的logback设置</span><br><span class="line">logging.file.max-size=10MB</span><br><span class="line"># 日志文件的位置。 例如，`/ var / log`。</span><br><span class="line">logging.path=/var/log</span><br><span class="line"></span><br><span class="line">#---------------------------------</span><br><span class="line"># AOP</span><br><span class="line">#---------------------------------</span><br><span class="line"># 使用AOP 切面编程</span><br><span class="line">spring.aop.auto=true</span><br><span class="line">#是否要创建基于子类的（CGLIB）代理（true），而不是基于标准Java接口的代理（false）</span><br><span class="line">spring.aop.proxy-target-class=true</span><br><span class="line"></span><br><span class="line">#--------------------------------</span><br><span class="line"># Email</span><br><span class="line">#--------------------------------</span><br><span class="line"># 编码格式</span><br><span class="line">spring.mail.default-encoding=UTF-8</span><br><span class="line"># SMTP服务器主机</span><br><span class="line">spring.mail.host=smtp.property.com</span><br><span class="line">#SMTP服务器端口</span><br><span class="line">spring.mail.port=7800</span><br><span class="line"># 登录SMTP用户名</span><br><span class="line">spring.mail.username=property</span><br><span class="line"># 登录SMTP密码</span><br><span class="line">spring.mail.password=123456</span><br><span class="line"></span><br><span class="line">#--------------------------------</span><br><span class="line"># WEB 属性配置</span><br><span class="line">#--------------------------------</span><br><span class="line"># 服务器应绑定的网络地址</span><br><span class="line">server.address=127.0.0.1</span><br><span class="line"># 是否启用了响应压缩</span><br><span class="line">server.compression.enabled=false</span><br><span class="line"># 连接器在关闭连接之前等待另一个HTTP请求的时间。 未设置时，将使用连接器的特定于容器的默认值。 使用值-1表示没有（即无限）超时</span><br><span class="line">server.connection-timeout=2000</span><br><span class="line"># 错误控制器的路径</span><br><span class="line">server.error.path=/error</span><br><span class="line"># 是否启用HTTP / 2支持，如果当前环境支持它。</span><br><span class="line">server.http2.enabled=false</span><br><span class="line"># 服务器端口默认为:8080</span><br><span class="line">server.port=8084</span><br><span class="line"># SP servlet的类名。</span><br><span class="line">server.servlet.jsp.class-name=org.apache.jasper.servlet.JspServlet</span><br><span class="line"># 主调度程序servlet的路径。</span><br><span class="line">server.servlet.path=/home</span><br><span class="line"># 会话cookie名称</span><br><span class="line">server.servlet.session.cookie.name=propertydemo</span><br><span class="line"></span><br><span class="line">#------------------------------</span><br><span class="line"># HTTP encoding</span><br><span class="line">#------------------------------</span><br><span class="line"># HTTP请求和响应的字符集。 如果未明确设置，则添加到“Content-Type”标头。</span><br><span class="line">spring.http.encoding.charset=UTF-8</span><br><span class="line"># 是否启用http编码支持。</span><br><span class="line">spring.http.encoding.enabled=true</span><br><span class="line">#--------------------</span><br><span class="line"># MULTIPART (MultipartProperties)</span><br><span class="line">#--------------------</span><br><span class="line"># 是否启用分段上传支持</span><br><span class="line">spring.servlet.multipart.enabled=true</span><br><span class="line"># 上传文件的中间位置</span><br><span class="line">spring.servlet.multipart.location=/log</span><br><span class="line"># 最大文件的大小</span><br><span class="line">spring.servlet.multipart.max-file-size=1MB</span><br><span class="line"># 最大请求大小</span><br><span class="line">spring.servlet.multipart.max-request-size=10MB</span><br><span class="line"># 是否在文件或参数访问时懒惰地解析多部分请求。</span><br><span class="line">spring.servlet.multipart.resolve-lazily=false</span><br><span class="line">#--------------------------------------------</span><br><span class="line"># SPRING SESSION JDBC (JdbcSessionProperties)</span><br><span class="line">#--------------------------------------------</span><br><span class="line"># cron表达式用于过期的会话清理作业</span><br><span class="line">spring.session.jdbc.cleanup-cron=0 * * * * *</span><br><span class="line"># 数据库模式初始化模式</span><br><span class="line">spring.session.jdbc.initialize-schema=embedded</span><br><span class="line"># 用于初始化数据库模式的SQL文件的路径</span><br><span class="line">spring.session.jdbc.schema=classpath:org/springframework/session/jdbc/schema-@@platform@@.sql</span><br><span class="line"># 用于存储会话的数据库表的名称</span><br><span class="line">spring.session.jdbc.table-name=SPRING_SESSION</span><br><span class="line"></span><br><span class="line">#----------------------------------</span><br><span class="line"># MONGODB 数据库配置</span><br><span class="line">#----------------------------------</span><br><span class="line"># 数据库名称</span><br><span class="line">spring.data.mongodb.database=demo</span><br><span class="line"># host 配置</span><br><span class="line">spring.data.mongodb.host=127.0.0.1</span><br><span class="line"># 登录用户名</span><br><span class="line">spring.data.mongodb.username=property</span><br><span class="line"># 登录密码</span><br><span class="line">spring.data.mongodb.password=123456</span><br><span class="line"># 端口号，自己根据安装的mongodb端口配置</span><br><span class="line">spring.data.mongodb.port=9008</span><br><span class="line"># 要启用的Mongo存储库的类型</span><br><span class="line">spring.data.mongodb.repositories.type=auto</span><br><span class="line"># 连接数据uri</span><br><span class="line">spring.data.mongodb.uri=mongodb://localhost/test</span><br><span class="line"></span><br><span class="line">#---------------------------------------</span><br><span class="line"># DATASOURCE 数据库配置</span><br><span class="line">#---------------------------------------</span><br><span class="line"># MySql jdbc Driver</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line"># 连接数据库</span><br><span class="line"># demo表示的是你创建的数据库;</span><br><span class="line">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/demo?useSSL=false&amp;requireSSL=false&amp;characterEncoding=UTF-8&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC</span><br><span class="line"># 数据库用户名</span><br><span class="line">spring.datasource.username=root</span><br><span class="line"># 数据库密码</span><br><span class="line">spring.datasource.password=123456</span><br><span class="line">#-----------------------------------</span><br><span class="line"># Jpa使用</span><br><span class="line">#-----------------------------------</span><br><span class="line"># 目标数据库进行操作，默认情况下自动检测。可以使用“databasePlatform”属性设置。</span><br><span class="line">#spring.jpa.database= demo1</span><br><span class="line"># 要操作的目标数据库的名称，默认情况下自动检测。 也可以使用“Database”枚举来设置。</span><br><span class="line">#spring.jpa.database-platform=DEMO</span><br><span class="line"># DDL模式 一般有这几种方式,Spring Boot会根据是否认为您的数据库是嵌入式的，为您选择一个默认值</span><br><span class="line"># update: 更新架构时，使用;</span><br><span class="line">spring.jpa.hibernate.ddl-auto=update</span><br><span class="line"># 是否启用SQL语句的日志记录</span><br><span class="line">spring.jpa.show-sql=true</span><br><span class="line"></span><br><span class="line">#----------------------------------------</span><br><span class="line"># TESTING PROPERTIES</span><br><span class="line">#----------------------------------------</span><br><span class="line"># 要替换的现有DataSource的类型</span><br><span class="line">spring.test.database.replace=any</span><br><span class="line"># MVC打印选项</span><br><span class="line">spring.test.mockmvc.print=default</span><br><span class="line"></span><br><span class="line"># ---------------大家查看文档进行配置，不一一列举了----------------------</span><br><span class="line"></span><br><span class="line">#  各个属性注解在查看常用配置文件application.properties中</span><br><span class="line"></span><br><span class="line"># FREEMARKER</span><br><span class="line"></span><br><span class="line"># DEVTOOLS配置</span><br><span class="line"></span><br><span class="line"># SPRING HATEOAS</span><br><span class="line"></span><br><span class="line"># HTTP message conversion</span><br><span class="line"></span><br><span class="line"># GSON</span><br><span class="line"></span><br><span class="line"># JDBC</span><br><span class="line"></span><br><span class="line"># JEST (Elasticsearch HTTP client) (JestProperties)</span><br><span class="line"></span><br><span class="line"># CASSANDRA (CassandraProperties)</span><br><span class="line"># --------------------------等等----------------------------------</span><br></pre></td></tr></table></figure></p><blockquote><p>查看常用配置文件<a href="https://github.com/eirunye/SpringBoot_Property/blob/master/src/main/resources/application.properties" target="_blank" rel="noopener">application.properties</a></p></blockquote><h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h3><p> 由于有时为了方便项目的开发维护，我们可能需要到自定义配置属性，接下来我们也来搞一下自定义属性配置。</p><blockquote><p>在<strong>application.properties</strong>自定义配置属性:</p></blockquote><p>1.application.properties添加:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#--------------------------------</span><br><span class="line"># 自定义属性</span><br><span class="line">#--------------------------------</span><br><span class="line">com.eirunye.defproname=&quot;root&quot;</span><br><span class="line">com.eirunye.defpropass=&quot;123456&quot;</span><br></pre></td></tr></table></figure><p>2.在<strong>DefPropertyController.class</strong>引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class DefPropertyController &#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;com.eirunye.defproname&#125;&quot;)</span><br><span class="line">    private String defProName;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;com.eirunye.defpropass&#125;&quot;)</span><br><span class="line">    private String defProPass;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/defproprety&quot;)</span><br><span class="line">    public String defPropretyUser() &#123;</span><br><span class="line">        return &quot;这个自定义属性名为: &quot; + defProName + &quot;, 密码为:&quot; + defProPass;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong><br>在获取自定义属性时一定要严格按照配置文件来获取并且Value里面的字符串一定是<code>$</code>+花括号<code>{***}</code>,花括号里面的<code>***</code>表示为:<code>application.properties里面自定义的字符串</code>，所以本例就是表示为:<code>@Value(&quot;${com.eirunye.defproname}&quot;)</code> 。<br>如果<code>application.properties</code>有自定义为<code>test.ok=&quot;haha&quot;</code>,同样的获取方式为:<code>@Value(&quot;${test.ok}&quot;)</code></li></ul><p>3.测试<code>这里暂未使用测试代码的方式，后面的文章会讲到</code></p><ul><li>IntelliJ IDEA访问<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8084/defproprety</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3012005-d5479d7990d69320.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="def_idea.png"></p><ul><li><a href="https://www.getpostman.com/" target="_blank" rel="noopener">Postman访问</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3012005-a52caf3352427bd0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="def_postman.png"></p><blockquote><p>通过Bean的形式获取</p></blockquote><p>假如我们遇到这样情况，自定义属性多，然后每个都是通过<code>@Value(${&quot;&quot;})</code>方式的话可能会很容易出错，那么我们可以采用以下方式。</p><p>1.新建一个<code>Properties.class</code><br>添加<code>@ConfigurationProperties(prefix = &quot;com.eirunye&quot;)</code>//表示的是通过自定义属性查找，如果自定义是:<code>test.ok=haha</code>,则该这样表示:<code>@ConfigurationProperties(prefix = &quot;test&quot;)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@ConfigurationProperties(prefix = &quot;com.eirunye&quot;)//添加该注解</span><br><span class="line">public class Properties &#123;</span><br><span class="line">    private String defproname;</span><br><span class="line">    private String defpropass;</span><br><span class="line">//  get/set方法</span><br><span class="line">    public String getDefproname() &#123;</span><br><span class="line">        return defproname;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setDefproname(String defproname) &#123;</span><br><span class="line">        this.defproname = defproname;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getDefpropass() &#123;</span><br><span class="line">        return defpropass;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setDefpropass(String defpropass) &#123;</span><br><span class="line">        this.defpropass = defpropass;</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure><p>2.在controller包下创建 <code>DefBeanPropertyController.class</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class DefBeanPropertyController &#123;</span><br><span class="line">   //通过 Autowired注解来获取到 Properties属性，注:Autowired是按类型进行装配，可获取它所装配类的属性</span><br><span class="line">    @Autowired</span><br><span class="line">    Properties properties;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/bean/defproperty&quot;)</span><br><span class="line">    public String getDefBeanProperties() &#123;</span><br><span class="line">        return &quot;这是通过Bean注解的方式获取属性: &quot; + properties.getDefproname() + &quot;,密码为: &quot; + properties.getDefpropass();</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure><p>3.在项目的入口文件<strong>Application</strong>添加注解<strong>@EnableConfigurationProperties</strong><br>最后加上包名不然可能找不到扫描文件如:<code>@EnableConfigurationProperties({com.eirunye.defpropertys.bean.Properties.class})</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableConfigurationProperties(&#123;com.eirunye.defpropertys.bean.Properties.class&#125;)//添加注解bean的扫描文件</span><br><span class="line">public class DefpropertysApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(DefpropertysApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.测试<br>IntelliJ IDEA访问</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-e83c94a826f2309d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="bean_def_idea.png"></p><blockquote><p>创建文件xxx.properties文件方式</p></blockquote><p>我们可以自己创建一个自定义属性的文件如本例<strong>def.properties</strong>，(<em>注:一般都是以 <strong>.properties</strong> 文件结尾</em>)</p><p>1.添加自定义<code>def.properties</code>配置如下:</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-7730447bb95f7fee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="def_file.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#--------------------------------</span><br><span class="line"># 自定义属性</span><br><span class="line">#--------------------------------</span><br><span class="line"># 用户名</span><br><span class="line">com.eirunye.defineuser=&quot;property&quot;</span><br><span class="line"># 年龄</span><br><span class="line">com.eirunye.defineage=20</span><br></pre></td></tr></table></figure><p>2.创建 <code>DefineProperties.class</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@ConfigurationProperties(prefix = &quot;com.eirunye&quot;)//添加注解 ConfigurationProperties &quot;com.eirunye&quot;表示的是自定义属性</span><br><span class="line">@PropertySource(&quot;classpath:defines.properties&quot;)// 添加注解 PropertySource 该注解能根据路径扫描到我们的文件</span><br><span class="line">public class DefineProperties &#123;</span><br><span class="line">//    这里可以通过@Value(&quot;$&#123;&#125;&quot;)方式添加,我已经屏蔽掉了，直接通过ConfigurationProperties注解的方式</span><br><span class="line">//    @Value(&quot;$&#123;com.eirunye.defineuser&#125;&quot;)</span><br><span class="line">    private String defineuser;</span><br><span class="line">//    @Value(&quot;$&#123;com.eirunye.defineage&#125;&quot;)</span><br><span class="line">    private int defineage;</span><br><span class="line">// get/set方法</span><br><span class="line">    public String getDefineuser() &#123;</span><br><span class="line">        return defineuser;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setDefineuser(String defineuser) &#123;</span><br><span class="line">        this.defineuser = defineuser;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getDefineage() &#123;</span><br><span class="line">        return defineage;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setDefineage(int defineage) &#123;</span><br><span class="line">        this.defineage = defineage;</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure><p>3.在<code>DefinePropertiesController.class</code>引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class DefinePropertiesController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    DefineProperties defineProperties;</span><br><span class="line">    @RequestMapping(value = &quot;define/Properties&quot;)</span><br><span class="line">    public String getDefinePropertiesData()&#123;</span><br><span class="line">        return &quot;新建文件自定义属性姓名：&quot;+defineProperties.getDefineuser()+&quot;,新建文件自定义属性年龄：&quot;+defineProperties.getDefineage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.别忘了在Application里面添加配置<code>@EnableConfigurationProperties</code>,即：<code>@EnableConfigurationProperties({com.eirunye.defpropertys.bean.Properties.class,com.eirunye.defpropertys.bean.DefineProperties.class})</code></p><p>5.测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8084/define/Properties</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3012005-9fb441bce0fc8ecf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="def_idea_show.png"></p><blockquote><p><strong>下载application.properties<a href="https://github.com/eirunye/SpringBoot_defpropertys" target="_blank" rel="noopener">案例demo</a></strong></p></blockquote><h2 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h2><p>由于application.properties配置有点繁琐，简洁是我们非常喜欢的，那么在Spring Boot程序里面当然也是可以用.yml文件来配置的，接下来让我们进入对.yml文件的一些相关配置吧，官方文档<a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config-yaml" target="_blank" rel="noopener">Using YAML Instead of Properties</a>。</p><h3 id="常见的配置"><a href="#常见的配置" class="headerlink" title="常见的配置"></a>常见的配置</h3><p>首先在src目录下的/main/resource文件夹中新建<code>application.yml、application-dev.yml、application-prod.yml</code>三个文件，删除<code>application.properties</code>文件，目录结构如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">|--src</span><br><span class="line">   |--main</span><br><span class="line">      |--resources</span><br><span class="line">         |--application.yml</span><br><span class="line">         |--application-dev.yml</span><br><span class="line">         |--application-prod.yml</span><br></pre></td></tr></table></figure></p><p>相信很多人要骂街了，这什么情况不是说,yml配置很给力吗？怎么还有创建那么多文件，这不是比上面的  <code>application.properties</code>配置还多此一举吗？莫急接下来让我们来看看.yml的配置之后，我相信你肯定在项目中会喜欢用它。</p><p>常见的配置属性如下: 【注意: 这里属性之间的间隔必须按照要求而来,如:冒号后面要空格】<br><code>application.yml</code> 配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active: dev   #引用 application-dev.yml文件,这里我们可以改为 prod,表示引用application-prod.yml文件</span><br><span class="line">  datasource:</span><br><span class="line">      driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">      url: jdbc:mysql://127.0.0.1:3306/demo?useSSL=false&amp;requireSSL=false&amp;characterEncoding=UTF-8&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC</span><br><span class="line">      username: root</span><br><span class="line">      password: 12346</span><br><span class="line">  jpa:</span><br><span class="line">    hibernate:</span><br><span class="line">      ddl-auto: update</span><br><span class="line">    show-sql: true</span><br><span class="line">  data:</span><br><span class="line">    mongodb:</span><br><span class="line">      host: 127.0.0.1</span><br><span class="line">      uri: mongodb://localhost/test</span><br><span class="line">      username: root</span><br><span class="line">      password: 123456</span><br><span class="line">      database: test</span><br><span class="line">  test:</span><br><span class="line">    database:</span><br><span class="line">      replace: any</span><br><span class="line">    mockmvc:</span><br><span class="line">      print: default</span><br><span class="line">  servlet:</span><br><span class="line">    multipart:</span><br><span class="line">      enabled: true</span><br></pre></td></tr></table></figure><p><code>application-dev.yml</code> 可以当成正式服务器端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8084</span><br></pre></td></tr></table></figure><p><code>application-prod.yml</code> 可以当成测试服务器端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8080</span><br></pre></td></tr></table></figure><ul><li><strong>查看更多<a href="https://github.com/eirunye/SpringBoot_Property/blob/master/src/main/resources/application.yml" target="_blank" rel="noopener">.yml配置</a></strong></li></ul><h3 id="自定义yml配置"><a href="#自定义yml配置" class="headerlink" title="自定义yml配置"></a>自定义yml配置</h3><blockquote><p>在application.yml配置</p></blockquote><p>1.和上面的application.properties类似，但是需要注意的是<em>格式问题</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">com:</span><br><span class="line">  eirunye:</span><br><span class="line">    ymlname: ymlroot</span><br><span class="line">    ymlpass: yml123456</span><br></pre></td></tr></table></figure></p><p>2.通过<code>@Value(&quot;${com.eirunye.ymlname}&quot;)</code>获取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class YmlPropertiesController&#123;</span><br><span class="line">    @Value(&quot;$&#123;com.eirunye.ymlname&#125;&quot;)</span><br><span class="line">    private String ymlname;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;com.eirunye.ymlpass&#125;&quot;)</span><br><span class="line">    private String ymlpass;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;yml/proprety&quot;)</span><br><span class="line">    public String getYmlPropreties() &#123;</span><br><span class="line">        return &quot;这个自定义属性名为: &quot; + ymlname+ &quot;, 密码为:&quot; + ymlpass;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.测试—访问:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8084/yml/proprety</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3012005-eae9ed7abb04ee43.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="yml_def.png"></p><blockquote><p>通过Bean方式获取和application.properties方式一样</p></blockquote><p>1.创建YmlPropertyBean.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@ConfigurationProperties(prefix = &quot;com.eirunye&quot;)//添加该注解</span><br><span class="line">public class YmlPropertyBean &#123;</span><br><span class="line"></span><br><span class="line">    private String ymlname;</span><br><span class="line">    private String ymlpass;</span><br><span class="line">// get/set方法.....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.在 <code>YmlPropertyBeanController.class</code>引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class YmlPropertyBeanController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    YmlPropertyBean propertyBean;</span><br><span class="line">    @RequestMapping(value = &quot;/bean/ymlproperty&quot;)</span><br><span class="line">    public String getYmlPropertyData()&#123;</span><br><span class="line">        return &quot;这个bean自定义属性名为: &quot; + propertyBean.getYmlname()+ &quot;, 密码为:&quot; + propertyBean.getYmlpass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.测试-访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8084/bean/ymlproperty</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3012005-5551aabdebf638ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="yml_bean_def.png"></p><blockquote><p><strong>下载.yml<a href="https://github.com/eirunye/SpringBoot_defineyml" target="_blank" rel="noopener">案例demo</a></strong></p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>   1.本篇主要讲得配置文件，到此就结束了，在开发中这是我们经常用到。<br>   2.在本篇有些相关配置，本例的代码实例还没涉及到，接下来会继续结合相关的配置案例继续更新。<br>   3.相信大家也有所掌握。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;上篇我们做了一些简单的运行文件的配置，本篇带领大家来认识常用的一些配置，当然了关于Spring Boot 这些配置太多太多了，如果想了解更多
      
    
    </summary>
    
      <category term="后台" scheme="http://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/"/>
    
      <category term="Spring Boot" scheme="http://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/Spring-Boot/"/>
    
    
      <category term="Java" scheme="http://eirunye.github.io/tags/Java/"/>
    
      <category term="Spring Boot" scheme="http://eirunye.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 项目创建(二)</title>
    <link href="http://eirunye.github.io/2018/08/14/Spring-Boot-%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA-%E4%BA%8C/"/>
    <id>http://eirunye.github.io/2018/08/14/Spring-Boot-项目创建-二/</id>
    <published>2018-08-14T03:49:36.000Z</published>
    <updated>2018-08-14T07:13:41.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何创建Spring-Boot-项目？"><a href="#如何创建Spring-Boot-项目？" class="headerlink" title="如何创建Spring Boot 项目？"></a>如何创建Spring Boot 项目？</h1><p>接下来我们将学习如何创建第一个Spring Boot项目 <strong><em>hello Spring Boot!</em></strong> 呢？</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-ab363c756e658c99.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/400" alt="Spring Boot.jpg"></p><h2 id="我们将以-IntelliJ-IDEA-开发工具为例创建Spring-Boot项目"><a href="#我们将以-IntelliJ-IDEA-开发工具为例创建Spring-Boot项目" class="headerlink" title="我们将以 IntelliJ IDEA 开发工具为例创建Spring Boot项目"></a>我们将以 IntelliJ IDEA 开发工具为例创建Spring Boot项目</h2><ol><li>如果还没下载过<a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">IntelliJ IDEA</a>,那么打开下载即可。</li><li><a href="http://idea.lanyus.com/" target="_blank" rel="noopener">IntelliJ IDEA 破解码</a>，这个之前是可以用的，谢谢作者分享，不知道还能不能用。</li><li>一切准备完成后，开始使用开发之旅吧。</li></ol><h2 id="IDEA创建Spring-Boot项目流程"><a href="#IDEA创建Spring-Boot项目流程" class="headerlink" title="IDEA创建Spring Boot项目流程"></a>IDEA创建Spring Boot项目流程</h2><p><strong>如图所示</strong></p><ol><li>File —–&gt; New ——&gt; Project…</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-7742be37106c16f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="创建1.png"></p><ol start="2"><li>选择 Spring Initializr</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-a8d88cb7188bd499.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="创建2.png"></p><ol start="3"><li>Project Matedata</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-6887d50074b04b23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="创建3.png"></p><ol start="4"><li>选择Web —–&gt; Web —–&gt; Spring Boot版本(默认即可)</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-50a5a2138872929b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="创建4.png"></p><ol start="5"><li>选择项目保存的文件夹</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-0cd4e1e9cb939640.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="创建5.png"></p><ol start="6"><li>创建完成 查看项目目录<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">|--src:源代码文件</span><br><span class="line">   |--main</span><br><span class="line">      |--java:项目的代码Java代码编写在这里</span><br><span class="line">      |--resources:一般是配置文件等</span><br><span class="line">         |--static:静态资源文件(js、css、img)</span><br><span class="line">         |--template:模板(.html等)</span><br><span class="line">         |--application.properties: 配置文件</span><br><span class="line">   |--test:主要是用于测试</span><br><span class="line">|--target:是项目打包生成的.jar文件在这里</span><br><span class="line">|--pom.xml:是添加依赖文件、版本号、打包设置为Jar或者War等 (如下图:pom.xml.png)</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-eeecc6cb6fc171dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="项目目录结构6.png"></p><ol start="7"><li>查看 pom.xml</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-f339f5fbed904ad7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="pom.xml.png"></p><ol start="8"><li>编辑配置application.properties 文件 一般需要配置一些端口，数据库连接、编码方式等，如下图<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#设置端口</span><br><span class="line">server.port=8084</span><br><span class="line">#session失效时间</span><br><span class="line">server.session-timeout=3000</span><br><span class="line">#编码方式</span><br><span class="line">server.tomcat.uri-encoding=utf-8</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-041e35ae669efa54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="application.properties.png"></p><ol start="9"><li>程序的入口文件</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-15e6598f02ab7c2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="程序入口Application.png"></p><ol start="10"><li>编写简单的例子 如下图所示:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">创建一个controller 包，在包下创建 HelloController.class</span><br><span class="line">添加注解:</span><br><span class="line">    @RestController ----&gt;默认Json格式数据</span><br><span class="line">    @GetMapping(value = &quot;/hello&quot;) &apos;hello&apos;:表示访问路径</span><br><span class="line">    解下来的文章会讲述到更多的注解......</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-0f3f42f1454efee5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="controller.class.png"></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="运行是否正常"><a href="#运行是否正常" class="headerlink" title="运行是否正常"></a>运行是否正常</h2><ol><li>如下图</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-9bf6556f71b9fad4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="运行项目1.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-5614d3b09ec72898.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="运行项目2.png"></p><ol start="2"><li>访问测试:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">浏览器访问</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-0a1c0d33cc3d922c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="访问结果1.png"><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IDEA 自带的访问(推荐)</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-9e8238ce358139eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="访问结果2.png"><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Postman 访问(推荐)</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-a5d90d90d61382ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="Postman访问3.png"></p><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p><strong>安装 <a href="https://www.getpostman.com/" target="_blank" rel="noopener">Postman</a></strong></p><p><strong>本例项目<a href="https://github.com/iconye/springboot_hello" target="_blank" rel="noopener">下载demo</a></strong></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>  在IDEA开发工具中构建Spring Boot非常简单，推荐大家使用IDEA(Eclipse创建项目在这里不举例了)。</p><p>  接下来讲解的是Spring Boot 的相关配置。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何创建Spring-Boot-项目？&quot;&gt;&lt;a href=&quot;#如何创建Spring-Boot-项目？&quot; class=&quot;headerlink&quot; title=&quot;如何创建Spring Boot 项目？&quot;&gt;&lt;/a&gt;如何创建Spring Boot 项目？&lt;/h1&gt;&lt;p&gt;接下
      
    
    </summary>
    
      <category term="后台" scheme="http://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/"/>
    
      <category term="Spring Boot" scheme="http://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/Spring-Boot/"/>
    
    
      <category term="Java" scheme="http://eirunye.github.io/tags/Java/"/>
    
      <category term="Spring Boot" scheme="http://eirunye.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 认识(一)</title>
    <link href="http://eirunye.github.io/2018/08/14/Spring-Boot-knowledge-1/"/>
    <id>http://eirunye.github.io/2018/08/14/Spring-Boot-knowledge-1/</id>
    <published>2018-08-14T03:13:46.000Z</published>
    <updated>2018-09-30T06:04:33.104Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>最近开发项目一直用到了Spring Boot脚手架工具，让我们来认识它一下吧，进入Spring Boot开发之旅。</p><p>谈谈对SpringMVC 、Spring Boot 、SpringCloud 认识，这样帮助我们快速入门学习该部分的内容。</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-4eea704b10ae0142.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="Spring Boot.jpg"></p><h1 id="认识Spring-Boot"><a href="#认识Spring-Boot" class="headerlink" title="认识Spring Boot"></a>认识Spring Boot</h1><p>   Spring Boot 是由 Pivotal 团队提供的全新框架，其目的是用来简化新 Spring 应用的初始搭建以及开发过程。<br>    Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”.</p><p>   在开发中给了我们很大的便利，不用进行过多的配置，和繁琐的设置，非常方便我们学习了开发项目。<br>   总结一下几点非常棒:</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">入门简单</span><br><span class="line">开发效率高</span><br><span class="line">无须额外的配置</span><br><span class="line">监控运行过程等</span><br><span class="line">精心策划的依赖项</span><br><span class="line">具有丰富的SQL和NoSQL支持</span><br><span class="line">构建任何东西 - REST API，WebSocket，Web，Streaming，Tasks等</span><br><span class="line">支持嵌入式运行时支持 - Tomcat，Jetty和Undertow</span><br><span class="line">简化安全性</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="Spring-Boot-和Spring-MVC区别"><a href="#Spring-Boot-和Spring-MVC区别" class="headerlink" title="Spring Boot 和Spring MVC区别"></a>Spring Boot 和Spring MVC区别</h2><p>  <strong>Spring MVC</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Spring MVC 是Spring的一个模块，是一种解决Web开发应用的框架。这种开发模式层次分明，轻度解耦，为Web应用提供了许多模板，减轻了开发难度，但是Spring都要进行复杂的XML、JavaConfig等资源的配置。</span><br><span class="line">Spring MVC 框架使用IOC对控制逻辑和业务提供了全面的分离，从而很好的解决了复杂错乱的问题。</span><br><span class="line">Spring MVC 需要过分的配置，导致花费更多的时间，效率低下。</span><br></pre></td></tr></table></figure><p><strong>Spring Boot</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Spring Boot 创建完成后，提供了许多复杂的配置，降低了开发的进度和成本。例如: Spring Boot创建完成后，可以集成JDBC、Redis、MySQL、JackJson等等这些配置，让我们在开发过程中收益，只要关注业务，完成相关业务即可，从而不必担心配置的问题。</span><br><span class="line">Spring Boot 可以直接独立运行，简单即可。</span><br><span class="line">Spring Boot 是Spring的一套快速配置脚手架框架，Spring Boot 提供了一系列的相关配置，还有相关了Maven依赖，完全可靠，开发功能和Spring MVC相关功能兼容。</span><br><span class="line">Spring Boot 提供了基于http、ssh、telnet等对运行时的项目进行监控。</span><br><span class="line">Spring Boot 降低学习成本，快速入手开发项目，没有繁琐的配置(这是是广大开发者梦寐以求的)</span><br><span class="line">Spring Boot 可以使用Spring Initializr在几秒钟内开始使用</span><br><span class="line">Spring Boot 开发人员生产力工具，例如实时重新加载和自动重启</span><br><span class="line">Spring Boot 适用于您最喜欢的IDE - Spring Tool Suite，IntelliJ IDEA和NetBeans</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="Spring-Boot-和Spring-Cloud区别"><a href="#Spring-Boot-和Spring-Cloud区别" class="headerlink" title="Spring Boot 和Spring Cloud区别"></a>Spring Boot 和Spring Cloud区别</h2><p><strong>Spring Cloud</strong><br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Spring Cloud 是一种云端分布式架构的解决框架(称为微服务)。</span><br><span class="line">Spring Cloud 是一个基于 Spring Boot 框架实现云微服务应用开发的一套工具.</span><br><span class="line">Spring Cloud 主要是专注于服务之间的通讯、熔断、监控等全局的微服务治理框架。</span><br><span class="line">Spring Cloud 是不能离开Spring Boot这个环境的，Spring Cloud必须依赖于Spring Boot，但是Spring Boot可以离开Spring Cloud独立使用开发项目。</span><br></pre></td></tr></table></figure></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p> 1.各位读者如果有更好的见解可以留言，我们一起学习。</p><p> 2.我们在不断的进步中，将会对<a href="https://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/Spring-Boot/">Spring Boot系列</a>进行深入的探究。</p><p> 3.文章将会持续更新中。</p><h1 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h1><h3 id="Spring-Boot系列博客栈"><a href="#Spring-Boot系列博客栈" class="headerlink" title="Spring Boot系列博客栈"></a>Spring Boot系列博客栈</h3><p> <a href="https://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/Spring-Boot/">Spring Boot系列</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;最近开发项目一直用到了Spring Boot脚手架工具，让我们来认识它一下吧，进入Spring Boot开发之旅。&lt;/p&gt;
&lt;p&gt;谈谈对Sp
      
    
    </summary>
    
      <category term="后台" scheme="http://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/"/>
    
      <category term="Spring Boot" scheme="http://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/Spring-Boot/"/>
    
    
      <category term="Java" scheme="http://eirunye.github.io/tags/Java/"/>
    
      <category term="Spring Boot" scheme="http://eirunye.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
</feed>
