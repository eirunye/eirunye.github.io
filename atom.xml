<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eirunye Activity</title>
  
  <subtitle>Notes</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://eirunye.github.io/"/>
  <updated>2018-08-20T14:09:48.836Z</updated>
  <id>http://eirunye.github.io/</id>
  
  <author>
    <name>Eirunye</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring-Boot 配置文件设置(三)</title>
    <link href="http://eirunye.github.io/2018/08/20/Spring-Boot-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AE%BE%E7%BD%AE-%E4%B8%89/"/>
    <id>http://eirunye.github.io/2018/08/20/Spring-Boot-配置文件设置-三/</id>
    <published>2018-08-20T13:51:39.000Z</published>
    <updated>2018-08-20T14:09:48.836Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>上篇我们做了一些简单的运行文件的配置，本篇带领大家来认识常用的一些配置，当然了关于Spring Boot 这些配置太多太多了，如果想了解更多的话直接上官网参考一下，了解相关案例如本篇的配置。 <a href="https://docs.spring.io/spring-boot/docs/2.0.4.RELEASE/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">application.properties配置官方指南参考</a>。<br><img src="https://upload-images.jianshu.io/upload_images/3012005-2eecd990df12386f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="Spring Boot.jpg"></p><h1 id="Spring-Boot有以下方式配置"><a href="#Spring-Boot有以下方式配置" class="headerlink" title="Spring Boot有以下方式配置"></a>Spring Boot有以下方式配置</h1><h2 id="application-properties配置"><a href="#application-properties配置" class="headerlink" title="application.properties配置"></a>application.properties配置</h2><p>在 <a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">IntelliJ IDEA</a> 开发工具中创建项目的时候，默认的配置文件是<em>application.properties</em>，接下来我们就学习一下然后配置一些我们在开发中经常用到的配置项，进入带领我们揭开Spring Boot 项目的神秘的面纱。<br>在下面的文档中我会在每个配置中进行注解，这样能更好的了解，当然官方文档有我们所需的全部配置，大家如果项目开发中有需求那么可以进入<a href="https://docs.spring.io/spring-boot/docs/2.0.4.RELEASE/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">application.properties配置官方指南参考</a>。</p><p><strong>英:</strong> Appendix A. Common application properties<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Various properties can be specified inside your application.properties file, inside your application.yml file, or as command line switches.</span><br><span class="line">This appendix provides a list of common Spring Boot properties and references to the underlying classes that consume them.</span><br><span class="line">[Note]</span><br><span class="line">Property contributions can come from additional jar files on your classpath, so you should not consider this an exhaustive list.</span><br><span class="line">Also, you can define your own properties.</span><br><span class="line">[Warning]</span><br><span class="line">This sample file is meant as a guide only. Do not copy and paste the entire content into your application. Rather, pick only the properties that you need.</span><br></pre></td></tr></table></figure></p><p><strong>译:</strong> 官方指南者三段话概况了今天我们要讲得内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">可以在application.properties文件中，application.yml文件中或命令行开关中指定各种属性。 本附录提供了常用Spring Boot属性的列表以及对使用它们的基础类的引用。</span><br><span class="line">[注意]</span><br><span class="line">属性贡献可以来自类路径上的其他jar文件，因此您不应将此视为详尽的列表。 此外，您可以定义自己的属性。</span><br><span class="line">[警告]</span><br><span class="line">此示例文件仅供参考。 不要将整个内容复制并粘贴到您的应用程序中。 相反，只选择您需要的属性。</span><br></pre></td></tr></table></figure></p><p>所以我们在添加某些配置属性的时候，一定要根据自己的需要来添加，不然有时出错了，不知道哪里找问题。</p><h3 id="常用的application-properties配置"><a href="#常用的application-properties配置" class="headerlink" title="常用的application.properties配置"></a>常用的application.properties配置</h3><p>一般情况下在src目录下的/main/resource文件夹中新建<em><code>application.properties</code></em>文件，目录结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|--src</span><br><span class="line">   |--main</span><br><span class="line">      |--resources</span><br><span class="line">         |--application.properties</span><br></pre></td></tr></table></figure></p><p>我们接下来编写一些常用的属性配置，大家在开发中需要到哪些就直接去查看一下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line">#启用调试日志。</span><br><span class="line">debug=false</span><br><span class="line">#启用跟踪日志。</span><br><span class="line">trace=false</span><br><span class="line"></span><br><span class="line">#--------------------------------------</span><br><span class="line"># LOGGING 日记</span><br><span class="line">#--------------------------------------</span><br><span class="line"># 日志配置文件的位置。 例如，Logback的classpath:logback.xml</span><br><span class="line">logging.config=classpath:logback.xml</span><br><span class="line"># 日志文件名（例如，`myapp.log`）。名称可以是精确位置或相对于当前目录。</span><br><span class="line">logging.file=property.log</span><br><span class="line"># 最大日志文件大小。 仅支持默认的logback设置</span><br><span class="line">logging.file.max-size=10MB</span><br><span class="line"># 日志文件的位置。 例如，`/ var / log`。</span><br><span class="line">logging.path=/var/log</span><br><span class="line"></span><br><span class="line">#---------------------------------</span><br><span class="line"># AOP</span><br><span class="line">#---------------------------------</span><br><span class="line"># 使用AOP 切面编程</span><br><span class="line">spring.aop.auto=true</span><br><span class="line">#是否要创建基于子类的（CGLIB）代理（true），而不是基于标准Java接口的代理（false）</span><br><span class="line">spring.aop.proxy-target-class=true</span><br><span class="line"></span><br><span class="line">#--------------------------------</span><br><span class="line"># Email</span><br><span class="line">#--------------------------------</span><br><span class="line"># 编码格式</span><br><span class="line">spring.mail.default-encoding=UTF-8</span><br><span class="line"># SMTP服务器主机</span><br><span class="line">spring.mail.host=smtp.property.com</span><br><span class="line">#SMTP服务器端口</span><br><span class="line">spring.mail.port=7800</span><br><span class="line"># 登录SMTP用户名</span><br><span class="line">spring.mail.username=property</span><br><span class="line"># 登录SMTP密码</span><br><span class="line">spring.mail.password=123456</span><br><span class="line"></span><br><span class="line">#--------------------------------</span><br><span class="line"># WEB 属性配置</span><br><span class="line">#--------------------------------</span><br><span class="line"># 服务器应绑定的网络地址</span><br><span class="line">server.address=127.0.0.1</span><br><span class="line"># 是否启用了响应压缩</span><br><span class="line">server.compression.enabled=false</span><br><span class="line"># 连接器在关闭连接之前等待另一个HTTP请求的时间。 未设置时，将使用连接器的特定于容器的默认值。 使用值-1表示没有（即无限）超时</span><br><span class="line">server.connection-timeout=2000</span><br><span class="line"># 错误控制器的路径</span><br><span class="line">server.error.path=/error</span><br><span class="line"># 是否启用HTTP / 2支持，如果当前环境支持它。</span><br><span class="line">server.http2.enabled=false</span><br><span class="line"># 服务器端口默认为:8080</span><br><span class="line">server.port=8084</span><br><span class="line"># SP servlet的类名。</span><br><span class="line">server.servlet.jsp.class-name=org.apache.jasper.servlet.JspServlet</span><br><span class="line"># 主调度程序servlet的路径。</span><br><span class="line">server.servlet.path=/home</span><br><span class="line"># 会话cookie名称</span><br><span class="line">server.servlet.session.cookie.name=propertydemo</span><br><span class="line"></span><br><span class="line">#------------------------------</span><br><span class="line"># HTTP encoding</span><br><span class="line">#------------------------------</span><br><span class="line"># HTTP请求和响应的字符集。 如果未明确设置，则添加到“Content-Type”标头。</span><br><span class="line">spring.http.encoding.charset=UTF-8</span><br><span class="line"># 是否启用http编码支持。</span><br><span class="line">spring.http.encoding.enabled=true</span><br><span class="line">#--------------------</span><br><span class="line"># MULTIPART (MultipartProperties)</span><br><span class="line">#--------------------</span><br><span class="line"># 是否启用分段上传支持</span><br><span class="line">spring.servlet.multipart.enabled=true</span><br><span class="line"># 上传文件的中间位置</span><br><span class="line">spring.servlet.multipart.location=/log</span><br><span class="line"># 最大文件的大小</span><br><span class="line">spring.servlet.multipart.max-file-size=1MB</span><br><span class="line"># 最大请求大小</span><br><span class="line">spring.servlet.multipart.max-request-size=10MB</span><br><span class="line"># 是否在文件或参数访问时懒惰地解析多部分请求。</span><br><span class="line">spring.servlet.multipart.resolve-lazily=false</span><br><span class="line">#--------------------------------------------</span><br><span class="line"># SPRING SESSION JDBC (JdbcSessionProperties)</span><br><span class="line">#--------------------------------------------</span><br><span class="line"># cron表达式用于过期的会话清理作业</span><br><span class="line">spring.session.jdbc.cleanup-cron=0 * * * * *</span><br><span class="line"># 数据库模式初始化模式</span><br><span class="line">spring.session.jdbc.initialize-schema=embedded</span><br><span class="line"># 用于初始化数据库模式的SQL文件的路径</span><br><span class="line">spring.session.jdbc.schema=classpath:org/springframework/session/jdbc/schema-@@platform@@.sql</span><br><span class="line"># 用于存储会话的数据库表的名称</span><br><span class="line">spring.session.jdbc.table-name=SPRING_SESSION</span><br><span class="line"></span><br><span class="line">#----------------------------------</span><br><span class="line"># MONGODB 数据库配置</span><br><span class="line">#----------------------------------</span><br><span class="line"># 数据库名称</span><br><span class="line">spring.data.mongodb.database=demo</span><br><span class="line"># host 配置</span><br><span class="line">spring.data.mongodb.host=127.0.0.1</span><br><span class="line"># 登录用户名</span><br><span class="line">spring.data.mongodb.username=property</span><br><span class="line"># 登录密码</span><br><span class="line">spring.data.mongodb.password=123456</span><br><span class="line"># 端口号，自己根据安装的mongodb端口配置</span><br><span class="line">spring.data.mongodb.port=9008</span><br><span class="line"># 要启用的Mongo存储库的类型</span><br><span class="line">spring.data.mongodb.repositories.type=auto</span><br><span class="line"># 连接数据uri</span><br><span class="line">spring.data.mongodb.uri=mongodb://localhost/test</span><br><span class="line"></span><br><span class="line">#---------------------------------------</span><br><span class="line"># DATASOURCE 数据库配置</span><br><span class="line">#---------------------------------------</span><br><span class="line"># MySql jdbc Driver</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line"># 连接数据库</span><br><span class="line"># demo表示的是你创建的数据库;</span><br><span class="line">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/demo?useSSL=false&amp;requireSSL=false&amp;characterEncoding=UTF-8&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC</span><br><span class="line"># 数据库用户名</span><br><span class="line">spring.datasource.username=root</span><br><span class="line"># 数据库密码</span><br><span class="line">spring.datasource.password=123456</span><br><span class="line">#-----------------------------------</span><br><span class="line"># Jpa使用</span><br><span class="line">#-----------------------------------</span><br><span class="line"># 目标数据库进行操作，默认情况下自动检测。可以使用“databasePlatform”属性设置。</span><br><span class="line">#spring.jpa.database= demo1</span><br><span class="line"># 要操作的目标数据库的名称，默认情况下自动检测。 也可以使用“Database”枚举来设置。</span><br><span class="line">#spring.jpa.database-platform=DEMO</span><br><span class="line"># DDL模式 一般有这几种方式,Spring Boot会根据是否认为您的数据库是嵌入式的，为您选择一个默认值</span><br><span class="line"># update: 更新架构时，使用;</span><br><span class="line">spring.jpa.hibernate.ddl-auto=update</span><br><span class="line"># 是否启用SQL语句的日志记录</span><br><span class="line">spring.jpa.show-sql=true</span><br><span class="line"></span><br><span class="line">#----------------------------------------</span><br><span class="line"># TESTING PROPERTIES</span><br><span class="line">#----------------------------------------</span><br><span class="line"># 要替换的现有DataSource的类型</span><br><span class="line">spring.test.database.replace=any</span><br><span class="line"># MVC打印选项</span><br><span class="line">spring.test.mockmvc.print=default</span><br><span class="line"></span><br><span class="line"># ---------------大家查看文档进行配置，不一一列举了----------------------</span><br><span class="line"></span><br><span class="line">#  各个属性注解在查看常用配置文件application.properties中</span><br><span class="line"></span><br><span class="line"># FREEMARKER</span><br><span class="line"></span><br><span class="line"># DEVTOOLS配置</span><br><span class="line"></span><br><span class="line"># SPRING HATEOAS</span><br><span class="line"></span><br><span class="line"># HTTP message conversion</span><br><span class="line"></span><br><span class="line"># GSON</span><br><span class="line"></span><br><span class="line"># JDBC</span><br><span class="line"></span><br><span class="line"># JEST (Elasticsearch HTTP client) (JestProperties)</span><br><span class="line"></span><br><span class="line"># CASSANDRA (CassandraProperties)</span><br><span class="line"># --------------------------等等----------------------------------</span><br></pre></td></tr></table></figure></p><blockquote><p>查看常用配置文件<a href="https://github.com/eirunye/SpringBoot_Property/blob/master/src/main/resources/application.properties" target="_blank" rel="noopener">application.properties</a></p></blockquote><h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h3><p>   由于有时为了方便项目的开发维护，我们可能需要到自定义配置属性，接下来我们也来搞一下自定义属性配置。</p><blockquote><p>在<strong>application.properties</strong>自定义配置属性:</p></blockquote><p>1.application.properties添加:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#--------------------------------</span><br><span class="line"># 自定义属性</span><br><span class="line">#--------------------------------</span><br><span class="line">com.eirunye.defproname=&quot;root&quot;</span><br><span class="line">com.eirunye.defpropass=&quot;123456&quot;</span><br></pre></td></tr></table></figure><p>2.在<strong>DefPropertyController.class</strong>引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class DefPropertyController &#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;com.eirunye.defproname&#125;&quot;)</span><br><span class="line">    private String defProName;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;com.eirunye.defpropass&#125;&quot;)</span><br><span class="line">    private String defProPass;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/defproprety&quot;)</span><br><span class="line">    public String defPropretyUser() &#123;</span><br><span class="line">        return &quot;这个自定义属性名为: &quot; + defProName + &quot;, 密码为:&quot; + defProPass;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong><br>在获取自定义属性时一定要严格按照配置文件来获取并且Value里面的字符串一定是<code>$</code>+花括号<code>{***}</code>,花括号里面的<code>***</code>表示为:<code>application.properties里面自定义的字符串</code>，所以本例就是表示为:<code>@Value(&quot;${com.eirunye.defproname}&quot;)</code> 。<br>如果<code>application.properties</code>有自定义为<code>test.ok=&quot;haha&quot;</code>,同样的获取方式为:<code>@Value(&quot;${test.ok}&quot;)</code></li></ul><p>3.测试<code>这里暂未使用测试代码的方式，后面的文章会讲到</code></p><ul><li>IntelliJ IDEA访问<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8084/defproprety</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3012005-d5479d7990d69320.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="def_idea.png"></p><ul><li><a href="https://www.getpostman.com/" target="_blank" rel="noopener">Postman访问</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3012005-a52caf3352427bd0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="def_postman.png"></p><blockquote><p>通过Bean的形式获取</p></blockquote><p>假如我们遇到这样情况，自定义属性多，然后每个都是通过<code>@Value(${&quot;&quot;})</code>方式的话可能会很容易出错，那么我们可以采用以下方式。</p><p>1.新建一个<code>Properties.class</code><br>添加<code>@ConfigurationProperties(prefix = &quot;com.eirunye&quot;)</code>//表示的是通过自定义属性查找，如果自定义是:<code>test.ok=haha</code>,则该这样表示:<code>@ConfigurationProperties(prefix = &quot;test&quot;)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@ConfigurationProperties(prefix = &quot;com.eirunye&quot;)//添加该注解</span><br><span class="line">public class Properties &#123;</span><br><span class="line">    private String defproname;</span><br><span class="line">    private String defpropass;</span><br><span class="line">//  get/set方法</span><br><span class="line">    public String getDefproname() &#123;</span><br><span class="line">        return defproname;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setDefproname(String defproname) &#123;</span><br><span class="line">        this.defproname = defproname;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getDefpropass() &#123;</span><br><span class="line">        return defpropass;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setDefpropass(String defpropass) &#123;</span><br><span class="line">        this.defpropass = defpropass;</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure><p>2.在controller包下创建 <code>DefBeanPropertyController.class</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class DefBeanPropertyController &#123;</span><br><span class="line">   //通过 Autowired注解来获取到 Properties属性，注:Autowired是按类型进行装配，可获取它所装配类的属性</span><br><span class="line">    @Autowired</span><br><span class="line">    Properties properties;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/bean/defproperty&quot;)</span><br><span class="line">    public String getDefBeanProperties() &#123;</span><br><span class="line">        return &quot;这是通过Bean注解的方式获取属性: &quot; + properties.getDefproname() + &quot;,密码为: &quot; + properties.getDefpropass();</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure><p>3.在项目的入口文件<strong>Application</strong>添加注解<strong>@EnableConfigurationProperties</strong><br>最后加上包名不然可能找不到扫描文件如:<code>@EnableConfigurationProperties({com.eirunye.defpropertys.bean.Properties.class})</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableConfigurationProperties(&#123;com.eirunye.defpropertys.bean.Properties.class&#125;)//添加注解bean的扫描文件</span><br><span class="line">public class DefpropertysApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(DefpropertysApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.测试<br>IntelliJ IDEA访问<br><img src="https://upload-images.jianshu.io/upload_images/3012005-e83c94a826f2309d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="bean_def_idea.png"></p><blockquote><p>创建文件xxx.properties文件方式</p></blockquote><p>我们可以自己创建一个自定义属性的文件如本例<strong>def.properties</strong>，(<em>注:一般都是以 <strong>.properties</strong> 文件结尾</em>)</p><p>1.添加自定义<code>def.properties</code>配置如下:</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-7730447bb95f7fee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="def_file.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#--------------------------------</span><br><span class="line"># 自定义属性</span><br><span class="line">#--------------------------------</span><br><span class="line"># 用户名</span><br><span class="line">com.eirunye.defineuser=&quot;property&quot;</span><br><span class="line"># 年龄</span><br><span class="line">com.eirunye.defineage=20</span><br></pre></td></tr></table></figure><p>2.创建 <code>DefineProperties.class</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@ConfigurationProperties(prefix = &quot;com.eirunye&quot;)//添加注解 ConfigurationProperties &quot;com.eirunye&quot;表示的是自定义属性</span><br><span class="line">@PropertySource(&quot;classpath:defines.properties&quot;)// 添加注解 PropertySource 该注解能根据路径扫描到我们的文件</span><br><span class="line">public class DefineProperties &#123;</span><br><span class="line">//    这里可以通过@Value(&quot;$&#123;&#125;&quot;)方式添加,我已经屏蔽掉了，直接通过ConfigurationProperties注解的方式</span><br><span class="line">//    @Value(&quot;$&#123;com.eirunye.defineuser&#125;&quot;)</span><br><span class="line">    private String defineuser;</span><br><span class="line">//    @Value(&quot;$&#123;com.eirunye.defineage&#125;&quot;)</span><br><span class="line">    private int defineage;</span><br><span class="line">// get/set方法</span><br><span class="line">    public String getDefineuser() &#123;</span><br><span class="line">        return defineuser;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setDefineuser(String defineuser) &#123;</span><br><span class="line">        this.defineuser = defineuser;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getDefineage() &#123;</span><br><span class="line">        return defineage;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setDefineage(int defineage) &#123;</span><br><span class="line">        this.defineage = defineage;</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure><p>3.在<code>DefinePropertiesController.class</code>引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class DefinePropertiesController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    DefineProperties defineProperties;</span><br><span class="line">    @RequestMapping(value = &quot;define/Properties&quot;)</span><br><span class="line">    public String getDefinePropertiesData()&#123;</span><br><span class="line">        return &quot;新建文件自定义属性姓名：&quot;+defineProperties.getDefineuser()+&quot;,新建文件自定义属性年龄：&quot;+defineProperties.getDefineage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.别忘了在Application里面添加配置<code>@EnableConfigurationProperties</code>,即：<code>@EnableConfigurationProperties({com.eirunye.defpropertys.bean.Properties.class,com.eirunye.defpropertys.bean.DefineProperties.class})</code></p><p>5.测试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8084/define/Properties</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-9fb441bce0fc8ecf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="def_idea_show.png"></p><blockquote><p><strong>下载application.properties<a href="https://github.com/eirunye/SpringBoot_defpropertys" target="_blank" rel="noopener">案例demo</a></strong></p></blockquote><h2 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h2><p>由于application.properties配置有点繁琐，简洁是我们非常喜欢的，那么在Spring Boot程序里面当然也是可以用.yml文件来配置的，接下来让我们进入对.yml文件的一些相关配置吧，官方文档<a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config-yaml" target="_blank" rel="noopener">Using YAML Instead of Properties</a>。</p><h3 id="常见的配置"><a href="#常见的配置" class="headerlink" title="常见的配置"></a>常见的配置</h3><p>首先在src目录下的/main/resource文件夹中新建<code>application.yml、application-dev.yml、application-prod.yml</code>三个文件，删除<code>application.properties</code>文件，目录结构如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">|--src</span><br><span class="line">   |--main</span><br><span class="line">      |--resources</span><br><span class="line">         |--application.yml</span><br><span class="line">         |--application-dev.yml</span><br><span class="line">         |--application-prod.yml</span><br></pre></td></tr></table></figure></p><p>相信很多人要骂街了，这什么情况不是说,yml配置很给力吗？怎么还有创建那么多文件，这不是比上面的  <code>application.properties</code>配置还多此一举吗？莫急接下来让我们来看看.yml的配置之后，我相信你肯定在项目中会喜欢用它。</p><p>常见的配置属性如下: 【注意: 这里属性之间的间隔必须按照要求而来,如:冒号后面要空格】<br><code>application.yml</code> 配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active: dev   #引用 application-dev.yml文件,这里我们可以改为 prod,表示引用application-prod.yml文件</span><br><span class="line">  datasource:</span><br><span class="line">      driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">      url: jdbc:mysql://127.0.0.1:3306/demo?useSSL=false&amp;requireSSL=false&amp;characterEncoding=UTF-8&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC</span><br><span class="line">      username: root</span><br><span class="line">      password: 12346</span><br><span class="line">  jpa:</span><br><span class="line">    hibernate:</span><br><span class="line">      ddl-auto: update</span><br><span class="line">    show-sql: true</span><br><span class="line">  data:</span><br><span class="line">    mongodb:</span><br><span class="line">      host: 127.0.0.1</span><br><span class="line">      uri: mongodb://localhost/test</span><br><span class="line">      username: root</span><br><span class="line">      password: 123456</span><br><span class="line">      database: test</span><br><span class="line">  test:</span><br><span class="line">    database:</span><br><span class="line">      replace: any</span><br><span class="line">    mockmvc:</span><br><span class="line">      print: default</span><br><span class="line">  servlet:</span><br><span class="line">    multipart:</span><br><span class="line">      enabled: true</span><br></pre></td></tr></table></figure><p><code>application-dev.yml</code> 可以当成正式服务器端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8084</span><br></pre></td></tr></table></figure><p><code>application-prod.yml</code> 可以当成测试服务器端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8080</span><br></pre></td></tr></table></figure><ul><li><strong>查看更多<a href="https://github.com/eirunye/SpringBoot_Property/blob/master/src/main/resources/application.yml" target="_blank" rel="noopener">.yml配置</a></strong></li></ul><h3 id="自定义yml配置"><a href="#自定义yml配置" class="headerlink" title="自定义yml配置"></a>自定义yml配置</h3><blockquote><p>在application.yml配置</p></blockquote><p>1.和上面的application.properties类似，但是需要注意的是<em>格式问题</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">com:</span><br><span class="line">  eirunye:</span><br><span class="line">    ymlname: ymlroot</span><br><span class="line">    ymlpass: yml123456</span><br></pre></td></tr></table></figure></p><p>2.通过<code>@Value(&quot;${com.eirunye.ymlname}&quot;)</code>获取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class YmlPropertiesController&#123;</span><br><span class="line">    @Value(&quot;$&#123;com.eirunye.ymlname&#125;&quot;)</span><br><span class="line">    private String ymlname;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;com.eirunye.ymlpass&#125;&quot;)</span><br><span class="line">    private String ymlpass;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;yml/proprety&quot;)</span><br><span class="line">    public String getYmlPropreties() &#123;</span><br><span class="line">        return &quot;这个自定义属性名为: &quot; + ymlname+ &quot;, 密码为:&quot; + ymlpass;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.测试—访问:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8084/yml/proprety</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-eae9ed7abb04ee43.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="yml_def.png"></p><blockquote><p>通过Bean方式获取和application.properties方式一样</p></blockquote><p>1.创建YmlPropertyBean.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@ConfigurationProperties(prefix = &quot;com.eirunye&quot;)//添加该注解</span><br><span class="line">public class YmlPropertyBean &#123;</span><br><span class="line"></span><br><span class="line">    private String ymlname;</span><br><span class="line">    private String ymlpass;</span><br><span class="line">// get/set方法.....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.在 <code>YmlPropertyBeanController.class</code>引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class YmlPropertyBeanController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    YmlPropertyBean propertyBean;</span><br><span class="line">    @RequestMapping(value = &quot;/bean/ymlproperty&quot;)</span><br><span class="line">    public String getYmlPropertyData()&#123;</span><br><span class="line">        return &quot;这个bean自定义属性名为: &quot; + propertyBean.getYmlname()+ &quot;, 密码为:&quot; + propertyBean.getYmlpass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.测试-访问<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8084/bean/ymlproperty</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-5551aabdebf638ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="yml_bean_def.png"></p><blockquote><p>下载.yml<a href="https://github.com/eirunye/SpringBoot_defineyml" target="_blank" rel="noopener">案例demo</a></p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>   1.本篇主要讲得配置文件，到此就结束了，在开发中这是我们经常用到。<br>   2.在本篇有些相关配置，本例的代码实例还没涉及到，接下来会继续结合相关的配置案例继续更新。<br>   3.相信大家也有所掌握。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;上篇我们做了一些简单的运行文件的配置，本篇带领大家来认识常用的一些配置，当然了关于Spring Boot 这些配置太多太多了，如果想了解更多
      
    
    </summary>
    
      <category term="后台" scheme="http://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/"/>
    
      <category term="Spring Boot" scheme="http://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/Spring-Boot/"/>
    
    
      <category term="Java" scheme="http://eirunye.github.io/tags/Java/"/>
    
      <category term="Spring Boot" scheme="http://eirunye.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 项目创建(二)</title>
    <link href="http://eirunye.github.io/2018/08/14/Spring-Boot-%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA-%E4%BA%8C/"/>
    <id>http://eirunye.github.io/2018/08/14/Spring-Boot-项目创建-二/</id>
    <published>2018-08-14T03:49:36.000Z</published>
    <updated>2018-08-14T07:13:41.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何创建Spring-Boot-项目？"><a href="#如何创建Spring-Boot-项目？" class="headerlink" title="如何创建Spring Boot 项目？"></a>如何创建Spring Boot 项目？</h1><p>接下来我们将学习如何创建第一个Spring Boot项目 <strong><em>hello Spring Boot!</em></strong> 呢？</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-ab363c756e658c99.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/400" alt="Spring Boot.jpg"></p><h2 id="我们将以-IntelliJ-IDEA-开发工具为例创建Spring-Boot项目"><a href="#我们将以-IntelliJ-IDEA-开发工具为例创建Spring-Boot项目" class="headerlink" title="我们将以 IntelliJ IDEA 开发工具为例创建Spring Boot项目"></a>我们将以 IntelliJ IDEA 开发工具为例创建Spring Boot项目</h2><ol><li>如果还没下载过<a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">IntelliJ IDEA</a>,那么打开下载即可。</li><li><a href="http://idea.lanyus.com/" target="_blank" rel="noopener">IntelliJ IDEA 破解码</a>，这个之前是可以用的，谢谢作者分享，不知道还能不能用。</li><li>一切准备完成后，开始使用开发之旅吧。</li></ol><h2 id="IDEA创建Spring-Boot项目流程"><a href="#IDEA创建Spring-Boot项目流程" class="headerlink" title="IDEA创建Spring Boot项目流程"></a>IDEA创建Spring Boot项目流程</h2><p><strong>如图所示</strong></p><ol><li>File —–&gt; New ——&gt; Project…</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-7742be37106c16f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="创建1.png"></p><ol start="2"><li>选择 Spring Initializr</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-a8d88cb7188bd499.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="创建2.png"></p><ol start="3"><li>Project Matedata</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-6887d50074b04b23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="创建3.png"></p><ol start="4"><li>选择Web —–&gt; Web —–&gt; Spring Boot版本(默认即可)</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-50a5a2138872929b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="创建4.png"></p><ol start="5"><li>选择项目保存的文件夹</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-0cd4e1e9cb939640.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="创建5.png"></p><ol start="6"><li>创建完成 查看项目目录<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">|--src:源代码文件</span><br><span class="line">   |--main</span><br><span class="line">      |--java:项目的代码Java代码编写在这里</span><br><span class="line">      |--resources:一般是配置文件等</span><br><span class="line">         |--static:静态资源文件(js、css、img)</span><br><span class="line">         |--template:模板(.html等)</span><br><span class="line">         |--application.properties: 配置文件</span><br><span class="line">   |--test:主要是用于测试</span><br><span class="line">|--target:是项目打包生成的.jar文件在这里</span><br><span class="line">|--pom.xml:是添加依赖文件、版本号、打包设置为Jar或者War等 (如下图:pom.xml.png)</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-eeecc6cb6fc171dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="项目目录结构6.png"></p><ol start="7"><li>查看 pom.xml</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-f339f5fbed904ad7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="pom.xml.png"></p><ol start="8"><li>编辑配置application.properties 文件 一般需要配置一些端口，数据库连接、编码方式等，如下图<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#设置端口</span><br><span class="line">server.port=8084</span><br><span class="line">#session失效时间</span><br><span class="line">server.session-timeout=3000</span><br><span class="line">#编码方式</span><br><span class="line">server.tomcat.uri-encoding=utf-8</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-041e35ae669efa54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="application.properties.png"></p><ol start="9"><li>程序的入口文件</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-15e6598f02ab7c2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="程序入口Application.png"></p><ol start="10"><li>编写简单的例子 如下图所示:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">创建一个controller 包，在包下创建 HelloController.class</span><br><span class="line">添加注解:</span><br><span class="line">    @RestController ----&gt;默认Json格式数据</span><br><span class="line">    @GetMapping(value = &quot;/hello&quot;) &apos;hello&apos;:表示访问路径</span><br><span class="line">    解下来的文章会讲述到更多的注解......</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-0f3f42f1454efee5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="controller.class.png"></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="运行是否正常"><a href="#运行是否正常" class="headerlink" title="运行是否正常"></a>运行是否正常</h2><ol><li>如下图</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-9bf6556f71b9fad4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="运行项目1.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-5614d3b09ec72898.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="运行项目2.png"></p><ol start="2"><li>访问测试:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">浏览器访问</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-0a1c0d33cc3d922c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="访问结果1.png"><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IDEA 自带的访问(推荐)</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-9e8238ce358139eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="访问结果2.png"><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Postman 访问(推荐)</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-a5d90d90d61382ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="Postman访问3.png"></p><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p><strong>安装 <a href="https://www.getpostman.com/" target="_blank" rel="noopener">Postman</a></strong></p><p><strong>本例项目<a href="https://github.com/iconye/springboot_hello" target="_blank" rel="noopener">下载demo</a></strong></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>  在IDEA开发工具中构建Spring Boot非常简单，推荐大家使用IDEA(Eclipse创建项目在这里不举例了)。</p><p>  接下来讲解的是Spring Boot 的相关配置。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何创建Spring-Boot-项目？&quot;&gt;&lt;a href=&quot;#如何创建Spring-Boot-项目？&quot; class=&quot;headerlink&quot; title=&quot;如何创建Spring Boot 项目？&quot;&gt;&lt;/a&gt;如何创建Spring Boot 项目？&lt;/h1&gt;&lt;p&gt;接下
      
    
    </summary>
    
      <category term="后台" scheme="http://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/"/>
    
      <category term="Spring Boot" scheme="http://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/Spring-Boot/"/>
    
    
      <category term="Java" scheme="http://eirunye.github.io/tags/Java/"/>
    
      <category term="Spring Boot" scheme="http://eirunye.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 认识(一)</title>
    <link href="http://eirunye.github.io/2018/08/14/Spring-Boot-knowledge-1/"/>
    <id>http://eirunye.github.io/2018/08/14/Spring-Boot-knowledge-1/</id>
    <published>2018-08-14T03:13:46.000Z</published>
    <updated>2018-08-14T15:23:12.084Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC-、Spring-Boot-、SpringCloud-认识"><a href="#SpringMVC-、Spring-Boot-、SpringCloud-认识" class="headerlink" title="SpringMVC 、Spring Boot 、SpringCloud 认识"></a>SpringMVC 、Spring Boot 、SpringCloud 认识</h1><p>最近开发项目一直用到了Spring Boot脚手架工具，让我们来认识它一下吧，进入Spring Boot开发之旅。</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-4eea704b10ae0142.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="Spring Boot.jpg"></p><h2 id="认识Spring-Boot"><a href="#认识Spring-Boot" class="headerlink" title="认识Spring Boot"></a>认识Spring Boot</h2><p>   Spring Boot 是由 Pivotal 团队提供的全新框架，其目的是用来简化新 Spring 应用的初始搭建以及开发过程。<br>    Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”.</p><p>   在开发中给了我们很大的便利，不用进行过多的配置，和繁琐的设置，非常方便我们学习了开发项目。<br>   总结一下几点非常棒:<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">入门简单</span><br><span class="line">开发效率高</span><br><span class="line">无须额外的配置</span><br><span class="line">监控运行过程等</span><br></pre></td></tr></table></figure></p><h2 id="Spring-Boot-和Spring-MVC区别"><a href="#Spring-Boot-和Spring-MVC区别" class="headerlink" title="Spring Boot 和Spring MVC区别"></a>Spring Boot 和Spring MVC区别</h2><p>  <strong>Spring MVC</strong><br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Spring MVC 是Spring的一个模块，是一种解决Web开发应用的框架。这种开发模式层次分明，轻度解耦，为Web应用提供了许多模板，减轻了开发难度，但是Spring都要进行复杂的XML、JavaConfig等资源的配置。</span><br><span class="line">Spring MVC 框架使用IOC对控制逻辑和业务提供了全面的分离，从而很好的解决了复杂错乱的问题。</span><br><span class="line">Spring MVC 需要过分的配置，导致花费更多的时间，效率低下。</span><br></pre></td></tr></table></figure></p><p><strong>Spring Boot</strong><br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Spring Boot 创建完成后，提供了许多复杂的配置，降低了开发的进度和成本。例如: Spring Boot创建完成后，可以集成JDBC、Redis、MySQL、JackJson等等这些配置，让我们在开发过程中收益，只要关注业务，完成相关业务即可，从而不必担心配置的问题。</span><br><span class="line">Spring Boot 可以直接独立运行，简单即可。</span><br><span class="line">Spring Boot 是Spring的一套快速配置脚手架框架，Spring Boot 提供了一系列的相关配置，还有相关了Maven依赖，完全可靠，开发功能和Spring MVC相关功能兼容。</span><br><span class="line">Spring Boot 提供了基于http、ssh、telnet等对运行时的项目进行监控。</span><br><span class="line">Spring Boot 降低学习成本，快速入手开发项目，没有繁琐的配置(这是是广大开发者梦寐以求的)</span><br></pre></td></tr></table></figure></p><h2 id="Spring-Boot-和Spring-Cloud区别"><a href="#Spring-Boot-和Spring-Cloud区别" class="headerlink" title="Spring Boot 和Spring Cloud区别"></a>Spring Boot 和Spring Cloud区别</h2><p><strong>Spring Cloud</strong><br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Spring Cloud 是一种云端分布式架构的解决框架(称为微服务)。</span><br><span class="line">Spring Cloud 是一个基于 Spring Boot 框架实现云微服务应用开发的一套工具.</span><br><span class="line">Spring Cloud 主要是专注于服务之间的通讯、熔断、监控等全局的微服务治理框架。</span><br><span class="line">Spring Cloud 是不能离开Spring Boot这个环境的，Spring Cloud必须依赖于Spring Boot，但是Spring Boot可以离开Spring Cloud独立使用开发项目。</span><br></pre></td></tr></table></figure></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p> 各位读者如果有更好的见解可以留言，我们一起学习。</p><p> 我们在不断的进步中，将会对<a href="">Spring Boot系列</a>进行深入的探究。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringMVC-、Spring-Boot-、SpringCloud-认识&quot;&gt;&lt;a href=&quot;#SpringMVC-、Spring-Boot-、SpringCloud-认识&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC 、Sprin
      
    
    </summary>
    
      <category term="后台" scheme="http://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/"/>
    
      <category term="Spring Boot" scheme="http://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/Spring-Boot/"/>
    
    
      <category term="Java" scheme="http://eirunye.github.io/tags/Java/"/>
    
      <category term="Spring Boot" scheme="http://eirunye.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://eirunye.github.io/2018/08/09/hello-world/"/>
    <id>http://eirunye.github.io/2018/08/09/hello-world/</id>
    <published>2018-08-08T16:13:15.515Z</published>
    <updated>2018-08-08T16:13:15.519Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
