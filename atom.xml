<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eirunye Activity</title>
  
  <subtitle>Notes</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://eirunye.github.io/"/>
  <updated>2018-09-01T17:26:35.452Z</updated>
  <id>http://eirunye.github.io/</id>
  
  <author>
    <name>Eirunye</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo搭建GitHub博客—打造炫酷的Next主题--高级(三)</title>
    <link href="http://eirunye.github.io/2018/09/02/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E6%89%93%E9%80%A0%E7%82%AB%E9%85%B7%E7%9A%84Next%E4%B8%BB%E9%A2%98%E2%80%94%E9%AB%98%E7%BA%A7%E2%80%94%E4%B8%89/"/>
    <id>http://eirunye.github.io/2018/09/02/Hexo搭建GitHub博客—打造炫酷的Next主题—高级—三/</id>
    <published>2018-09-01T17:22:43.000Z</published>
    <updated>2018-09-01T17:26:35.452Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo搭建GitHub博客--初级(二)</title>
    <link href="http://eirunye.github.io/2018/09/01/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E5%88%9D%E7%BA%A7%E2%80%94%E4%BA%8C/"/>
    <id>http://eirunye.github.io/2018/09/01/Hexo搭建GitHub博客—初级—二/</id>
    <published>2018-09-01T15:38:22.000Z</published>
    <updated>2018-09-01T17:41:00.653Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>上篇我们主要讲的是如何通过Hexo建站，并如何部署到GitHub上<a href="https://eirunye.github.io/2018/09/01/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E5%88%9D%E7%BA%A7%E4%B8%80/#more">Hexo搭建GitHub博客–初级(一)</a>。<br>大家不了解的话再看一下。本篇我接上上一篇继续进一步搭建Hexo博客。<br>本篇主要讲解的是如何进行配置我们<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo</a>的博客，开启旅程吧。</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-341ef9931265c1c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="Hexo.png"></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>我们来进行一些我们常用的配置，在跟myblog目录下<code>_config.yml</code>。可以查看<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">Hexo官网配置模块</a></p><h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>title</code></td><td>网站标题</td></tr><tr><td><code>subtitle</code></td><td>网站副标题</td></tr><tr><td><code>description</code></td><td>网站描述</td></tr><tr><td><code>author</code></td><td>您的名字</td></tr><tr><td><code>language</code></td><td>网站使用的语言</td></tr><tr><td><code>timezone</code></td><td>网站时区。Hexo 默认使用您电脑的时区。<a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones" target="_blank" rel="noopener">时区列表</a>。比如说：<code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。</td></tr></tbody></table><p>例如我的Hexo设计</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Eirunye Activity  #网站标题</span><br><span class="line">subtitle: Notes      #网站副标题</span><br><span class="line">description:  This is MyBlog  Notes      #详情</span><br><span class="line">keywords:</span><br><span class="line">author: Eirunye   #作者</span><br><span class="line">language: zh-CN # 语言</span><br><span class="line">timezone: UTC #时区</span><br></pre></td></tr></table></figure><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Directory</span><br><span class="line">source_dir: source</span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags #标签</span><br><span class="line">archive_dir: archives  #归档</span><br><span class="line">category_dir: categories #类别</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br></pre></td></tr></table></figure><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><p>查看以下列表，在<code>_config.yml</code>文件下查看相关属性。并进行修改为自己所想要的方式吧，这个就不一一进行分解了。</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>new_post_name</code></td><td>新文章的文件名称</td><td>:title.md</td></tr><tr><td><code>default_layout</code></td><td>预设布局</td><td>post</td></tr><tr><td><code>auto_spacing</code></td><td>在中文和英文之间加入空格</td><td>false</td></tr><tr><td><code>titlecase</code></td><td>把标题转换为 title case</td><td>false</td></tr><tr><td><code>external_link</code></td><td>在新标签中打开链接</td><td>true</td></tr><tr><td><code>filename_case</code></td><td>把文件名称转换为 (1) 小写或 (2) 大写</td><td>0</td></tr><tr><td><code>render_drafts</code></td><td>显示草稿</td><td>false</td></tr><tr><td><code>post_asset_folder</code></td><td>启动 <a href="https://hexo.io/zh-cn/docs/asset-folders" target="_blank" rel="noopener">Asset 文件夹</a></td><td>false</td></tr><tr><td><code>relative_link</code></td><td>把链接改为与根目录的相对位址</td><td>false</td></tr><tr><td><code>future</code></td><td>显示未来的文章</td><td>true</td></tr><tr><td><code>highlight</code></td><td>代码块的设置</td></tr></tbody></table><h2 id="分类-amp-标签"><a href="#分类-amp-标签" class="headerlink" title="分类&amp;标签"></a>分类&amp;标签</h2><p>这里默认就行，并不影响我们接下来的一些操作。</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>default_category</code></td><td>默认分类</td><td>uncategorized</td></tr><tr><td><code>category_map</code></td><td>分类别名</td><td></td></tr><tr><td><code>tag_map</code></td><td>标签别名</td></tr></tbody></table><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p>在分页中一般情况默认就好，10篇文章一页，不错的。</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>per_page</code></td><td>每页显示的文章量 (0 = 关闭分页功能)</td><td>10</td></tr><tr><td><code>pagination_dir</code></td><td>分页目录</td><td><code>page</code></td></tr></tbody></table><h1 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h1><h2 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>如：创建hello-world<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new hello-world</span><br></pre></td></tr></table></figure></p><p>如果不添加title，默认就是标题<code>title: hello-world</code>。<br>这里注意一下，如果创建带有中文的路径名称时，生成静态页面<code>hexo g</code>可能会报错。那么可以查看<a href="https://www.jianshu.com/p/9afb3257133b" target="_blank" rel="noopener">Hexo 部署的时候发生错误解决方案</a></p><h2 id="修改文章"><a href="#修改文章" class="headerlink" title="修改文章"></a>修改文章</h2><p>创建的文章在<code>source/_posts</code> 文件夹下。我试着对<code>hello-world.md</code>进行修改。<br>修改如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">date: 2018-09-01</span><br><span class="line">tags:</span><br><span class="line">- Hexo</span><br><span class="line">categories:</span><br><span class="line">- Hexo</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><h2 id="编写文章"><a href="#编写文章" class="headerlink" title="编写文章"></a>编写文章</h2><p>在这里写文章，和平时一样完全支持Markdown语法，加油吧。</p><h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a><a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题</a></h1><p>这是我们重点需要修改的东西，为了能达到自己喜欢的布局结构，你需要在这里进行各种配置哦，对博客的美化，还有修改成为自己独特风格的博客。<br>Hexo提供给我们许多模板主题，请查看<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo主题官网</a>下载自己喜欢的主题，接下来我会重点的讲解我所配置的主题。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>学习本篇文章我们知道了如何进行配置博客一些常用的功能，如何进行分类，如何创建文章。<br>接下来让我们进入到下一个阶段，主要是如何打造属于自己的博客风格，请进入下一站吧。<br><a href=""><strong>Hexo搭建GitHub博客—打造炫酷的Next主题–高级(三)</strong></a>。</p><h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p>大家可以查看关于Hexo相关的文章。</p><p><a href="https://eirunye.github.io/2018/09/01/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E5%88%9D%E7%BA%A7%E4%B8%80/#more"><strong>Hexo搭建GitHub博客–初级(一)</strong></a></p><p><a href="https://eirunye.github.io/2018/09/01/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E5%88%9D%E7%BA%A7%E2%80%94%E4%BA%8C/#more"><strong>Hexo搭建GitHub博客–初级(二)</strong></a></p><p><a href="https://eirunye.github.io/2018/09/02/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E6%89%93%E9%80%A0%E7%82%AB%E9%85%B7%E7%9A%84Next%E4%B8%BB%E9%A2%98%E2%80%94%E9%AB%98%E7%BA%A7%E2%80%94%E4%B8%89/#more"><strong>Hexo搭建GitHub博客—打造炫酷的Next主题–高级(三)</strong></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;上篇我们主要讲的是如何通过Hexo建站，并如何部署到GitHub上&lt;a href=&quot;https://eirunye.github.io/20
      
    
    </summary>
    
      <category term="Hexo" scheme="http://eirunye.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://eirunye.github.io/tags/Hexo/"/>
    
      <category term="Next" scheme="http://eirunye.github.io/tags/Next/"/>
    
      <category term="GitHub" scheme="http://eirunye.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建GitHub博客--初级(一)</title>
    <link href="http://eirunye.github.io/2018/09/01/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E5%88%9D%E7%BA%A7%E4%B8%80/"/>
    <id>http://eirunye.github.io/2018/09/01/Hexo搭建GitHub博客—初级一/</id>
    <published>2018-09-01T15:17:30.000Z</published>
    <updated>2018-09-01T17:28:58.555Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>由于平时自己喜欢记录开发笔记，写一些博客，但是总想自己搭建属于自己的博客，在网上查阅了一下，发现<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>在GitHub或者是码云上搭建博客非常给力。<br>接下来让我们一起进入<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>搭建博客学习吧。</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-341ef9931265c1c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="Hexo.png"></p><h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a></h1><h2 id="什么是Hexo？"><a href="#什么是Hexo？" class="headerlink" title="什么是Hexo？"></a>什么是Hexo？</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>当我们在遇到一个新东西的时候，进入其官网能帮助我们解决很多问题。关于什么是Hexo？还有一些关于Hexo的问题，大家进入<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官网</a>进行查看，这里我就不多说咯。</p><h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><p>我们在使用Hexo之前需要准备一些东西，也就是需要安装一些我们必需的。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装所需"><a href="#安装所需" class="headerlink" title="安装所需"></a>安装所需</h3><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：</p><ul><li><a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a></li><li><a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a></li><li>cnpm 如果<code>npm</code>运行出错就安装<code>cnpm</code>国内镜像<br>如果没有安装那么就需要安装咯，大家可以看看<a href="https://www.jianshu.com/writer#/notebooks/10827440/notes/31436824" target="_blank" rel="noopener">Vue-cli项目创建</a>如何检查<a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a>、<a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a>和<code>cnpm</code>是否安装成功。</li></ul><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm或者cnpm 安装 Hexo。<br>打开Git Bash here，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br><span class="line">或者</span><br><span class="line">$ cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>检查是否安装Hexo完成,查询是否成功，显示hexo-cli 版本就说明成功了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo -V</span><br></pre></td></tr></table></figure></p><h1 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h1><p>安装一切所需的程序后，我们可以开始建站了，就是创建我们的博客,大家也可以进入<a href="https://hexo.io/zh-cn/docs/setup" target="_blank" rel="noopener">建站官网</a>查看。<br>新建一个文件夹，来管理我们的博客项目，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><h2 id="运行命令"><a href="#运行命令" class="headerlink" title="运行命令"></a>运行命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ cnpm install</span><br></pre></td></tr></table></figure><ul><li>注：<folder>是表示建站的博客项目名<br>打开Git Bash here，输入：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init myblog</span><br></pre></td></tr></table></figure></folder></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3012005-b9f23bb1631d76e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="建站.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd myblog</span><br><span class="line">$ cnpm install</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3012005-7b2253a00ae12e11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="建站完成.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-2f2bb0a75cb6cb46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/400" alt="myblog目录.png"></p><h2 id="访问URL"><a href="#访问URL" class="headerlink" title="访问URL"></a>访问URL</h2><p>我们可以运行看看Hexo是什么样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">或者</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-c4566376a59b96c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="运行.png"></p><p>访问URL<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:4000/</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-52f623758fa37f13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="访问.png"></p><p>好了，到这里你已经学会了通Hexo然后创建博客了，接下来我们将会分析如何将我们的博客上传到我们的GitHub服务器上呢？<br>我们如何修改我们的博客让我们的博客漂亮而且修改不同的主题来美化我们的博客呢?<br>紧跟着脚步。</p><h1 id="上传到GitHub服务器"><a href="#上传到GitHub服务器" class="headerlink" title="上传到GitHub服务器"></a>上传到GitHub服务器</h1><h2 id="GitHub创建repositories"><a href="#GitHub创建repositories" class="headerlink" title="GitHub创建repositories"></a>GitHub创建repositories</h2><p> 进入<a href="https://github.com/" target="_blank" rel="noopener">GitHub官网</a>中浏览器输入<code>https://github.com/</code>,如果还没有账号就创建一个账号就好了，这里不教大家怎么注册账号了。登录自己的账号。直接new repositories 或者进入You repositories 在new repositories</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-9643d73b2a601e2a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="repository_1.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-884ba47d0d035bc7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="repository_2.png"></p><p>进入到创建 repositories 页面来,这里很重要，一定要注意哦！必须将新建的repository的名字为: <strong><code>You account name</code></strong>.github.io。其他默认就好了</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-fa33b440fd84624c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="repository_3.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-5863e3f089bc239a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="repository_4.png"></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>GitHub的Repository创建好后。我们在回到本地的Hexo的Myblog项目中，我们用代码编辑器工具打开，我这里用的是<a href="https://www.jetbrains.com/webstorm/" target="_blank" rel="noopener">Webstorm</a>,找到在项目的根目录下<strong>_config.yml</strong>找到 <strong>deploy</strong>标签</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-1e380b97ef75ea93.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="_config.yml.png"></p><p>在该文件下面添加</p><ul><li>注：<code>repository: https://github.com/eirunye/eirunye.github.io.git</code> 是自己刚刚创建You account name.github.io 的repository，在<code>Clone with HTTPS</code>里面，复制粘贴就好咯。冒号后面记得空格哦。<code>branch</code> 后面是<code>master</code>就好了。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/eirunye/eirunye.github.io.git #复制过来</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3012005-16f89dd25c96aeee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="_config.yml_0.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-3a90ca707717cc04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="_config.yml_repository.png"></p><p>在<code>_config.yml</code>找到<code>url</code>进行修改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url: http://eirunye.github.io # eirunye是我的账号，修改为自己的账号</span><br></pre></td></tr></table></figure></p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>到这里就差不到了，接下来我们需要执行一些命令，将我们的博客部署到GitHub上了，惊喜将会到来了。<br>打开Git Bash Here进入myblog 根目录下，首先我们需要安装一下 <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a> 不然可能出现错误无法部署成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后在执行以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></p><p>或者简写方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></p><p>部署成功如下显示</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-3da4ba848a8df404.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="部署成功.png"></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>我们进行访问<code>https://eirunye.github.io/</code><br>和 <code>http://localhost:4000/</code>一样的页面说明是已经成功。</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-cb4c8c8a925effc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="部署成功1.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我们已经从如何使用Hexo到部署上GitHub上，没什么困难，需要我们对一些命令行的操作，还有一些需要我们必须注意的，一定要小心，不然就出错了。<br>当然了，我们这里只是教会大家如何使用Hexo，和部署到GitHub上，我们还未对Hexo进行一些我们对于博客的美化，还有修改成为自己独特风格的博客。希望我们继续加油吧。接下来的我们将在下一章讲到哦，请查看<a href="https://www.jianshu.com/writer#/notebooks/10827440/notes/33161742/preview" target="_blank" rel="noopener"><strong>Hexo搭建GitHub博客–初级(二)</strong></a>。</p><h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p>大家也可以查看关于Hexo相关文章。</p><p><a href="https://eirunye.github.io/2018/09/01/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E5%88%9D%E7%BA%A7%E4%B8%80/#more"><strong>Hexo搭建GitHub博客–初级(一)</strong></a></p><p><a href="https://eirunye.github.io/2018/09/01/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E5%88%9D%E7%BA%A7%E2%80%94%E4%BA%8C/#more"><strong>Hexo搭建GitHub博客–初级(二)</strong></a></p><p><a href="https://eirunye.github.io/2018/09/02/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E6%89%93%E9%80%A0%E7%82%AB%E9%85%B7%E7%9A%84Next%E4%B8%BB%E9%A2%98%E2%80%94%E9%AB%98%E7%BA%A7%E2%80%94%E4%B8%89/#more"><strong>Hexo搭建GitHub博客—打造炫酷的Next主题–高级(三)</strong></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;由于平时自己喜欢记录开发笔记，写一些博客，但是总想自己搭建属于自己的博客，在网上查阅了一下，发现&lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="Hexo" scheme="http://eirunye.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://eirunye.github.io/tags/Hexo/"/>
    
      <category term="Next" scheme="http://eirunye.github.io/tags/Next/"/>
    
      <category term="GitHub" scheme="http://eirunye.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>策略模式</title>
    <link href="http://eirunye.github.io/2018/09/01/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://eirunye.github.io/2018/09/01/策略模式/</id>
    <published>2018-08-31T17:24:32.000Z</published>
    <updated>2018-09-01T10:23:37.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>1.学习本篇博文，我们知道在什么场景下使用策略模式。<br>2.策略模式的优缺点。<br>3.策略模式的思想。</p><h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p> 某公司需要每个周五每名员工都要提交周报，在该公司可以提交周报的行为或者“算法”有：邮箱提交、SVN、Git后两种一般是开发部门使用的(刚开始还没有Git提交方式)。<br> 那么在该场景中我们是如何设计业务逻辑呢？</p><p> 你可能这么想，我用继承的方式多好，在一个超类中都定义有邮箱提交，SVN提交，然后具体角色去继承，然后分别实现这些方法，在进行调用。<br> 但是你是不是忽略了一个问题，一个人事部门的前台小姐姐并不会SVN提交方式，你确实给她也拥有这样的方式了，这不是明显的设计漏洞吗？<br> 而且当你使用这样的方式的时候，如果开发部门经理，又提出新的想法添加了Git提交方式，那么你是不是需要修改了很多代码了呢？牵一发而动全身啊<br> 子类的代码重复到你崩溃了，而且很多部门使用的提交方式不同，我们并不需要知道其他部门的提交方式等等。<br> 所以继承很难解决我们现在的问题了。</p><p> 那么我们应该怎么设计呢？<br> 答案就是下文</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="什么是策略模式？"><a href="#什么是策略模式？" class="headerlink" title="什么是策略模式？"></a>什么是策略模式？</h2><p>  策略模式是：定义了算法族，分别封装起来，让其相互替换，相互独立，为达到算法动态修改的角色提供了独立。</p><h2 id="为什么需要策略模式？"><a href="#为什么需要策略模式？" class="headerlink" title="为什么需要策略模式？"></a>为什么需要策略模式？</h2><p> 1.从定义可以看出策略模式是定义了行为“算法”族，将其封装起来，给用户使用的，如果算法改变，那么只需添加或者修改算法方式便能解决问题了，而无需修改其他原有的行为“算法”，因为他们是相互独立的。<br> 2.对客户隐藏具体行为“算法”的实现细节，彼此之间相互独立。<br> 3.我们的场景需要完全符合策略模式，封装了不同的提交行为“算法”。</p><h2 id="进入代码分析"><a href="#进入代码分析" class="headerlink" title="进入代码分析"></a>进入代码分析</h2><blockquote><p>我们先来看一下这个UML类图进行分析</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/3012005-b7dcbc207bffa21b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="stategy.png"></p><blockquote><p>具体实现步骤</p></blockquote><p>1.定义一个行为“算法”，该行为“算法”是一个抽象类或者是接口<br>2.各种独立的行为去实现该行为“算法”接口<br>3.定义一个角色，是一个抽象超类或者接口<br>4.超类角色里面有一个封装的行为或者是“算法”的属性<br>5.定义一个方法进行委托该行为或者“算法”<br>6.具体的角色继承超类角色，并实现抽象方法</p><blockquote><p>具体代码分析</p></blockquote><p>SubmissionBehavior 接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Author Eirunye</span><br><span class="line"> * Created by on 2018/8/31.</span><br><span class="line"> * Describe 定义了一个提交的行为称为一簇&quot;算法&quot;</span><br><span class="line"> * 这可以是一个抽象类火或者是一个接口</span><br><span class="line"> */</span><br><span class="line">public interface SubmissionBehavior &#123;</span><br><span class="line"></span><br><span class="line">     void commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>MailCommitBehavior.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Author Eirunye</span><br><span class="line"> * Created by on 2018/8/31.</span><br><span class="line"> * Describe 邮箱提交行为</span><br><span class="line"> */</span><br><span class="line">public class MailCommitBehavior implements SubmissionBehavior&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void commit() &#123;</span><br><span class="line">        System.out.println(&quot;邮箱提交周报行为&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Character.class 抽象类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Author Eirunye</span><br><span class="line"> * Created by on 2018/8/31.</span><br><span class="line"> * Describe 定义一个抽象超类角色</span><br><span class="line"> * 或者这里也可以是接口</span><br><span class="line"> */</span><br><span class="line">public abstract class Character &#123;</span><br><span class="line"></span><br><span class="line">    //一个角色有一个这样的行为</span><br><span class="line">    public SubmissionBehavior submissionBehavior;</span><br><span class="line"></span><br><span class="line">    public abstract void display();</span><br><span class="line"></span><br><span class="line">    //完成提交行为 委托</span><br><span class="line">    public void completeCommit()&#123;</span><br><span class="line">        submissionBehavior.commit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //动态设置行为</span><br><span class="line">    public void setSubmissionBehavior(SubmissionBehavior submissionBehavior) &#123;</span><br><span class="line">        this.submissionBehavior = submissionBehavior;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Coder.class 具体的角色<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Author Eirunye</span><br><span class="line"> * Created by on 2018/8/31.</span><br><span class="line"> * Describe 开发员</span><br><span class="line"> */</span><br><span class="line">public class Coder extends Character&#123;</span><br><span class="line"></span><br><span class="line">    public Coder() &#123;</span><br><span class="line">        submissionBehavior = new SVNCommitBehavior();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void display() &#123;</span><br><span class="line">        System.out.println(&quot;刚开始使用的周报提交方式是SVN&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>测试</p></blockquote><p>Test.class<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Author Eirunye</span><br><span class="line"> * Created by on 2018/8/31.</span><br><span class="line"> * Describe 测试</span><br><span class="line"> */</span><br><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //创建一个码农提交方式</span><br><span class="line">        Character character = new Coder();</span><br><span class="line">        character.completeCommit();</span><br><span class="line"></span><br><span class="line">        //创建一个前台小姐姐提交方式</span><br><span class="line">        Character character1 = new ReceptionSister();</span><br><span class="line">        character1.completeCommit();</span><br><span class="line"></span><br><span class="line">        //某天开发部们经理说了以后开发部要统一使用Git方式提交周报了，</span><br><span class="line">        //那么如下看看发生什么情况</span><br><span class="line">        Character character2 = new Coder();</span><br><span class="line">        character2.setSubmissionBehavior(new GitCommitBehavior());//动态设置提交方式</span><br><span class="line">        character2.completeCommit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Java\jdk1.8.0_161\bin\...</span><br><span class="line">SVN提交行为</span><br><span class="line">邮箱提交周报行为</span><br><span class="line">新增的Git提交周报行为</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><strong><a href="https://github.com/eirunye/StrategyPattern_Design" target="_blank" rel="noopener">策略模式案例代码</a></strong></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我们学习了策略模式，在生活中是经常运用到的，本例只是一个场景。<br>我们在设计开发的时候一定要“多用组合，少用继承”。<br>针对接口变成，而不针对实现编程。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>1.策略模式提供了管理相关的算法族的办法。策略类的等级结构定义了一个算法或行为族。通过使用继承抽象超类可以把公共的代码转移到抽象超类父类里面，从而避免重复的代码。<br>2.通过实现接口的方式定义具体的行为“算法”，从而减少子类继承父类相互混淆的行为。<br>3.使用策略模式可以避免使用多重条件转移语句，动态的改变行为，而各个具体角色行为“算法”相互独立。</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>1.客户端必须知道所有的具体角色，并决定使用哪个算法族，这样在设计开始时是需要花费时间是封装“算法”族的，策略模式只适用于客户端知道所有的算法或行为的情况。<br>2.策略模式造成很多具体的角色，每个具体角色就得创建一个新的类，这样类无法相互联系，所以无法共享。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;1.学习本篇博文，我们知道在什么场景下使用策略模式。&lt;br&gt;2.策略模式的优缺点。&lt;br&gt;3.策略模式的思想。&lt;/p&gt;
&lt;h1 id=&quot;场景
      
    
    </summary>
    
      <category term="设计模式" scheme="http://eirunye.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="策略模式" scheme="http://eirunye.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="http://eirunye.github.io/tags/Java/"/>
    
      <category term="设计模式" scheme="http://eirunye.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="策略模式" scheme="http://eirunye.github.io/tags/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>观察者模式</title>
    <link href="http://eirunye.github.io/2018/09/01/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://eirunye.github.io/2018/09/01/观察者模式/</id>
    <published>2018-08-31T17:24:02.000Z</published>
    <updated>2018-09-01T08:06:22.436Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>1.学习本篇博文，我们知道在什么场景下使用观察者模式。<br>2.观察者模式的优缺点。<br>3.观察者模式给我们在今后开发中什么思想。</p><h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>某家科技公司目前在开发一个项目，设计小组需要上报项目的进度给部门经理，主要有两个模块更新原有的业务模块进度和添加新业务的模块完成进度。<br>那么部门经理需要什么途径能最快的得到进度的信息呢？或者可能是项目总监也想参与，去获取到最新的进展情况呢？我们改如何去考虑这个业务呢？</p><p>很多时候我们就会想到继承去解决这一情况，毕竟OO编写思想时刻影响这一我们，但是如果某天项目经理出差了，他不想看项目进度了，那我们又改怎么办呢？</p><p>我们能不能就是设计一个业务，让能想知道该进度的人，不管什么时候，只要有开发者上报进度的时候就一下他就得到进度的信息，而他无需去关系这个过程。</p><p>你是否能想到合适的解决方案呢？</p><p>答案就在下文中，你准备好了吗？</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="什么是观察者模式？"><a href="#什么是观察者模式？" class="headerlink" title="什么是观察者模式？"></a>什么是观察者模式？</h2><p>观察者模式定义一系列对象之间的一对多关系，当一个对象改变、更新状态时，依赖它的都会收到通知改变或者更新。</p><h2 id="为什么需要观察者模式"><a href="#为什么需要观察者模式" class="headerlink" title="为什么需要观察者模式?"></a>为什么需要观察者模式?</h2><p>从定义中我们可以知道观察者模式当对象改变时，其他依赖的对象都会收到改变信息的状态。</p><p>从本例分析项目经理想知道进度情况，他只需要绑定进度，他就可以知道进度信息了，而无需关心如何操作，如果再增加一个想知道进度信息老板呢？也很容易，也让老板绑定进度信息数据就好了，不想知道的时候就解除绑定，就不在获取进度信息了。</p><p>所以在本案例场景中，观察者是我们这个场景非常合适的设计。</p><h1 id="如何实现观察者模式？"><a href="#如何实现观察者模式？" class="headerlink" title="如何实现观察者模式？"></a>如何实现观察者模式？</h1><h2 id="自定义观察者模式"><a href="#自定义观察者模式" class="headerlink" title="自定义观察者模式"></a>自定义观察者模式</h2><h3 id="实现如下"><a href="#实现如下" class="headerlink" title="实现如下"></a>实现如下</h3><blockquote><p>我们先来看一下这个UML类图进行分析</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/3012005-ee86c1da81dd578e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="observer.png"></p><blockquote><p>具体实现步骤</p></blockquote><p>1.构造一个主题Subject或者是一个被观察者Observeable，这是一个接口或者是抽象类</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> public interface Subject &#123;</span><br><span class="line">  //注册观察者</span><br><span class="line">  void registerObserver(Observer observe);</span><br><span class="line">  //解除绑定观察者</span><br><span class="line">  void unRegisterObserver(Observer observe);</span><br><span class="line">  //更新数据</span><br><span class="line">  void notifyObservers();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 2.构建一个被观察者实现该主题接口如本例的 DevelopmentProgressData.class，这里是进度信息数据<br>  在registerObserver(Observer o);//方法中将观察者添加到注册列表中<br>  在unRegisterObserve(Observer o);//删除观察者<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class DevelopmentProgressData implements Subject &#123;</span><br><span class="line"> @Override</span><br><span class="line">   public void registerObserver(Observer observer) &#123;</span><br><span class="line">       //将观察者添加到列表中</span><br><span class="line">       arrayObserve.add(observer);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public void unRegisterObserver(Observer observer) &#123;</span><br><span class="line">       int i = arrayObserve.indexOf(observer);</span><br><span class="line">       if (i &gt;= 0) &#123;</span><br><span class="line">           //将观察者从列表中解除</span><br><span class="line">           arrayObserve.remove(i);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   //通知所以观察者数据更新了</span><br><span class="line">   @Override</span><br><span class="line">   public void notifyObservers() &#123;</span><br><span class="line"></span><br><span class="line">       for (int i = 0; i &lt; arrayObserve.size(); i++) &#123;</span><br><span class="line">           Observer o = (Observer) arrayObserve.get(i);</span><br><span class="line">           o.update(completeProgress, updateProgress);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.构建一个观察者接口Observer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface Observer &#123;</span><br><span class="line">   //更新数据</span><br><span class="line">   void update(int completeProgress, int updateProgress);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.可构建一个展示数据的接口（可忽略）<br> 有展示数据的方法，观察者要实现这个方法 查看本例的 DisplaySchedule<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface DisplaySchedule &#123;</span><br><span class="line">    void display();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5.定义观察者(模拟该类就是产品经理观察者)，需实现接口Observes、DisplaySchedule(可忽略)，</p><p><1>、将主题Subject设置为观察者的属性，并将其作为观察者的构造函数如 ProductManagerObserver.class<br>调用  developmentProgressSubject.registerObserver(this);将观察者注册到观察列表中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class ProductManagerObserver implements Observer, DisplaySchedule &#123;</span><br><span class="line"></span><br><span class="line">    private int completeProgress;//完成进度</span><br><span class="line">    private int updateProgress;//更新进度</span><br><span class="line">    //将主题当成观察者的属性</span><br><span class="line">    private Subject developmentProgressSubject;</span><br><span class="line"></span><br><span class="line">    public ProductManagerObserver(Subject developmentProgressSubject) &#123;</span><br><span class="line">        this.developmentProgressSubject = developmentProgressSubject;</span><br><span class="line">        //注册该观察者</span><br><span class="line">        developmentProgressSubject.registerObserver(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void display() &#123;</span><br><span class="line">        System.out.println(&quot;产品经理管理者显示当前数据 完成进度为: &quot; + completeProgress + &quot;更新修改进度为:&quot; + updateProgress);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void update(int completeProgress, int updateProgress) &#123;</span><br><span class="line">        this.completeProgress = completeProgress;</span><br><span class="line">        this.updateProgress = updateProgress;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></1></p><blockquote><p>测试</p></blockquote><p>RunTest.class<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class RunTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        DevelopmentProgressData developmentProgressData = new DevelopmentProgressData();</span><br><span class="line">        ProductManagerObserver productManagerObserver = new ProductManagerObserver(developmentProgressData);</span><br><span class="line">        ProjectManagerObserver projectManagerObserver = new ProjectManagerObserver(developmentProgressData);</span><br><span class="line">        developmentProgressData.setCurrentData(34, 45);</span><br><span class="line">        //当项目经理出差了，不观察项目进度了就取消订阅了</span><br><span class="line">        developmentProgressData.unRegisterObserver(projectManagerObserver);</span><br><span class="line">        //当前只有产品经理获取到数据</span><br><span class="line">        developmentProgressData.setCurrentData(46, 90);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>输出结果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Java\jdk1.8.0_161\bin\...</span><br><span class="line">产品经理管理者显示当前数据 完成进度为: 34更新修改进度为:45</span><br><span class="line">项目管理真显示当前数据完成进度为: 34更新修改进度为:45</span><br><span class="line">产品经理管理者显示当前数据 完成进度为: 46更新修改进度为:90</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h2 id="根据java-util-observerable包下的Observerable-class实现观察者模式功能"><a href="#根据java-util-observerable包下的Observerable-class实现观察者模式功能" class="headerlink" title="根据java.util.observerable包下的Observerable.class实现观察者模式功能"></a>根据java.util.observerable包下的Observerable.class实现观察者模式功能</h2><h3 id="实现如下-1"><a href="#实现如下-1" class="headerlink" title="实现如下"></a>实现如下</h3><blockquote><p>具体实现步骤</p></blockquote><p> 1.首先观察者需要实现java.util.Observer,然后将其被观察者=&gt;java.util.Observaerable作为其观察者的构造函数</p><p>   <1>、通过observeable.addObserver(this)添加观察者<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> public class BossMngObserver implements Observer, DisplayIllustrate &#123;</span><br><span class="line"></span><br><span class="line">  private Observable observable;</span><br><span class="line">  private int valuableProductNum; //库存有贵重产品</span><br><span class="line">  private int normalProductNum;   //普通产品</span><br><span class="line"></span><br><span class="line">  public BossMngObserver(Observable observable) &#123;</span><br><span class="line">      this.observable = observable;</span><br><span class="line">      observable.addObserver(this);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public void disPlay() &#123;</span><br><span class="line">      System.out.println(&quot;总经理观察数据改变:贵重产品数量: &quot; + valuableProductNum + &quot;普通产品数量： &quot; + normalProductNum);</span><br><span class="line">  &#125;</span><br><span class="line"> //&lt;2&gt;、实现 Observer更新数据方法</span><br><span class="line"> //看本例的包下的observe的三个类</span><br><span class="line">  @Override</span><br><span class="line">  public void update(Observable o, Object arg) &#123;</span><br><span class="line">      if (o instanceof InventoryData) &#123;</span><br><span class="line">          InventoryData inventoryData = (InventoryData) o;</span><br><span class="line">          this.valuableProductNum = inventoryData.getValuableProductNum();</span><br><span class="line">          this.normalProductNum = inventoryData.getNormalProductNum();</span><br><span class="line">          disPlay();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></1></p><p> 2.被观察者需要继承java.util.Observerable,</p><p>   <1>、然后先调用setChanged()方法</1></p><p>   <2>、在进行调用notifyObserves()更新数据</2></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> public class InventoryData extends Observable &#123;</span><br><span class="line"></span><br><span class="line">   private int valuableProductNum; //库存有贵重产品</span><br><span class="line">   private int normalProductNum;   //普通产品</span><br><span class="line"></span><br><span class="line">   public void setCurrentData(int valuableProductNum, int normalProductNum) &#123;</span><br><span class="line">       this.valuableProductNum = valuableProductNum;</span><br><span class="line">       this.normalProductNum = normalProductNum;</span><br><span class="line">       statusChange();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   private void statusChange() &#123;</span><br><span class="line">   //先调用 setChanged();</span><br><span class="line">       setChanged();</span><br><span class="line">       notifyObservers();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试<br>3.Test.class<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        InventoryData inventoryData = new InventoryData();</span><br><span class="line"></span><br><span class="line">        ValuableInfoMngObserver io = new ValuableInfoMngObserver(inventoryData);</span><br><span class="line"></span><br><span class="line">        //io.deleteObserve();</span><br><span class="line">        inventoryData.setCurrentData(20, 30);</span><br><span class="line"></span><br><span class="line">        NormalInfoMngObserver no = new NormalInfoMngObserver(inventoryData);</span><br><span class="line"></span><br><span class="line">        //no.deleteObserver();</span><br><span class="line">        inventoryData.setCurrentData(15, 27);</span><br><span class="line"></span><br><span class="line">        BossMngObserver bossMngObserver = new BossMngObserver(inventoryData);</span><br><span class="line"></span><br><span class="line">        inventoryData.setCurrentData(10, 50);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><strong><a href="https://github.com/eirunye/Oberser_Design" target="_blank" rel="noopener">观察者模式案例代码</a></strong></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>观察者模式的让我们知道了在设计开发的时候一定要“多用组合，少用继承”。</p><p>我们设计开发是应该是针对接口变成，而不针对实现编程。</p><p>在java.util.*下的Observer和Observable可以实现观察者，但是Observable是一个类，这样我们是不违背了“多用组合少用继承”的OO编程思想，是的没错在java.util.Observable类违背了该规则。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;1.学习本篇博文，我们知道在什么场景下使用观察者模式。&lt;br&gt;2.观察者模式的优缺点。&lt;br&gt;3.观察者模式给我们在今后开发中什么思想。&lt;/
      
    
    </summary>
    
      <category term="设计模式" scheme="http://eirunye.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="观察者模式" scheme="http://eirunye.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="http://eirunye.github.io/tags/Java/"/>
    
      <category term="设计模式" scheme="http://eirunye.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="观察者模式" scheme="http://eirunye.github.io/tags/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 项目如何搭建(四)</title>
    <link href="http://eirunye.github.io/2018/08/22/Spring-Boot-%E9%A1%B9%E7%9B%AE%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA-%E5%9B%9B/"/>
    <id>http://eirunye.github.io/2018/08/22/Spring-Boot-项目如何搭建-四/</id>
    <published>2018-08-22T14:13:20.000Z</published>
    <updated>2018-08-24T09:23:18.843Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="Spring-Boot项目的搭建，常用实例分析"><a href="#Spring-Boot项目的搭建，常用实例分析" class="headerlink" title="Spring Boot项目的搭建，常用实例分析"></a>Spring Boot项目的搭建，常用实例分析</h2><p>在项目开发中我们一般情况下提供给APP或者网站应用的接口一般的请求方式是<strong><em>GET、POST、PUT</em></strong>等等，那么接下来我们将通过一个简单的案例来进行分析，带领大家进入Spring Boot项目的开发，创建(层级分明，思路请析)、编码，主要是 <strong><em>搭建项目</em></strong> 等。</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-9ef32ee8190ef780.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="Spring Boot.jpg"></p><h1 id="项目结构创建"><a href="#项目结构创建" class="headerlink" title="项目结构创建"></a>项目结构创建</h1><h2 id="项目目录如下-包层级分明"><a href="#项目目录如下-包层级分明" class="headerlink" title="项目目录如下,包层级分明"></a>项目目录如下,包层级分明</h2><p>一般如下图所示:</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-e971c11aed6ab6dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="项目包级结构.png"></p><p>在<strong><em>src</em></strong>目录下的<strong><em>main/java</em></strong>里面的创建的包级目录,进行分析如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/============================</span><br><span class="line">|-- controller：主要是控制器，通过注解@RestController，Spring4之后新加的注解，原来返回json数据格式，通@RequestMapping，设置访问URI。</span><br><span class="line">|-- enums: 主要是封装返回码的提示。</span><br><span class="line">|-- exception: 主要是封装异常打印输出。</span><br><span class="line">|-- handle: 捕捉异常处理</span><br><span class="line">|-- model：实体类</span><br><span class="line">|-- repository：Jpa使用封装</span><br><span class="line">|-- service：逻辑处理封装，返回数据给Controller类</span><br><span class="line">|-- utils：封装一些工具类</span><br><span class="line">|-- 其他：在开发中还有一些需要创建其他包，根据自己需求。</span><br><span class="line">\============================</span><br></pre></td></tr></table></figure></p><h2 id="主要代码分析"><a href="#主要代码分析" class="headerlink" title="主要代码分析"></a>主要代码分析</h2><p>这里主要是写一个简单的事例进行参考包层级之间的调用。</p><p>代码注解如下:</p><p> <strong><em>EirunyeController.class</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/Eirunye&quot;) //设置请求的父级标签URI</span><br><span class="line">public class EirunyeController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired //注:Autowired是按类型进行装配，可获取它所装配类的属性</span><br><span class="line">    EirunyeService eirunyeService;</span><br><span class="line">    /**</span><br><span class="line">     * 访问返回数据</span><br><span class="line">     * @return Result&lt;EiBean&gt;</span><br><span class="line">     * @throws Exception 出现异常处理</span><br><span class="line">     */</span><br><span class="line">    @GetMapping(value = &quot;/bean&quot;)</span><br><span class="line">    public Result&lt;EiBean&gt; getEiBeanData() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        return eirunyeService.getEiBeanData();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> <strong><em>EirunyeService.class</em></strong><br>@Service 用于标注业务层组件：将当前类注册为Spring的Bean</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Service // 用于标注业务层组件：将当前类注册为Spring的Bean</span><br><span class="line">public class EirunyeService &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @return Result&lt;EiBean&gt;</span><br><span class="line">     * @throws EirunyeException 异常处理</span><br><span class="line">     */</span><br><span class="line">    public Result&lt;EiBean&gt; getEiBeanData() throws EirunyeException&#123;</span><br><span class="line">        EiBean eiBean = new EiBean();</span><br><span class="line">        eiBean.setName(&quot;Eirunye&quot;);</span><br><span class="line">        eiBean.setAge(19);</span><br><span class="line">        eiBean.setHobby(&quot;Java Spring Boot&quot;);</span><br><span class="line">        return ResultUtil.globalInfo(ResultEnum.SUCCESS,eiBean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>EiBean.class</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class EiBean &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    private String hobby;</span><br><span class="line">//get/set...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p><strong><em>在接下来会有一篇博文会详细讲解在开发中我们如何进行测试(#)，这里只进行一些简单测试</em></strong></p><p>在这里我们只需要进行一下访问结果，如下:</p><p>Postman请求如下:</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-187753fe7538a27d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="Postman_返回.png"></p><p>IDEA请求如下:</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-58c7ec1b75c3069b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="返回成功.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-db619b9a5da650ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="返回数据结果.png"></p><blockquote><p><strong>下载本例搭建<a href="https://github.com/eirunye/SpringBoot_CreateProject" target="_blank" rel="noopener">项目demo</a></strong></p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>  1.学习本篇，我们知道如何搭建一个好的项目工程,常用的功能架构</p><p>  2.这是创建Spring Boot 项目所需要分层的，希望对大家有所帮助</p><p>  3.大家有什么疑问可以留言哦！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;h2 id=&quot;Spring-Boot项目的搭建，常用实例分析&quot;&gt;&lt;a href=&quot;#Spring-Boot项目的搭建，常用实例分析&quot; class
      
    
    </summary>
    
      <category term="后台" scheme="http://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/"/>
    
      <category term="Spring Boot" scheme="http://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/Spring-Boot/"/>
    
    
      <category term="Java" scheme="http://eirunye.github.io/tags/Java/"/>
    
      <category term="Spring Boot" scheme="http://eirunye.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 配置文件设置(三)</title>
    <link href="http://eirunye.github.io/2018/08/20/Spring-Boot-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AE%BE%E7%BD%AE-%E4%B8%89/"/>
    <id>http://eirunye.github.io/2018/08/20/Spring-Boot-配置文件设置-三/</id>
    <published>2018-08-20T13:51:39.000Z</published>
    <updated>2018-08-21T08:36:40.216Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>上篇我们做了一些简单的运行文件的配置，本篇带领大家来认识常用的一些配置，当然了关于Spring Boot 这些配置太多太多了，如果想了解更多的话直接上官网参考一下，了解相关案例如本篇的配置。 <a href="https://docs.spring.io/spring-boot/docs/2.0.4.RELEASE/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">application.properties配置官方指南参考</a>。<br><img src="https://upload-images.jianshu.io/upload_images/3012005-2eecd990df12386f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="Spring Boot.jpg"></p><h1 id="Spring-Boot有以下方式配置"><a href="#Spring-Boot有以下方式配置" class="headerlink" title="Spring Boot有以下方式配置"></a>Spring Boot有以下方式配置</h1><h2 id="application-properties配置"><a href="#application-properties配置" class="headerlink" title="application.properties配置"></a>application.properties配置</h2><p>在 <a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">IntelliJ IDEA</a> 开发工具中创建项目的时候，默认的配置文件是<em>application.properties</em>，接下来我们就学习一下然后配置一些我们在开发中经常用到的配置项，进入带领我们揭开Spring Boot 项目的神秘的面纱。<br>在下面的文档中我会在每个配置中进行注解，这样能更好的了解，当然官方文档有我们所需的全部配置，大家如果项目开发中有需求那么可以进入<a href="https://docs.spring.io/spring-boot/docs/2.0.4.RELEASE/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">application.properties配置官方指南参考</a>。</p><p><strong>英:</strong> Appendix A. Common application properties<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Various properties can be specified inside your application.properties file, inside your application.yml file, or as command line switches.</span><br><span class="line">This appendix provides a list of common Spring Boot properties and references to the underlying classes that consume them.</span><br><span class="line">[Note]</span><br><span class="line">Property contributions can come from additional jar files on your classpath, so you should not consider this an exhaustive list.</span><br><span class="line">Also, you can define your own properties.</span><br><span class="line">[Warning]</span><br><span class="line">This sample file is meant as a guide only. Do not copy and paste the entire content into your application. Rather, pick only the properties that you need.</span><br></pre></td></tr></table></figure></p><p><strong>译:</strong> 官方指南者三段话概况了今天我们要讲得内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">可以在application.properties文件中，application.yml文件中或命令行开关中指定各种属性。 本附录提供了常用Spring Boot属性的列表以及对使用它们的基础类的引用。</span><br><span class="line">[注意]</span><br><span class="line">属性贡献可以来自类路径上的其他jar文件，因此您不应将此视为详尽的列表。 此外，您可以定义自己的属性。</span><br><span class="line">[警告]</span><br><span class="line">此示例文件仅供参考。 不要将整个内容复制并粘贴到您的应用程序中。 相反，只选择您需要的属性。</span><br></pre></td></tr></table></figure></p><p>所以我们在添加某些配置属性的时候，一定要根据自己的需要来添加，不然有时出错了，不知道哪里找问题。</p><h3 id="常用的application-properties配置"><a href="#常用的application-properties配置" class="headerlink" title="常用的application.properties配置"></a>常用的application.properties配置</h3><p>一般情况下在src目录下的/main/resource文件夹中新建<em><code>application.properties</code></em>文件，目录结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|--src</span><br><span class="line">   |--main</span><br><span class="line">      |--resources</span><br><span class="line">         |--application.properties</span><br></pre></td></tr></table></figure></p><p>我们接下来编写一些常用的属性配置，大家在开发中需要到哪些就直接去查看一下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line">#启用调试日志。</span><br><span class="line">debug=false</span><br><span class="line">#启用跟踪日志。</span><br><span class="line">trace=false</span><br><span class="line"></span><br><span class="line">#--------------------------------------</span><br><span class="line"># LOGGING 日记</span><br><span class="line">#--------------------------------------</span><br><span class="line"># 日志配置文件的位置。 例如，Logback的classpath:logback.xml</span><br><span class="line">logging.config=classpath:logback.xml</span><br><span class="line"># 日志文件名（例如，`myapp.log`）。名称可以是精确位置或相对于当前目录。</span><br><span class="line">logging.file=property.log</span><br><span class="line"># 最大日志文件大小。 仅支持默认的logback设置</span><br><span class="line">logging.file.max-size=10MB</span><br><span class="line"># 日志文件的位置。 例如，`/ var / log`。</span><br><span class="line">logging.path=/var/log</span><br><span class="line"></span><br><span class="line">#---------------------------------</span><br><span class="line"># AOP</span><br><span class="line">#---------------------------------</span><br><span class="line"># 使用AOP 切面编程</span><br><span class="line">spring.aop.auto=true</span><br><span class="line">#是否要创建基于子类的（CGLIB）代理（true），而不是基于标准Java接口的代理（false）</span><br><span class="line">spring.aop.proxy-target-class=true</span><br><span class="line"></span><br><span class="line">#--------------------------------</span><br><span class="line"># Email</span><br><span class="line">#--------------------------------</span><br><span class="line"># 编码格式</span><br><span class="line">spring.mail.default-encoding=UTF-8</span><br><span class="line"># SMTP服务器主机</span><br><span class="line">spring.mail.host=smtp.property.com</span><br><span class="line">#SMTP服务器端口</span><br><span class="line">spring.mail.port=7800</span><br><span class="line"># 登录SMTP用户名</span><br><span class="line">spring.mail.username=property</span><br><span class="line"># 登录SMTP密码</span><br><span class="line">spring.mail.password=123456</span><br><span class="line"></span><br><span class="line">#--------------------------------</span><br><span class="line"># WEB 属性配置</span><br><span class="line">#--------------------------------</span><br><span class="line"># 服务器应绑定的网络地址</span><br><span class="line">server.address=127.0.0.1</span><br><span class="line"># 是否启用了响应压缩</span><br><span class="line">server.compression.enabled=false</span><br><span class="line"># 连接器在关闭连接之前等待另一个HTTP请求的时间。 未设置时，将使用连接器的特定于容器的默认值。 使用值-1表示没有（即无限）超时</span><br><span class="line">server.connection-timeout=2000</span><br><span class="line"># 错误控制器的路径</span><br><span class="line">server.error.path=/error</span><br><span class="line"># 是否启用HTTP / 2支持，如果当前环境支持它。</span><br><span class="line">server.http2.enabled=false</span><br><span class="line"># 服务器端口默认为:8080</span><br><span class="line">server.port=8084</span><br><span class="line"># SP servlet的类名。</span><br><span class="line">server.servlet.jsp.class-name=org.apache.jasper.servlet.JspServlet</span><br><span class="line"># 主调度程序servlet的路径。</span><br><span class="line">server.servlet.path=/home</span><br><span class="line"># 会话cookie名称</span><br><span class="line">server.servlet.session.cookie.name=propertydemo</span><br><span class="line"></span><br><span class="line">#------------------------------</span><br><span class="line"># HTTP encoding</span><br><span class="line">#------------------------------</span><br><span class="line"># HTTP请求和响应的字符集。 如果未明确设置，则添加到“Content-Type”标头。</span><br><span class="line">spring.http.encoding.charset=UTF-8</span><br><span class="line"># 是否启用http编码支持。</span><br><span class="line">spring.http.encoding.enabled=true</span><br><span class="line">#--------------------</span><br><span class="line"># MULTIPART (MultipartProperties)</span><br><span class="line">#--------------------</span><br><span class="line"># 是否启用分段上传支持</span><br><span class="line">spring.servlet.multipart.enabled=true</span><br><span class="line"># 上传文件的中间位置</span><br><span class="line">spring.servlet.multipart.location=/log</span><br><span class="line"># 最大文件的大小</span><br><span class="line">spring.servlet.multipart.max-file-size=1MB</span><br><span class="line"># 最大请求大小</span><br><span class="line">spring.servlet.multipart.max-request-size=10MB</span><br><span class="line"># 是否在文件或参数访问时懒惰地解析多部分请求。</span><br><span class="line">spring.servlet.multipart.resolve-lazily=false</span><br><span class="line">#--------------------------------------------</span><br><span class="line"># SPRING SESSION JDBC (JdbcSessionProperties)</span><br><span class="line">#--------------------------------------------</span><br><span class="line"># cron表达式用于过期的会话清理作业</span><br><span class="line">spring.session.jdbc.cleanup-cron=0 * * * * *</span><br><span class="line"># 数据库模式初始化模式</span><br><span class="line">spring.session.jdbc.initialize-schema=embedded</span><br><span class="line"># 用于初始化数据库模式的SQL文件的路径</span><br><span class="line">spring.session.jdbc.schema=classpath:org/springframework/session/jdbc/schema-@@platform@@.sql</span><br><span class="line"># 用于存储会话的数据库表的名称</span><br><span class="line">spring.session.jdbc.table-name=SPRING_SESSION</span><br><span class="line"></span><br><span class="line">#----------------------------------</span><br><span class="line"># MONGODB 数据库配置</span><br><span class="line">#----------------------------------</span><br><span class="line"># 数据库名称</span><br><span class="line">spring.data.mongodb.database=demo</span><br><span class="line"># host 配置</span><br><span class="line">spring.data.mongodb.host=127.0.0.1</span><br><span class="line"># 登录用户名</span><br><span class="line">spring.data.mongodb.username=property</span><br><span class="line"># 登录密码</span><br><span class="line">spring.data.mongodb.password=123456</span><br><span class="line"># 端口号，自己根据安装的mongodb端口配置</span><br><span class="line">spring.data.mongodb.port=9008</span><br><span class="line"># 要启用的Mongo存储库的类型</span><br><span class="line">spring.data.mongodb.repositories.type=auto</span><br><span class="line"># 连接数据uri</span><br><span class="line">spring.data.mongodb.uri=mongodb://localhost/test</span><br><span class="line"></span><br><span class="line">#---------------------------------------</span><br><span class="line"># DATASOURCE 数据库配置</span><br><span class="line">#---------------------------------------</span><br><span class="line"># MySql jdbc Driver</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line"># 连接数据库</span><br><span class="line"># demo表示的是你创建的数据库;</span><br><span class="line">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/demo?useSSL=false&amp;requireSSL=false&amp;characterEncoding=UTF-8&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC</span><br><span class="line"># 数据库用户名</span><br><span class="line">spring.datasource.username=root</span><br><span class="line"># 数据库密码</span><br><span class="line">spring.datasource.password=123456</span><br><span class="line">#-----------------------------------</span><br><span class="line"># Jpa使用</span><br><span class="line">#-----------------------------------</span><br><span class="line"># 目标数据库进行操作，默认情况下自动检测。可以使用“databasePlatform”属性设置。</span><br><span class="line">#spring.jpa.database= demo1</span><br><span class="line"># 要操作的目标数据库的名称，默认情况下自动检测。 也可以使用“Database”枚举来设置。</span><br><span class="line">#spring.jpa.database-platform=DEMO</span><br><span class="line"># DDL模式 一般有这几种方式,Spring Boot会根据是否认为您的数据库是嵌入式的，为您选择一个默认值</span><br><span class="line"># update: 更新架构时，使用;</span><br><span class="line">spring.jpa.hibernate.ddl-auto=update</span><br><span class="line"># 是否启用SQL语句的日志记录</span><br><span class="line">spring.jpa.show-sql=true</span><br><span class="line"></span><br><span class="line">#----------------------------------------</span><br><span class="line"># TESTING PROPERTIES</span><br><span class="line">#----------------------------------------</span><br><span class="line"># 要替换的现有DataSource的类型</span><br><span class="line">spring.test.database.replace=any</span><br><span class="line"># MVC打印选项</span><br><span class="line">spring.test.mockmvc.print=default</span><br><span class="line"></span><br><span class="line"># ---------------大家查看文档进行配置，不一一列举了----------------------</span><br><span class="line"></span><br><span class="line">#  各个属性注解在查看常用配置文件application.properties中</span><br><span class="line"></span><br><span class="line"># FREEMARKER</span><br><span class="line"></span><br><span class="line"># DEVTOOLS配置</span><br><span class="line"></span><br><span class="line"># SPRING HATEOAS</span><br><span class="line"></span><br><span class="line"># HTTP message conversion</span><br><span class="line"></span><br><span class="line"># GSON</span><br><span class="line"></span><br><span class="line"># JDBC</span><br><span class="line"></span><br><span class="line"># JEST (Elasticsearch HTTP client) (JestProperties)</span><br><span class="line"></span><br><span class="line"># CASSANDRA (CassandraProperties)</span><br><span class="line"># --------------------------等等----------------------------------</span><br></pre></td></tr></table></figure></p><blockquote><p>查看常用配置文件<a href="https://github.com/eirunye/SpringBoot_Property/blob/master/src/main/resources/application.properties" target="_blank" rel="noopener">application.properties</a></p></blockquote><h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h3><p> 由于有时为了方便项目的开发维护，我们可能需要到自定义配置属性，接下来我们也来搞一下自定义属性配置。</p><blockquote><p>在<strong>application.properties</strong>自定义配置属性:</p></blockquote><p>1.application.properties添加:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#--------------------------------</span><br><span class="line"># 自定义属性</span><br><span class="line">#--------------------------------</span><br><span class="line">com.eirunye.defproname=&quot;root&quot;</span><br><span class="line">com.eirunye.defpropass=&quot;123456&quot;</span><br></pre></td></tr></table></figure><p>2.在<strong>DefPropertyController.class</strong>引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class DefPropertyController &#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;com.eirunye.defproname&#125;&quot;)</span><br><span class="line">    private String defProName;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;com.eirunye.defpropass&#125;&quot;)</span><br><span class="line">    private String defProPass;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/defproprety&quot;)</span><br><span class="line">    public String defPropretyUser() &#123;</span><br><span class="line">        return &quot;这个自定义属性名为: &quot; + defProName + &quot;, 密码为:&quot; + defProPass;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong><br>在获取自定义属性时一定要严格按照配置文件来获取并且Value里面的字符串一定是<code>$</code>+花括号<code>{***}</code>,花括号里面的<code>***</code>表示为:<code>application.properties里面自定义的字符串</code>，所以本例就是表示为:<code>@Value(&quot;${com.eirunye.defproname}&quot;)</code> 。<br>如果<code>application.properties</code>有自定义为<code>test.ok=&quot;haha&quot;</code>,同样的获取方式为:<code>@Value(&quot;${test.ok}&quot;)</code></li></ul><p>3.测试<code>这里暂未使用测试代码的方式，后面的文章会讲到</code></p><ul><li>IntelliJ IDEA访问<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8084/defproprety</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3012005-d5479d7990d69320.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="def_idea.png"></p><ul><li><a href="https://www.getpostman.com/" target="_blank" rel="noopener">Postman访问</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3012005-a52caf3352427bd0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="def_postman.png"></p><blockquote><p>通过Bean的形式获取</p></blockquote><p>假如我们遇到这样情况，自定义属性多，然后每个都是通过<code>@Value(${&quot;&quot;})</code>方式的话可能会很容易出错，那么我们可以采用以下方式。</p><p>1.新建一个<code>Properties.class</code><br>添加<code>@ConfigurationProperties(prefix = &quot;com.eirunye&quot;)</code>//表示的是通过自定义属性查找，如果自定义是:<code>test.ok=haha</code>,则该这样表示:<code>@ConfigurationProperties(prefix = &quot;test&quot;)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@ConfigurationProperties(prefix = &quot;com.eirunye&quot;)//添加该注解</span><br><span class="line">public class Properties &#123;</span><br><span class="line">    private String defproname;</span><br><span class="line">    private String defpropass;</span><br><span class="line">//  get/set方法</span><br><span class="line">    public String getDefproname() &#123;</span><br><span class="line">        return defproname;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setDefproname(String defproname) &#123;</span><br><span class="line">        this.defproname = defproname;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getDefpropass() &#123;</span><br><span class="line">        return defpropass;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setDefpropass(String defpropass) &#123;</span><br><span class="line">        this.defpropass = defpropass;</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure><p>2.在controller包下创建 <code>DefBeanPropertyController.class</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class DefBeanPropertyController &#123;</span><br><span class="line">   //通过 Autowired注解来获取到 Properties属性，注:Autowired是按类型进行装配，可获取它所装配类的属性</span><br><span class="line">    @Autowired</span><br><span class="line">    Properties properties;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/bean/defproperty&quot;)</span><br><span class="line">    public String getDefBeanProperties() &#123;</span><br><span class="line">        return &quot;这是通过Bean注解的方式获取属性: &quot; + properties.getDefproname() + &quot;,密码为: &quot; + properties.getDefpropass();</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure><p>3.在项目的入口文件<strong>Application</strong>添加注解<strong>@EnableConfigurationProperties</strong><br>最后加上包名不然可能找不到扫描文件如:<code>@EnableConfigurationProperties({com.eirunye.defpropertys.bean.Properties.class})</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableConfigurationProperties(&#123;com.eirunye.defpropertys.bean.Properties.class&#125;)//添加注解bean的扫描文件</span><br><span class="line">public class DefpropertysApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(DefpropertysApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.测试<br>IntelliJ IDEA访问</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-e83c94a826f2309d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="bean_def_idea.png"></p><blockquote><p>创建文件xxx.properties文件方式</p></blockquote><p>我们可以自己创建一个自定义属性的文件如本例<strong>def.properties</strong>，(<em>注:一般都是以 <strong>.properties</strong> 文件结尾</em>)</p><p>1.添加自定义<code>def.properties</code>配置如下:</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-7730447bb95f7fee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="def_file.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#--------------------------------</span><br><span class="line"># 自定义属性</span><br><span class="line">#--------------------------------</span><br><span class="line"># 用户名</span><br><span class="line">com.eirunye.defineuser=&quot;property&quot;</span><br><span class="line"># 年龄</span><br><span class="line">com.eirunye.defineage=20</span><br></pre></td></tr></table></figure><p>2.创建 <code>DefineProperties.class</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@ConfigurationProperties(prefix = &quot;com.eirunye&quot;)//添加注解 ConfigurationProperties &quot;com.eirunye&quot;表示的是自定义属性</span><br><span class="line">@PropertySource(&quot;classpath:defines.properties&quot;)// 添加注解 PropertySource 该注解能根据路径扫描到我们的文件</span><br><span class="line">public class DefineProperties &#123;</span><br><span class="line">//    这里可以通过@Value(&quot;$&#123;&#125;&quot;)方式添加,我已经屏蔽掉了，直接通过ConfigurationProperties注解的方式</span><br><span class="line">//    @Value(&quot;$&#123;com.eirunye.defineuser&#125;&quot;)</span><br><span class="line">    private String defineuser;</span><br><span class="line">//    @Value(&quot;$&#123;com.eirunye.defineage&#125;&quot;)</span><br><span class="line">    private int defineage;</span><br><span class="line">// get/set方法</span><br><span class="line">    public String getDefineuser() &#123;</span><br><span class="line">        return defineuser;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setDefineuser(String defineuser) &#123;</span><br><span class="line">        this.defineuser = defineuser;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getDefineage() &#123;</span><br><span class="line">        return defineage;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setDefineage(int defineage) &#123;</span><br><span class="line">        this.defineage = defineage;</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure><p>3.在<code>DefinePropertiesController.class</code>引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class DefinePropertiesController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    DefineProperties defineProperties;</span><br><span class="line">    @RequestMapping(value = &quot;define/Properties&quot;)</span><br><span class="line">    public String getDefinePropertiesData()&#123;</span><br><span class="line">        return &quot;新建文件自定义属性姓名：&quot;+defineProperties.getDefineuser()+&quot;,新建文件自定义属性年龄：&quot;+defineProperties.getDefineage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.别忘了在Application里面添加配置<code>@EnableConfigurationProperties</code>,即：<code>@EnableConfigurationProperties({com.eirunye.defpropertys.bean.Properties.class,com.eirunye.defpropertys.bean.DefineProperties.class})</code></p><p>5.测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8084/define/Properties</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3012005-9fb441bce0fc8ecf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="def_idea_show.png"></p><blockquote><p><strong>下载application.properties<a href="https://github.com/eirunye/SpringBoot_defpropertys" target="_blank" rel="noopener">案例demo</a></strong></p></blockquote><h2 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h2><p>由于application.properties配置有点繁琐，简洁是我们非常喜欢的，那么在Spring Boot程序里面当然也是可以用.yml文件来配置的，接下来让我们进入对.yml文件的一些相关配置吧，官方文档<a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config-yaml" target="_blank" rel="noopener">Using YAML Instead of Properties</a>。</p><h3 id="常见的配置"><a href="#常见的配置" class="headerlink" title="常见的配置"></a>常见的配置</h3><p>首先在src目录下的/main/resource文件夹中新建<code>application.yml、application-dev.yml、application-prod.yml</code>三个文件，删除<code>application.properties</code>文件，目录结构如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">|--src</span><br><span class="line">   |--main</span><br><span class="line">      |--resources</span><br><span class="line">         |--application.yml</span><br><span class="line">         |--application-dev.yml</span><br><span class="line">         |--application-prod.yml</span><br></pre></td></tr></table></figure></p><p>相信很多人要骂街了，这什么情况不是说,yml配置很给力吗？怎么还有创建那么多文件，这不是比上面的  <code>application.properties</code>配置还多此一举吗？莫急接下来让我们来看看.yml的配置之后，我相信你肯定在项目中会喜欢用它。</p><p>常见的配置属性如下: 【注意: 这里属性之间的间隔必须按照要求而来,如:冒号后面要空格】<br><code>application.yml</code> 配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active: dev   #引用 application-dev.yml文件,这里我们可以改为 prod,表示引用application-prod.yml文件</span><br><span class="line">  datasource:</span><br><span class="line">      driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">      url: jdbc:mysql://127.0.0.1:3306/demo?useSSL=false&amp;requireSSL=false&amp;characterEncoding=UTF-8&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC</span><br><span class="line">      username: root</span><br><span class="line">      password: 12346</span><br><span class="line">  jpa:</span><br><span class="line">    hibernate:</span><br><span class="line">      ddl-auto: update</span><br><span class="line">    show-sql: true</span><br><span class="line">  data:</span><br><span class="line">    mongodb:</span><br><span class="line">      host: 127.0.0.1</span><br><span class="line">      uri: mongodb://localhost/test</span><br><span class="line">      username: root</span><br><span class="line">      password: 123456</span><br><span class="line">      database: test</span><br><span class="line">  test:</span><br><span class="line">    database:</span><br><span class="line">      replace: any</span><br><span class="line">    mockmvc:</span><br><span class="line">      print: default</span><br><span class="line">  servlet:</span><br><span class="line">    multipart:</span><br><span class="line">      enabled: true</span><br></pre></td></tr></table></figure><p><code>application-dev.yml</code> 可以当成正式服务器端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8084</span><br></pre></td></tr></table></figure><p><code>application-prod.yml</code> 可以当成测试服务器端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8080</span><br></pre></td></tr></table></figure><ul><li><strong>查看更多<a href="https://github.com/eirunye/SpringBoot_Property/blob/master/src/main/resources/application.yml" target="_blank" rel="noopener">.yml配置</a></strong></li></ul><h3 id="自定义yml配置"><a href="#自定义yml配置" class="headerlink" title="自定义yml配置"></a>自定义yml配置</h3><blockquote><p>在application.yml配置</p></blockquote><p>1.和上面的application.properties类似，但是需要注意的是<em>格式问题</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">com:</span><br><span class="line">  eirunye:</span><br><span class="line">    ymlname: ymlroot</span><br><span class="line">    ymlpass: yml123456</span><br></pre></td></tr></table></figure></p><p>2.通过<code>@Value(&quot;${com.eirunye.ymlname}&quot;)</code>获取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class YmlPropertiesController&#123;</span><br><span class="line">    @Value(&quot;$&#123;com.eirunye.ymlname&#125;&quot;)</span><br><span class="line">    private String ymlname;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;com.eirunye.ymlpass&#125;&quot;)</span><br><span class="line">    private String ymlpass;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;yml/proprety&quot;)</span><br><span class="line">    public String getYmlPropreties() &#123;</span><br><span class="line">        return &quot;这个自定义属性名为: &quot; + ymlname+ &quot;, 密码为:&quot; + ymlpass;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.测试—访问:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8084/yml/proprety</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3012005-eae9ed7abb04ee43.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="yml_def.png"></p><blockquote><p>通过Bean方式获取和application.properties方式一样</p></blockquote><p>1.创建YmlPropertyBean.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@ConfigurationProperties(prefix = &quot;com.eirunye&quot;)//添加该注解</span><br><span class="line">public class YmlPropertyBean &#123;</span><br><span class="line"></span><br><span class="line">    private String ymlname;</span><br><span class="line">    private String ymlpass;</span><br><span class="line">// get/set方法.....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.在 <code>YmlPropertyBeanController.class</code>引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class YmlPropertyBeanController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    YmlPropertyBean propertyBean;</span><br><span class="line">    @RequestMapping(value = &quot;/bean/ymlproperty&quot;)</span><br><span class="line">    public String getYmlPropertyData()&#123;</span><br><span class="line">        return &quot;这个bean自定义属性名为: &quot; + propertyBean.getYmlname()+ &quot;, 密码为:&quot; + propertyBean.getYmlpass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.测试-访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8084/bean/ymlproperty</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3012005-5551aabdebf638ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="yml_bean_def.png"></p><blockquote><p><strong>下载.yml<a href="https://github.com/eirunye/SpringBoot_defineyml" target="_blank" rel="noopener">案例demo</a></strong></p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>   1.本篇主要讲得配置文件，到此就结束了，在开发中这是我们经常用到。<br>   2.在本篇有些相关配置，本例的代码实例还没涉及到，接下来会继续结合相关的配置案例继续更新。<br>   3.相信大家也有所掌握。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;上篇我们做了一些简单的运行文件的配置，本篇带领大家来认识常用的一些配置，当然了关于Spring Boot 这些配置太多太多了，如果想了解更多
      
    
    </summary>
    
      <category term="后台" scheme="http://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/"/>
    
      <category term="Spring Boot" scheme="http://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/Spring-Boot/"/>
    
    
      <category term="Java" scheme="http://eirunye.github.io/tags/Java/"/>
    
      <category term="Spring Boot" scheme="http://eirunye.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 项目创建(二)</title>
    <link href="http://eirunye.github.io/2018/08/14/Spring-Boot-%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA-%E4%BA%8C/"/>
    <id>http://eirunye.github.io/2018/08/14/Spring-Boot-项目创建-二/</id>
    <published>2018-08-14T03:49:36.000Z</published>
    <updated>2018-08-14T07:13:41.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何创建Spring-Boot-项目？"><a href="#如何创建Spring-Boot-项目？" class="headerlink" title="如何创建Spring Boot 项目？"></a>如何创建Spring Boot 项目？</h1><p>接下来我们将学习如何创建第一个Spring Boot项目 <strong><em>hello Spring Boot!</em></strong> 呢？</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-ab363c756e658c99.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/400" alt="Spring Boot.jpg"></p><h2 id="我们将以-IntelliJ-IDEA-开发工具为例创建Spring-Boot项目"><a href="#我们将以-IntelliJ-IDEA-开发工具为例创建Spring-Boot项目" class="headerlink" title="我们将以 IntelliJ IDEA 开发工具为例创建Spring Boot项目"></a>我们将以 IntelliJ IDEA 开发工具为例创建Spring Boot项目</h2><ol><li>如果还没下载过<a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">IntelliJ IDEA</a>,那么打开下载即可。</li><li><a href="http://idea.lanyus.com/" target="_blank" rel="noopener">IntelliJ IDEA 破解码</a>，这个之前是可以用的，谢谢作者分享，不知道还能不能用。</li><li>一切准备完成后，开始使用开发之旅吧。</li></ol><h2 id="IDEA创建Spring-Boot项目流程"><a href="#IDEA创建Spring-Boot项目流程" class="headerlink" title="IDEA创建Spring Boot项目流程"></a>IDEA创建Spring Boot项目流程</h2><p><strong>如图所示</strong></p><ol><li>File —–&gt; New ——&gt; Project…</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-7742be37106c16f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="创建1.png"></p><ol start="2"><li>选择 Spring Initializr</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-a8d88cb7188bd499.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="创建2.png"></p><ol start="3"><li>Project Matedata</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-6887d50074b04b23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="创建3.png"></p><ol start="4"><li>选择Web —–&gt; Web —–&gt; Spring Boot版本(默认即可)</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-50a5a2138872929b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="创建4.png"></p><ol start="5"><li>选择项目保存的文件夹</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-0cd4e1e9cb939640.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="创建5.png"></p><ol start="6"><li>创建完成 查看项目目录<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">|--src:源代码文件</span><br><span class="line">   |--main</span><br><span class="line">      |--java:项目的代码Java代码编写在这里</span><br><span class="line">      |--resources:一般是配置文件等</span><br><span class="line">         |--static:静态资源文件(js、css、img)</span><br><span class="line">         |--template:模板(.html等)</span><br><span class="line">         |--application.properties: 配置文件</span><br><span class="line">   |--test:主要是用于测试</span><br><span class="line">|--target:是项目打包生成的.jar文件在这里</span><br><span class="line">|--pom.xml:是添加依赖文件、版本号、打包设置为Jar或者War等 (如下图:pom.xml.png)</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-eeecc6cb6fc171dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="项目目录结构6.png"></p><ol start="7"><li>查看 pom.xml</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-f339f5fbed904ad7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="pom.xml.png"></p><ol start="8"><li>编辑配置application.properties 文件 一般需要配置一些端口，数据库连接、编码方式等，如下图<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#设置端口</span><br><span class="line">server.port=8084</span><br><span class="line">#session失效时间</span><br><span class="line">server.session-timeout=3000</span><br><span class="line">#编码方式</span><br><span class="line">server.tomcat.uri-encoding=utf-8</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-041e35ae669efa54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="application.properties.png"></p><ol start="9"><li>程序的入口文件</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-15e6598f02ab7c2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="程序入口Application.png"></p><ol start="10"><li>编写简单的例子 如下图所示:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">创建一个controller 包，在包下创建 HelloController.class</span><br><span class="line">添加注解:</span><br><span class="line">    @RestController ----&gt;默认Json格式数据</span><br><span class="line">    @GetMapping(value = &quot;/hello&quot;) &apos;hello&apos;:表示访问路径</span><br><span class="line">    解下来的文章会讲述到更多的注解......</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-0f3f42f1454efee5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="controller.class.png"></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="运行是否正常"><a href="#运行是否正常" class="headerlink" title="运行是否正常"></a>运行是否正常</h2><ol><li>如下图</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-9bf6556f71b9fad4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="运行项目1.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-5614d3b09ec72898.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="运行项目2.png"></p><ol start="2"><li>访问测试:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">浏览器访问</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3012005-0a1c0d33cc3d922c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="访问结果1.png"><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IDEA 自带的访问(推荐)</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-9e8238ce358139eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="访问结果2.png"><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Postman 访问(推荐)</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-a5d90d90d61382ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="Postman访问3.png"></p><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p><strong>安装 <a href="https://www.getpostman.com/" target="_blank" rel="noopener">Postman</a></strong></p><p><strong>本例项目<a href="https://github.com/iconye/springboot_hello" target="_blank" rel="noopener">下载demo</a></strong></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>  在IDEA开发工具中构建Spring Boot非常简单，推荐大家使用IDEA(Eclipse创建项目在这里不举例了)。</p><p>  接下来讲解的是Spring Boot 的相关配置。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何创建Spring-Boot-项目？&quot;&gt;&lt;a href=&quot;#如何创建Spring-Boot-项目？&quot; class=&quot;headerlink&quot; title=&quot;如何创建Spring Boot 项目？&quot;&gt;&lt;/a&gt;如何创建Spring Boot 项目？&lt;/h1&gt;&lt;p&gt;接下
      
    
    </summary>
    
      <category term="后台" scheme="http://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/"/>
    
      <category term="Spring Boot" scheme="http://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/Spring-Boot/"/>
    
    
      <category term="Java" scheme="http://eirunye.github.io/tags/Java/"/>
    
      <category term="Spring Boot" scheme="http://eirunye.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 认识(一)</title>
    <link href="http://eirunye.github.io/2018/08/14/Spring-Boot-knowledge-1/"/>
    <id>http://eirunye.github.io/2018/08/14/Spring-Boot-knowledge-1/</id>
    <published>2018-08-14T03:13:46.000Z</published>
    <updated>2018-08-14T15:23:12.084Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC-、Spring-Boot-、SpringCloud-认识"><a href="#SpringMVC-、Spring-Boot-、SpringCloud-认识" class="headerlink" title="SpringMVC 、Spring Boot 、SpringCloud 认识"></a>SpringMVC 、Spring Boot 、SpringCloud 认识</h1><p>最近开发项目一直用到了Spring Boot脚手架工具，让我们来认识它一下吧，进入Spring Boot开发之旅。</p><p><img src="https://upload-images.jianshu.io/upload_images/3012005-4eea704b10ae0142.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="Spring Boot.jpg"></p><h2 id="认识Spring-Boot"><a href="#认识Spring-Boot" class="headerlink" title="认识Spring Boot"></a>认识Spring Boot</h2><p>   Spring Boot 是由 Pivotal 团队提供的全新框架，其目的是用来简化新 Spring 应用的初始搭建以及开发过程。<br>    Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”.</p><p>   在开发中给了我们很大的便利，不用进行过多的配置，和繁琐的设置，非常方便我们学习了开发项目。<br>   总结一下几点非常棒:<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">入门简单</span><br><span class="line">开发效率高</span><br><span class="line">无须额外的配置</span><br><span class="line">监控运行过程等</span><br></pre></td></tr></table></figure></p><h2 id="Spring-Boot-和Spring-MVC区别"><a href="#Spring-Boot-和Spring-MVC区别" class="headerlink" title="Spring Boot 和Spring MVC区别"></a>Spring Boot 和Spring MVC区别</h2><p>  <strong>Spring MVC</strong><br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Spring MVC 是Spring的一个模块，是一种解决Web开发应用的框架。这种开发模式层次分明，轻度解耦，为Web应用提供了许多模板，减轻了开发难度，但是Spring都要进行复杂的XML、JavaConfig等资源的配置。</span><br><span class="line">Spring MVC 框架使用IOC对控制逻辑和业务提供了全面的分离，从而很好的解决了复杂错乱的问题。</span><br><span class="line">Spring MVC 需要过分的配置，导致花费更多的时间，效率低下。</span><br></pre></td></tr></table></figure></p><p><strong>Spring Boot</strong><br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Spring Boot 创建完成后，提供了许多复杂的配置，降低了开发的进度和成本。例如: Spring Boot创建完成后，可以集成JDBC、Redis、MySQL、JackJson等等这些配置，让我们在开发过程中收益，只要关注业务，完成相关业务即可，从而不必担心配置的问题。</span><br><span class="line">Spring Boot 可以直接独立运行，简单即可。</span><br><span class="line">Spring Boot 是Spring的一套快速配置脚手架框架，Spring Boot 提供了一系列的相关配置，还有相关了Maven依赖，完全可靠，开发功能和Spring MVC相关功能兼容。</span><br><span class="line">Spring Boot 提供了基于http、ssh、telnet等对运行时的项目进行监控。</span><br><span class="line">Spring Boot 降低学习成本，快速入手开发项目，没有繁琐的配置(这是是广大开发者梦寐以求的)</span><br></pre></td></tr></table></figure></p><h2 id="Spring-Boot-和Spring-Cloud区别"><a href="#Spring-Boot-和Spring-Cloud区别" class="headerlink" title="Spring Boot 和Spring Cloud区别"></a>Spring Boot 和Spring Cloud区别</h2><p><strong>Spring Cloud</strong><br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Spring Cloud 是一种云端分布式架构的解决框架(称为微服务)。</span><br><span class="line">Spring Cloud 是一个基于 Spring Boot 框架实现云微服务应用开发的一套工具.</span><br><span class="line">Spring Cloud 主要是专注于服务之间的通讯、熔断、监控等全局的微服务治理框架。</span><br><span class="line">Spring Cloud 是不能离开Spring Boot这个环境的，Spring Cloud必须依赖于Spring Boot，但是Spring Boot可以离开Spring Cloud独立使用开发项目。</span><br></pre></td></tr></table></figure></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p> 各位读者如果有更好的见解可以留言，我们一起学习。</p><p> 我们在不断的进步中，将会对<a href="">Spring Boot系列</a>进行深入的探究。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringMVC-、Spring-Boot-、SpringCloud-认识&quot;&gt;&lt;a href=&quot;#SpringMVC-、Spring-Boot-、SpringCloud-认识&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC 、Sprin
      
    
    </summary>
    
      <category term="后台" scheme="http://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/"/>
    
      <category term="Spring Boot" scheme="http://eirunye.github.io/categories/%E5%90%8E%E5%8F%B0/Spring-Boot/"/>
    
    
      <category term="Java" scheme="http://eirunye.github.io/tags/Java/"/>
    
      <category term="Spring Boot" scheme="http://eirunye.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
</feed>
