<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Spring-Boot 配置文件设置(三)]]></title>
    <url>%2F2018%2F08%2F20%2FSpring-Boot-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AE%BE%E7%BD%AE-%E4%B8%89%2F</url>
    <content type="text"><![CDATA[简介上篇我们做了一些简单的运行文件的配置，本篇带领大家来认识常用的一些配置，当然了关于Spring Boot 这些配置太多太多了，如果想了解更多的话直接上官网参考一下，了解相关案例如本篇的配置。 application.properties配置官方指南参考。 Spring Boot有以下方式配置application.properties配置在 IntelliJ IDEA 开发工具中创建项目的时候，默认的配置文件是application.properties，接下来我们就学习一下然后配置一些我们在开发中经常用到的配置项，进入带领我们揭开Spring Boot 项目的神秘的面纱。在下面的文档中我会在每个配置中进行注解，这样能更好的了解，当然官方文档有我们所需的全部配置，大家如果项目开发中有需求那么可以进入application.properties配置官方指南参考。 英: Appendix A. Common application properties 1234567Various properties can be specified inside your application.properties file, inside your application.yml file, or as command line switches.This appendix provides a list of common Spring Boot properties and references to the underlying classes that consume them.[Note]Property contributions can come from additional jar files on your classpath, so you should not consider this an exhaustive list.Also, you can define your own properties.[Warning]This sample file is meant as a guide only. Do not copy and paste the entire content into your application. Rather, pick only the properties that you need. 译: 官方指南者三段话概况了今天我们要讲得内容：12345可以在application.properties文件中，application.yml文件中或命令行开关中指定各种属性。 本附录提供了常用Spring Boot属性的列表以及对使用它们的基础类的引用。[注意]属性贡献可以来自类路径上的其他jar文件，因此您不应将此视为详尽的列表。 此外，您可以定义自己的属性。[警告]此示例文件仅供参考。 不要将整个内容复制并粘贴到您的应用程序中。 相反，只选择您需要的属性。 所以我们在添加某些配置属性的时候，一定要根据自己的需要来添加，不然有时出错了，不知道哪里找问题。 常用的application.properties配置一般情况下在src目录下的/main/resource文件夹中新建application.properties文件，目录结构如下：1234|--src |--main |--resources |--application.properties 我们接下来编写一些常用的属性配置，大家在开发中需要到哪些就直接去查看一下:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164#启用调试日志。debug=false#启用跟踪日志。trace=false#--------------------------------------# LOGGING 日记#--------------------------------------# 日志配置文件的位置。 例如，Logback的classpath:logback.xmllogging.config=classpath:logback.xml# 日志文件名（例如，`myapp.log`）。名称可以是精确位置或相对于当前目录。logging.file=property.log# 最大日志文件大小。 仅支持默认的logback设置logging.file.max-size=10MB# 日志文件的位置。 例如，`/ var / log`。logging.path=/var/log#---------------------------------# AOP#---------------------------------# 使用AOP 切面编程spring.aop.auto=true#是否要创建基于子类的（CGLIB）代理（true），而不是基于标准Java接口的代理（false）spring.aop.proxy-target-class=true#--------------------------------# Email#--------------------------------# 编码格式spring.mail.default-encoding=UTF-8# SMTP服务器主机spring.mail.host=smtp.property.com#SMTP服务器端口spring.mail.port=7800# 登录SMTP用户名spring.mail.username=property# 登录SMTP密码spring.mail.password=123456#--------------------------------# WEB 属性配置#--------------------------------# 服务器应绑定的网络地址server.address=127.0.0.1# 是否启用了响应压缩server.compression.enabled=false# 连接器在关闭连接之前等待另一个HTTP请求的时间。 未设置时，将使用连接器的特定于容器的默认值。 使用值-1表示没有（即无限）超时server.connection-timeout=2000# 错误控制器的路径server.error.path=/error# 是否启用HTTP / 2支持，如果当前环境支持它。server.http2.enabled=false# 服务器端口默认为:8080server.port=8084# SP servlet的类名。server.servlet.jsp.class-name=org.apache.jasper.servlet.JspServlet# 主调度程序servlet的路径。server.servlet.path=/home# 会话cookie名称server.servlet.session.cookie.name=propertydemo#------------------------------# HTTP encoding#------------------------------# HTTP请求和响应的字符集。 如果未明确设置，则添加到“Content-Type”标头。spring.http.encoding.charset=UTF-8# 是否启用http编码支持。spring.http.encoding.enabled=true#--------------------# MULTIPART (MultipartProperties)#--------------------# 是否启用分段上传支持spring.servlet.multipart.enabled=true# 上传文件的中间位置spring.servlet.multipart.location=/log# 最大文件的大小spring.servlet.multipart.max-file-size=1MB# 最大请求大小spring.servlet.multipart.max-request-size=10MB# 是否在文件或参数访问时懒惰地解析多部分请求。spring.servlet.multipart.resolve-lazily=false#--------------------------------------------# SPRING SESSION JDBC (JdbcSessionProperties)#--------------------------------------------# cron表达式用于过期的会话清理作业spring.session.jdbc.cleanup-cron=0 * * * * *# 数据库模式初始化模式spring.session.jdbc.initialize-schema=embedded# 用于初始化数据库模式的SQL文件的路径spring.session.jdbc.schema=classpath:org/springframework/session/jdbc/schema-@@platform@@.sql# 用于存储会话的数据库表的名称spring.session.jdbc.table-name=SPRING_SESSION#----------------------------------# MONGODB 数据库配置#----------------------------------# 数据库名称spring.data.mongodb.database=demo# host 配置spring.data.mongodb.host=127.0.0.1# 登录用户名spring.data.mongodb.username=property# 登录密码spring.data.mongodb.password=123456# 端口号，自己根据安装的mongodb端口配置spring.data.mongodb.port=9008# 要启用的Mongo存储库的类型spring.data.mongodb.repositories.type=auto# 连接数据urispring.data.mongodb.uri=mongodb://localhost/test#---------------------------------------# DATASOURCE 数据库配置#---------------------------------------# MySql jdbc Driverspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver# 连接数据库# demo表示的是你创建的数据库;spring.datasource.url=jdbc:mysql://127.0.0.1:3306/demo?useSSL=false&amp;requireSSL=false&amp;characterEncoding=UTF-8&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC# 数据库用户名spring.datasource.username=root# 数据库密码spring.datasource.password=123456#-----------------------------------# Jpa使用#-----------------------------------# 目标数据库进行操作，默认情况下自动检测。可以使用“databasePlatform”属性设置。#spring.jpa.database= demo1# 要操作的目标数据库的名称，默认情况下自动检测。 也可以使用“Database”枚举来设置。#spring.jpa.database-platform=DEMO# DDL模式 一般有这几种方式,Spring Boot会根据是否认为您的数据库是嵌入式的，为您选择一个默认值# update: 更新架构时，使用;spring.jpa.hibernate.ddl-auto=update# 是否启用SQL语句的日志记录spring.jpa.show-sql=true#----------------------------------------# TESTING PROPERTIES#----------------------------------------# 要替换的现有DataSource的类型spring.test.database.replace=any# MVC打印选项spring.test.mockmvc.print=default# ---------------大家查看文档进行配置，不一一列举了----------------------# 各个属性注解在查看常用配置文件application.properties中# FREEMARKER# DEVTOOLS配置# SPRING HATEOAS# HTTP message conversion# GSON# JDBC# JEST (Elasticsearch HTTP client) (JestProperties)# CASSANDRA (CassandraProperties)# --------------------------等等---------------------------------- 查看常用配置文件application.properties 自定义属性 由于有时为了方便项目的开发维护，我们可能需要到自定义配置属性，接下来我们也来搞一下自定义属性配置。 在application.properties自定义配置属性: 1.application.properties添加: 12345#--------------------------------# 自定义属性#--------------------------------com.eirunye.defproname=&quot;root&quot;com.eirunye.defpropass=&quot;123456&quot; 2.在DefPropertyController.class引用 1234567891011121314@RestControllerpublic class DefPropertyController &#123; @Value(&quot;$&#123;com.eirunye.defproname&#125;&quot;) private String defProName; @Value(&quot;$&#123;com.eirunye.defpropass&#125;&quot;) private String defProPass; @RequestMapping(value = &quot;/defproprety&quot;) public String defPropretyUser() &#123; return &quot;这个自定义属性名为: &quot; + defProName + &quot;, 密码为:&quot; + defProPass; &#125;&#125; 注意在获取自定义属性时一定要严格按照配置文件来获取并且Value里面的字符串一定是$+花括号{***},花括号里面的***表示为:application.properties里面自定义的字符串，所以本例就是表示为:@Value(&quot;${com.eirunye.defproname}&quot;) 。如果application.properties有自定义为test.ok=&quot;haha&quot;,同样的获取方式为:@Value(&quot;${test.ok}&quot;) 3.测试这里暂未使用测试代码的方式，后面的文章会讲到 IntelliJ IDEA访问1http://localhost:8084/defproprety Postman访问 通过Bean的形式获取 假如我们遇到这样情况，自定义属性多，然后每个都是通过@Value(${&quot;&quot;})方式的话可能会很容易出错，那么我们可以采用以下方式。 1.新建一个Properties.class添加@ConfigurationProperties(prefix = &quot;com.eirunye&quot;)//表示的是通过自定义属性查找，如果自定义是:test.ok=haha,则该这样表示:@ConfigurationProperties(prefix = &quot;test&quot;) 1234567891011121314151617@ConfigurationProperties(prefix = &quot;com.eirunye&quot;)//添加该注解public class Properties &#123; private String defproname; private String defpropass;// get/set方法 public String getDefproname() &#123; return defproname; &#125; public void setDefproname(String defproname) &#123; this.defproname = defproname; &#125; public String getDefpropass() &#123; return defpropass; &#125; public void setDefpropass(String defpropass) &#123; this.defpropass = defpropass; &#125;&#125; 2.在controller包下创建 DefBeanPropertyController.class 12345678910@RestControllerpublic class DefBeanPropertyController &#123; //通过 Autowired注解来获取到 Properties属性，注:Autowired是按类型进行装配，可获取它所装配类的属性 @Autowired Properties properties; @RequestMapping(value = &quot;/bean/defproperty&quot;) public String getDefBeanProperties() &#123; return &quot;这是通过Bean注解的方式获取属性: &quot; + properties.getDefproname() + &quot;,密码为: &quot; + properties.getDefpropass(); &#125;&#125; 3.在项目的入口文件Application添加注解@EnableConfigurationProperties最后加上包名不然可能找不到扫描文件如:@EnableConfigurationProperties({com.eirunye.defpropertys.bean.Properties.class})。 12345678@SpringBootApplication@EnableConfigurationProperties(&#123;com.eirunye.defpropertys.bean.Properties.class&#125;)//添加注解bean的扫描文件public class DefpropertysApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(DefpropertysApplication.class, args); &#125;&#125; 4.测试IntelliJ IDEA访问 创建文件xxx.properties文件方式 我们可以自己创建一个自定义属性的文件如本例def.properties，(注:一般都是以 .properties 文件结尾) 1.添加自定义def.properties配置如下: 1234567#--------------------------------# 自定义属性#--------------------------------# 用户名com.eirunye.defineuser=&quot;property&quot;# 年龄com.eirunye.defineage=20 2.创建 DefineProperties.class 12345678910111213141516171819202122@Configuration@ConfigurationProperties(prefix = &quot;com.eirunye&quot;)//添加注解 ConfigurationProperties &quot;com.eirunye&quot;表示的是自定义属性@PropertySource(&quot;classpath:defines.properties&quot;)// 添加注解 PropertySource 该注解能根据路径扫描到我们的文件public class DefineProperties &#123;// 这里可以通过@Value(&quot;$&#123;&#125;&quot;)方式添加,我已经屏蔽掉了，直接通过ConfigurationProperties注解的方式// @Value(&quot;$&#123;com.eirunye.defineuser&#125;&quot;) private String defineuser;// @Value(&quot;$&#123;com.eirunye.defineage&#125;&quot;) private int defineage;// get/set方法 public String getDefineuser() &#123; return defineuser; &#125; public void setDefineuser(String defineuser) &#123; this.defineuser = defineuser; &#125; public int getDefineage() &#123; return defineage; &#125; public void setDefineage(int defineage) &#123; this.defineage = defineage; &#125;&#125; 3.在DefinePropertiesController.class引用 123456789@RestControllerpublic class DefinePropertiesController &#123; @Autowired DefineProperties defineProperties; @RequestMapping(value = &quot;define/Properties&quot;) public String getDefinePropertiesData()&#123; return &quot;新建文件自定义属性姓名：&quot;+defineProperties.getDefineuser()+&quot;,新建文件自定义属性年龄：&quot;+defineProperties.getDefineage(); &#125;&#125; 4.别忘了在Application里面添加配置@EnableConfigurationProperties,即：@EnableConfigurationProperties({com.eirunye.defpropertys.bean.Properties.class,com.eirunye.defpropertys.bean.DefineProperties.class}) 5.测试 1http://localhost:8084/define/Properties 下载application.properties案例demo application.yml配置由于application.properties配置有点繁琐，简洁是我们非常喜欢的，那么在Spring Boot程序里面当然也是可以用.yml文件来配置的，接下来让我们进入对.yml文件的一些相关配置吧，官方文档Using YAML Instead of Properties。 常见的配置首先在src目录下的/main/resource文件夹中新建application.yml、application-dev.yml、application-prod.yml三个文件，删除application.properties文件，目录结构如下:123456|--src |--main |--resources |--application.yml |--application-dev.yml |--application-prod.yml 相信很多人要骂街了，这什么情况不是说,yml配置很给力吗？怎么还有创建那么多文件，这不是比上面的 application.properties配置还多此一举吗？莫急接下来让我们来看看.yml的配置之后，我相信你肯定在项目中会喜欢用它。 常见的配置属性如下: 【注意: 这里属性之间的间隔必须按照要求而来,如:冒号后面要空格】application.yml 配置 123456789101112131415161718192021222324252627spring: profiles: active: dev #引用 application-dev.yml文件,这里我们可以改为 prod,表示引用application-prod.yml文件 datasource: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://127.0.0.1:3306/demo?useSSL=false&amp;requireSSL=false&amp;characterEncoding=UTF-8&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC username: root password: 12346 jpa: hibernate: ddl-auto: update show-sql: true data: mongodb: host: 127.0.0.1 uri: mongodb://localhost/test username: root password: 123456 database: test test: database: replace: any mockmvc: print: default servlet: multipart: enabled: true application-dev.yml 可以当成正式服务器端口 12server: port: 8084 application-prod.yml 可以当成测试服务器端口 12server: port: 8080 查看更多.yml配置 自定义yml配置 在application.yml配置 1.和上面的application.properties类似，但是需要注意的是格式问题1234com: eirunye: ymlname: ymlroot ymlpass: yml123456 2.通过@Value(&quot;${com.eirunye.ymlname}&quot;)获取 12345678910111213@RestControllerpublic class YmlPropertiesController&#123; @Value(&quot;$&#123;com.eirunye.ymlname&#125;&quot;) private String ymlname; @Value(&quot;$&#123;com.eirunye.ymlpass&#125;&quot;) private String ymlpass; @RequestMapping(value = &quot;yml/proprety&quot;) public String getYmlPropreties() &#123; return &quot;这个自定义属性名为: &quot; + ymlname+ &quot;, 密码为:&quot; + ymlpass; &#125;&#125; 3.测试—访问: 1http://localhost:8084/yml/proprety 通过Bean方式获取和application.properties方式一样 1.创建YmlPropertyBean.class 1234567@ConfigurationProperties(prefix = &quot;com.eirunye&quot;)//添加该注解public class YmlPropertyBean &#123; private String ymlname; private String ymlpass;// get/set方法.....&#125; 2.在 YmlPropertyBeanController.class引用 123456789@RestControllerpublic class YmlPropertyBeanController &#123; @Autowired YmlPropertyBean propertyBean; @RequestMapping(value = &quot;/bean/ymlproperty&quot;) public String getYmlPropertyData()&#123; return &quot;这个bean自定义属性名为: &quot; + propertyBean.getYmlname()+ &quot;, 密码为:&quot; + propertyBean.getYmlpass(); &#125;&#125; 3.测试-访问 1http://localhost:8084/bean/ymlproperty 下载.yml案例demo 总结 1.本篇主要讲得配置文件，到此就结束了，在开发中这是我们经常用到。 2.在本篇有些相关配置，本例的代码实例还没涉及到，接下来会继续结合相关的配置案例继续更新。 3.相信大家也有所掌握。]]></content>
      <categories>
        <category>后台</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot 项目创建(二)]]></title>
    <url>%2F2018%2F08%2F14%2FSpring-Boot-%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA-%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[如何创建Spring Boot 项目？接下来我们将学习如何创建第一个Spring Boot项目 hello Spring Boot! 呢？ 我们将以 IntelliJ IDEA 开发工具为例创建Spring Boot项目 如果还没下载过IntelliJ IDEA,那么打开下载即可。 IntelliJ IDEA 破解码，这个之前是可以用的，谢谢作者分享，不知道还能不能用。 一切准备完成后，开始使用开发之旅吧。 IDEA创建Spring Boot项目流程如图所示 File —–&gt; New ——&gt; Project… 选择 Spring Initializr Project Matedata 选择Web —–&gt; Web —–&gt; Spring Boot版本(默认即可) 选择项目保存的文件夹 创建完成 查看项目目录12345678910|--src:源代码文件 |--main |--java:项目的代码Java代码编写在这里 |--resources:一般是配置文件等 |--static:静态资源文件(js、css、img) |--template:模板(.html等) |--application.properties: 配置文件 |--test:主要是用于测试|--target:是项目打包生成的.jar文件在这里|--pom.xml:是添加依赖文件、版本号、打包设置为Jar或者War等 (如下图:pom.xml.png) 查看 pom.xml 编辑配置application.properties 文件 一般需要配置一些端口，数据库连接、编码方式等，如下图123456#设置端口server.port=8084#session失效时间server.session-timeout=3000#编码方式server.tomcat.uri-encoding=utf-8 程序的入口文件 编写简单的例子 如下图所示:12345创建一个controller 包，在包下创建 HelloController.class添加注解: @RestController ----&gt;默认Json格式数据 @GetMapping(value = &quot;/hello&quot;) &apos;hello&apos;:表示访问路径 解下来的文章会讲述到更多的注解...... 测试运行是否正常 如下图 访问测试:1浏览器访问 1IDEA 自带的访问(推荐) 1Postman 访问(推荐) 下载安装 Postman 本例项目下载demo 总结 在IDEA开发工具中构建Spring Boot非常简单，推荐大家使用IDEA(Eclipse创建项目在这里不举例了)。 接下来讲解的是Spring Boot 的相关配置。]]></content>
      <categories>
        <category>后台</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot 认识(一)]]></title>
    <url>%2F2018%2F08%2F14%2FSpring-Boot-knowledge-1%2F</url>
    <content type="text"><![CDATA[SpringMVC 、Spring Boot 、SpringCloud 认识最近开发项目一直用到了Spring Boot脚手架工具，让我们来认识它一下吧，进入Spring Boot开发之旅。 认识Spring Boot Spring Boot 是由 Pivotal 团队提供的全新框架，其目的是用来简化新 Spring 应用的初始搭建以及开发过程。 Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”. 在开发中给了我们很大的便利，不用进行过多的配置，和繁琐的设置，非常方便我们学习了开发项目。 总结一下几点非常棒: 1234入门简单开发效率高无须额外的配置监控运行过程等 Spring Boot 和Spring MVC区别 Spring MVC 123Spring MVC 是Spring的一个模块，是一种解决Web开发应用的框架。这种开发模式层次分明，轻度解耦，为Web应用提供了许多模板，减轻了开发难度，但是Spring都要进行复杂的XML、JavaConfig等资源的配置。Spring MVC 框架使用IOC对控制逻辑和业务提供了全面的分离，从而很好的解决了复杂错乱的问题。Spring MVC 需要过分的配置，导致花费更多的时间，效率低下。 Spring Boot 12345Spring Boot 创建完成后，提供了许多复杂的配置，降低了开发的进度和成本。例如: Spring Boot创建完成后，可以集成JDBC、Redis、MySQL、JackJson等等这些配置，让我们在开发过程中收益，只要关注业务，完成相关业务即可，从而不必担心配置的问题。Spring Boot 可以直接独立运行，简单即可。Spring Boot 是Spring的一套快速配置脚手架框架，Spring Boot 提供了一系列的相关配置，还有相关了Maven依赖，完全可靠，开发功能和Spring MVC相关功能兼容。Spring Boot 提供了基于http、ssh、telnet等对运行时的项目进行监控。Spring Boot 降低学习成本，快速入手开发项目，没有繁琐的配置(这是是广大开发者梦寐以求的) Spring Boot 和Spring Cloud区别Spring Cloud 1234Spring Cloud 是一种云端分布式架构的解决框架(称为微服务)。Spring Cloud 是一个基于 Spring Boot 框架实现云微服务应用开发的一套工具.Spring Cloud 主要是专注于服务之间的通讯、熔断、监控等全局的微服务治理框架。Spring Cloud 是不能离开Spring Boot这个环境的，Spring Cloud必须依赖于Spring Boot，但是Spring Boot可以离开Spring Cloud独立使用开发项目。 总结 各位读者如果有更好的见解可以留言，我们一起学习。 我们在不断的进步中，将会对Spring Boot系列进行深入的探究。]]></content>
      <categories>
        <category>后台</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F08%2F09%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment 测试]]></content>
  </entry>
</search>
